<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EPiServer.Cms.Shell.UI</name>
    </assembly>
    <members>
        <member name="T:EPiServer.Cms.Shell.CmsModule">
            <summary>
            This module is responsible for creating custom settings for EPiServer CMS.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.CmsModule.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.CmsModule"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="routeBasePath">The route base path.</param>
            <param name="resourceBasePath">The resource base path.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.CmsModule.#ctor(System.String,System.String,System.String,System.Uri,System.Uri,System.Func{System.String,System.String},EPiServer.Framework.TypeScanner.ITypeScannerLookup,System.Web.Hosting.VirtualPathProvider,System.Collections.Generic.IEnumerable{EPiServer.Shell.IContentRepositoryDescriptor},EPiServer.Cms.Shell.CmsUIDefaults,EPiServer.DataAbstraction.CategoryRepository,EPiServer.Web.DisplayResolutionService,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Web.SiteDefinition},EPiServer.Configuration.EPiServerSection,EPiServer.Configuration.Settings,EPiServer.DataAbstraction.IFrameRepository,EPiServer.Cms.Shell.UI.Rest.Projects.IProjectService,EPiServer.ServiceLocation.ServiceAccessor{System.Web.Routing.RequestContext},EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.IFeatureNotificationService,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Web.Routing.RoutingOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.CmsModule" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="routeBasePath">The route base path.</param>
            <param name="resourceBasePath">The resource base path.</param>
            <param name="uiUrl">The UI URL.</param>
            <param name="utilUrl">The util URL.</param>
            <param name="absolutePathConverter">The absolute path converter.</param>
            <param name="typeScannerLookup">The type scanner lookup.</param>
            <param name="vpp">The VPP.</param>
            <param name="contentRepositoryDescriptors">The descriptors for the content repositories.</param>
            <param name="cmsUiDefaults">The default settings to be sent to the UI.</param>
            <param name="categoryRepository">The category repository.</param>
            <param name="displayResolutionService"></param>
            <param name="featureNotificationService"></param>
            <param name="currentSiteDefinition"></param>
            <param name="episerverSection"></param>
            <param name="settings"></param>
            <param name="frameRepository"></param>
            <param name="projectService"></param>
            <param name="requestContext"></param>
            <param name="featureNotificationService"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.CmsModule.#ctor(System.String,System.String,System.String,System.Uri,System.Uri,System.Func{System.String,System.String},EPiServer.Framework.TypeScanner.ITypeScannerLookup,System.Web.Hosting.VirtualPathProvider,System.Collections.Generic.IEnumerable{EPiServer.Shell.IContentRepositoryDescriptor},EPiServer.Cms.Shell.CmsUIDefaults,EPiServer.DataAbstraction.CategoryRepository,EPiServer.Web.DisplayResolutionService,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Web.SiteDefinition},EPiServer.Configuration.EPiServerSection,EPiServer.Configuration.Settings,EPiServer.DataAbstraction.IFrameRepository,EPiServer.Cms.Shell.UI.Rest.Projects.IProjectService,EPiServer.ServiceLocation.ServiceAccessor{System.Web.Routing.RequestContext},EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.IFeatureNotificationService,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Web.Routing.RoutingOptions},EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Core.Internal.ExternalApplicationOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.CmsModule" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="routeBasePath">The route base path.</param>
            <param name="resourceBasePath">The resource base path.</param>
            <param name="uiUrl">The UI URL.</param>
            <param name="utilUrl">The util URL.</param>
            <param name="absolutePathConverter">The absolute path converter.</param>
            <param name="typeScannerLookup">The type scanner lookup.</param>
            <param name="vpp">The VPP.</param>
            <param name="contentRepositoryDescriptors">The descriptors for the content repositories.</param>
            <param name="cmsUiDefaults">The default settings to be sent to the UI.</param>
            <param name="categoryRepository">The category repository.</param>
            <param name="displayResolutionService"></param>
            <param name="featureNotificationService"></param>
            <param name="currentSiteDefinition"></param>
            <param name="episerverSection"></param>
            <param name="settings"></param>
            <param name="frameRepository"></param>
            <param name="projectService"></param>
            <param name="requestContext"></param>
            <param name="featureNotificationService"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.CmsModule.#ctor(System.String,System.String,System.String,System.Uri,System.Uri,System.Func{System.String,System.String},EPiServer.Framework.TypeScanner.ITypeScannerLookup,System.Web.Hosting.VirtualPathProvider,System.Collections.Generic.IEnumerable{EPiServer.Shell.IContentRepositoryDescriptor},EPiServer.Cms.Shell.CmsUIDefaults,EPiServer.DataAbstraction.CategoryRepository,EPiServer.Web.DisplayResolutionService,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Web.SiteDefinition},EPiServer.Configuration.EPiServerSection,EPiServer.Configuration.Settings,EPiServer.DataAbstraction.IFrameRepository,EPiServer.Cms.Shell.UI.Rest.Projects.IProjectService,EPiServer.ServiceLocation.ServiceAccessor{System.Web.Routing.RequestContext},EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.IFeatureNotificationService,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Core.Internal.ExternalApplicationOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.CmsModule" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="routeBasePath">The route base path.</param>
            <param name="resourceBasePath">The resource base path.</param>
            <param name="uiUrl">The UI URL.</param>
            <param name="utilUrl">The util URL.</param>
            <param name="absolutePathConverter">The absolute path converter.</param>
            <param name="typeScannerLookup">The type scanner lookup.</param>
            <param name="vpp">The VPP.</param>
            <param name="contentRepositoryDescriptors">The descriptors for the content repositories.</param>
            <param name="cmsUiDefaults">The default settings to be sent to the UI.</param>
            <param name="categoryRepository">The category repository.</param>
            <param name="displayResolutionService"></param>
            <param name="featureNotificationService"></param>
            <param name="currentSiteDefinition"></param>
            <param name="episerverSection"></param>
            <param name="settings"></param>
            <param name="frameRepository"></param>
            <param name="projectService"></param>
            <param name="requestContext"></param>
            <param name="featureNotificationService"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.CmsModule.CreateViewModel(EPiServer.Shell.Modules.ModuleTable,EPiServer.Framework.Web.Resources.IClientResourceService)">
            <summary>
            Creates the view module.
            </summary>
            <param name="moduleTable">The module table.</param>
            <param name="clientResourceService">The client resource service.</param>
            <returns>An object that will be serialized and sent to the client when initializing a view.</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.CmsProfileDefaultsInjector">
            <summary>
            Listens to profile created event and sets default values needed by CMS.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.CmsProfileDefaultsInjector.Start">
            <summary>
            Starts listening to profile created event injecting default values.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.CmsProfileDefaultsInjector.Stop">
            <summary>
            Stops listening to profile created event injecting default values.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.CmsUIDefaults">
            <summary>
            Default settings for the CMS UI. These settings are sent to the UI during module startup
            and thus must be overriden during module initialization in order to take effect.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.CmsUIDefaults.DefaultEditorWrapper">
            <summary>
            Gets or sets the default editor wrapper for editors in the on page editing mode.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Extensions.ExceptionExtensions.FormatMessageRecursive(System.Exception,System.String)">
            <summary>
            Create a string containing the messages from an exception all its
            inner exceptions, recursively.
            </summary>
            <param name="x">Exception to recurse inner exceptions of.</param>
            <param name="separator">Separator to use when concatenating messages. </param>
            <returns>A string with all the exception messages separated by the specified separator.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Extensions.ExceptionExtensions.CreateRestResultFromException(System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Creates the rest result from exception.
            </summary>
            <param name="e">The exception</param>
            <param name="httpStatusCode">HTTP status code</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Extensions.ExtendedMetadataExtensions.FindTopMostContentMetadata(EPiServer.Shell.ObjectEditing.ExtendedMetadata)">
            <summary>
            Finds the top most metadata that is a <see cref="T:EPiServer.Core.IContent"/> 
            </summary>
            <param name="metadata">The metadata.</param>
            <returns>Top most metadata tha is a <see cref="T:EPiServer.Core.IContent"/></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Extensions.ExtendedMetadataExtensions.FindTopMostContentMetadata(EPiServer.Shell.ObjectEditing.ExtendedMetadata,System.Collections.Generic.IList{System.String})">
            <summary>
            Finds the top most metadata that is a <see cref="T:EPiServer.Core.IContent"/> . And assemble a fully qualified property name
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="fullPropertyName">Full name of the property.</param>
            <returns>Top most metadata tha is a <see cref="T:EPiServer.Core.IContent"/></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Extensions.ExtendedMetadataExtensions.FindOwnerContent(EPiServer.Shell.ObjectEditing.ExtendedMetadata)">
            <summary>
            Finds the closest owner that is a <see cref="T:EPiServer.Core.IContent"/>.
            </summary>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.Extensions.IEnumerableExtensions">
            <summary>
            Extensions methofs for Enumerable types
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Extensions.IEnumerableExtensions.AsIEnumerable``1(``0)">
            <summary>
            Create an enumerable from a single item.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="item">The item.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.Extensions.NameValueCollectionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Extensions.NameValueCollectionExtensions.ToKnownRouteValues(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Extracts some known internal query parameters and values and decodes them and put them in a <see cref="T:System.Web.Routing.RouteValueDictionary"/>.
            </summary>
            <remarks>
            This is used to be able to pass incoming query parameters to virtual path generation using Routing.
            </remarks>
            <param name="queryParameters"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Extensions.SettingsExtensions.GetFullUrlToEditView(EPiServer.Web.SiteDefinition)">
            <summary>
            Gets the full URL to Home view in sparrowhawk ui.
            </summary>
            <remarks>
            It uses site url from the supplied <see cref="T:EPiServer.Web.SiteDefinition"/> and creates a full url similar to: http://localhost/head/episerver/cms
            </remarks>
        </member>
        <member name="T:EPiServer.Cms.Shell.Extensions.UrlExtensions">
            <summary>
            Extension methods for url manipulation
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Extensions.UrlExtensions.MergeQueryParameters(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Merges query parameters into a url. Existing parameters are updated and new parameters are added.
            </summary>
            <remarks>Uses <see cref="M:EPiServer.UrlBuilder.MergeQueryCollection(System.Collections.Specialized.NameValueCollection)"/> to do the work.</remarks>
            <param name="url">A string containing the existing url</param>
            <param name="parameters">A collection of parameters to add to the url.</param>
            <returns>The url with the new or updated parameters.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.GetUri(EPiServer.Core.IContent)">
            <summary>
            Gets the URI for this instance.
            </summary>
            <param name="content">The content.</param>
            <returns>An <see cref="T:System.Uri"/> that represents the type and id of the item.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.GetUri(EPiServer.Core.IContent,System.Boolean)">
            <summary>
            Gets the URI for this instance.
            </summary>
            <param name="content">The content.</param>
            <param name="createVersionUnspecificLink">if set to <c>true</c> creates a version unspecific link.</param>
            <returns>
            An <see cref="T:System.Uri"/> that represents the type and id of the item.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.SetPropertyValue(EPiServer.Core.IContent,System.String,System.Object)">
            <summary>
            Sets the property value on the content.
            </summary>
            <param name="content">The content.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.LanguageBranch(EPiServer.Core.IContent)">
            <summary>
            Gets language branch of the content.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.HasTranslationAccess(EPiServer.Core.IContent,EPiServer.Globalization.LanguageResolver,EPiServer.DataAbstraction.ILanguageBranchRepository)">
            <summary>
            Determines whether the current user has translation access of the preferred culture
            </summary>
            <param name="content">The content.</param>
            <param name="languageResolver"></param>
            <param name="languageBranchRepository"></param>
            <returns>
              <c>true</c> if [has translation access] [the specified content]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.HasTranslationAccess(EPiServer.Core.IContent,System.Globalization.CultureInfo,System.Security.Principal.IPrincipal,EPiServer.DataAbstraction.ILanguageBranchRepository)">
            <summary>
            Determines whether the specified user has access to translate the specified culture
            </summary>
            <param name="content">The content.</param>
            <param name="culture">The culture to check translation access for.</param>
            <param name="principal">The principal to check access for.</param>
            <param name="languageBranchRepository"></param>
            <returns>
              <c>true</c> if [has translation access] [the specified content]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.IsInCulture(EPiServer.Core.IContent,System.Globalization.CultureInfo)">
            <summary>
            Determines if the <see cref="T:EPiServer.Core.IContent"/> is in the specified <see cref="T:System.Globalization.CultureInfo"/>
            </summary>
            <param name="content">The content to test</param>
            <param name="culture">The culture to test for</param>
            <returns><c>true</c> if the content implements <see cref="T:EPiServer.Core.ILocalizable"/> and belongs to <paramref name="culture"/>; otherwise <c>false</c></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.IsMasterLanguageBranch(EPiServer.Core.IContent)">
            <summary>
            Determines whether this content belongs to the master language branch.
            </summary>
            <param name="content">The content.</param>
            <returns>
            	<c>true</c> if content is localizable and master language; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.EditablePreviewUrl(EPiServer.Core.IContent,EPiServer.Web.Routing.UrlResolver,EPiServer.Web.TemplateResolver)">
            <summary>
            Gets the URL to the editable preview for this content.
            </summary>
            <param name="content">The content.</param>
            <param name="urlResolver"></param>
            <param name="templateResolver"></param>
            <returns>URL to the editable preview.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.PreviewUrl(EPiServer.Core.IContent,EPiServer.Web.Routing.UrlResolver,EPiServer.Web.TemplateResolver)">
            <summary>
            Gets the URL to the preview for this content.
            </summary>
            <param name="content">The content.</param>
            <param name="urlResolver"></param>
            <param name="templateResolver"></param>
            <returns>URL to the preview.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.PreviewUrl(EPiServer.Core.IContent,EPiServer.Core.ContentReference,EPiServer.Web.Routing.UrlResolver,EPiServer.Web.TemplateResolver)">
            <summary>
            Gets the URL to the preview for this content using the requested content reference.
            </summary>
            <param name="content">The content.</param>
            <param name="requestedContentReference">The requested content reference.</param>
            <param name="urlResolver">The URL resolver.</param>
            <param name="templateResolver"></param>
            <returns>URL to the preview.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.GetUrlForMode(EPiServer.Core.IContent,EPiServer.Core.ContentReference,EPiServer.Web.ContextMode,System.Web.Routing.RouteValueDictionary,EPiServer.Web.Routing.UrlResolver,EPiServer.Web.TemplateResolver)">
            <summary>
            Resolves the url for a content instance using <paramref name="urlResolver" /> in given <see cref="T:EPiServer.Web.ContextMode" />.
            </summary>
            <param name="content">The content to resolve the url for.</param>
            <param name="requestedContentReference">States the content reference to use, if not given is content.ContentLink used.</param>
            <param name="mode">The <see cref="T:EPiServer.Web.ContextMode" /> to get the url for.</param>
            <param name="routeValues">RouteValues passed on to routing, e.g. query parameters.</param>
            <param name="urlResolver">The <see cref="F:EPiServer.Cms.Shell.IContentExtensions.UrlResolver" /> instance to use.</param>
            <param name="templateResolver"></param>
            <returns>
            The content url or <see cref="F:System.String.Empty" /> if no url was resolved.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.GetUrlForMode(EPiServer.Core.IContent,EPiServer.Core.ContentReference,System.String,EPiServer.Web.ContextMode,System.Web.Routing.RouteValueDictionary,EPiServer.Web.Routing.UrlResolver,EPiServer.Web.TemplateResolver)">
            <summary>
            Resolves the url for a content instance using <paramref name="urlResolver" /> in given <see cref="T:EPiServer.Web.ContextMode" />.
            </summary>
            <param name="content">The content to resolve the url for.</param>
            <param name="requestedContentReference">States the content reference to use, if not given is content.ContentLink used.</param>
            <param name="language">The language.</param>
            <param name="mode">The <see cref="T:EPiServer.Web.ContextMode" /> to get the url for.</param>
            <param name="routeValues">RouteValues passed on to routing, e.g. query parameters.</param>
            <param name="urlResolver">The <see cref="F:EPiServer.Cms.Shell.IContentExtensions.UrlResolver" /> instance to use.</param>
            <param name="templateResolver"></param>
            <returns>
            The content url or <see cref="F:System.String.Empty" /> if no url was resolved.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.PublicUrl(EPiServer.Core.IContent)">
            <summary>
            Gets the content's public URL.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.PublicUrl(EPiServer.Core.IContent,EPiServer.Web.Routing.UrlResolver)">
            <summary>
            Gets the content's public URL.
            </summary>
            <param name="content">The content.</param>
            <param name="urlResolver">The url resolver</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.PublicUrl(EPiServer.Core.IContent,System.String,EPiServer.Web.Routing.UrlResolver)">
            <summary>
            Gets the content's public URL.
            </summary>
            <param name="content">The content.</param>
            <param name="urlResolver">The url resolver</param>
            <param name="language">The requested language</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.PublicUrl(EPiServer.Core.IContent,System.String,System.Web.Routing.RouteValueDictionary,EPiServer.Web.Routing.UrlResolver)">
            <summary>
            Gets the content's public URL.
            </summary>
            <param name="content">The content.</param>
            <param name="language">The requested language</param>
            <param name="routeValues">Route values used for url generation.</param>
            <param name="urlResolver">The url resolver</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.ThumbnailUrl(EPiServer.Core.IContent)">
            <summary>
            Gets the content's thumbnail url.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.DownloadUrl(EPiServer.Core.IContent)">
            <summary>
            The URL used to downloads media content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.DownloadUrl(EPiServer.Core.IContent,EPiServer.Web.Routing.UrlResolver,EPiServer.Web.TemplateResolver)">
            <summary>
            The URL used to downloads media content.
            </summary>
            <param name="content">The content.</param>
            <param name="urlResolver">The URL resolver.</param>
            <param name="templateResolver"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.GetTypeIdentifier(EPiServer.Core.IContent)">
            <summary>
            Gets the type identifier of the content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.GetTypeIdentifier(EPiServer.Core.IContent,EPiServer.Shell.UIDescriptorRegistry)">
            <summary>
            Gets the type identifier of the content.
            </summary>
            <param name="content">The content.</param>
            <param name="uiDescriptorRegistry"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.IsPublished(EPiServer.Core.IContent)">
            <summary>
            Determines whether the specified content is published.
            </summary>
            <param name="content">The content.</param>
            <returns>
              <c>true</c> if the specified content is published; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.HasExpired(EPiServer.Core.IVersionable)">
            <summary>
            Determins if the <see cref="T:EPiServer.Core.IVersionable"/> has expired
            </summary>
            <param name="content"></param>
            <returns>True if the status is Published and the StopPublish is less than DateTime.Now</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.HasTemplate(EPiServer.Core.IContent,EPiServer.Web.ContextMode,EPiServer.Web.TemplateResolver)">
            <summary>
            Check if the content has page template
            </summary>
            <param name="content">The content</param>
            <param name="contextMode">The context mode</param>
            <param name="templateResolver">The template resolver</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.IContentExtensions.IsRootNode(EPiServer.Web.ISiteDefinitionRepository,EPiServer.Core.IContent,EPiServer.Web.SiteDefinition)">
            <summary>
            Checks if an item is considered to be a system root, for instance a start page, a global or site block root etc.
            </summary>
            <param name="siteDefinitionRepository"></param>
            /// <param name="content">The content to test the condition.</param>
            <param name="currentSiteDefinition">The current site definition</param>
            <returns>True if this item is considered to be a root, otherwise false.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.InitializableModule.OnAccessPath(System.Object,EPiServer.Shell.Modules.ReadOnlyProtectedModuleEventArgs)">
            <summary>
            Handle requests made while the system is in read only mode
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:EPiServer.Cms.Shell.Internal.CmsModuleViewModel">
            <summary>
            View model class that will be serialized and sent to the client for views in the user interface.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Internal.CmsModuleViewModel.#ctor(EPiServer.Shell.Modules.ShellModule,EPiServer.Framework.Web.Resources.IClientResourceService,System.Collections.Generic.IEnumerable{EPiServer.Shell.IContentRepositoryDescriptor})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Shell.Modules.ModuleViewModel"/> class.
            </summary>
            <param name="module">The module.</param>
            <param name="clientResourceService">The client resource service.</param>
            <param name="contentRepositoryDescriptors"></param>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.CmsModuleViewModel.ApplicationVirtualPath">
            <summary>
            Gets or sets the application virtual path
            </summary>
            <value>The application virtual path</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.CmsModuleViewModel.UIDefaults">
            <summary>
            Gets or sets the default editor wrapper for editors in the On Page Editing mode.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.CmsModuleViewModel.StartPage">
            <summary>
            Gets or sets the start page for the current site.
            </summary>
            <value>The start page for the current site.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.CmsModuleViewModel.RootPage">
            <summary>
            Gets or sets the root page for the system.
            </summary>
            <value>The root page.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.CmsModuleViewModel.WastebasketPage">
            <summary>
            Gets or sets the wastebasket page for the current site.
            </summary>
            <value>The wastebasket page for the current site.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.CmsModuleViewModel.SiteAssetsFolder">
            <summary>
            Gets or sets the site assets folder.
            </summary>
            <value>The site assets folder.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.CmsModuleViewModel.GlobalAssetsFolder">
            <summary>
            Gets or sets the global assets folder.
            </summary>
            <value>The global assets folder.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.CmsModuleViewModel.ContentAssetsFolder">
            <summary>
            Gets or sets the content assets folder.
            </summary>
            <value>The content assets folder.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.CmsModuleViewModel.RootCategory">
            <summary>
            Gets or sets the root category.
            </summary>
            <value>The root of category.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.CmsModuleViewModel.Frames">
            <summary>
            Gets or sets the frame list
            </summary>
            <value>The list of frames.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.CmsModuleViewModel.UserName">
            <summary>
            Gets or sets the current logging user name.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.CmsModuleViewModel.DisplayResolutions">
            <summary>
            Gets or sets the display preview resolutions.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.CmsModuleViewModel.CurrentContentLanguage">
            <summary>
            Gets the current content language selected by the user
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.CmsModuleViewModel.ExpirationNotificationPeriod">
            <summary>
            Gets or sets the amount of time (in seconds, even though realistic usage scenarios
            probably use an even number of days) before a contents expiration time that the
            expiration warning should become visible.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.CmsModuleViewModel.ImageEditorEnabled">
            <summary>
            Gets or sets a value indicating whether the image editor is enabled.
            </summary>
            <value>
              <c>true</c> if the image editor is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.CmsModuleViewModel.DisableVersionDeletion">
            <summary>
            Gets or sets a value indicating whether version deletion is disabled.
            </summary>
            <value>
            <c>true</c> if version deletion is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.CmsModuleViewModel.IsProjectModeEnabled">
            <summary>
            Gets or sets a value indicating whether project mode is enabled
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.CmsModuleViewModel.IsDynamicPropertiesEnabled">
            <summary>
            Gets or sets a value indicating whether dynamic properties are enabled
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.CmsModuleViewModel.EnableStickyView">
            <summary>
            Gets or sets a value indicating whether the selected view will be loaded from the user profile
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.CmsModuleViewModel.LimitUI">
            <summary>
            Limits some features from the UI that is not supported by certain configurations, like separate domain setup using content delivery API.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.Internal.FrameViewModel">
            <summary>
            View model class that describes the frames information
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.FrameViewModel.ID">
            <summary>
            The frame unique identifier
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.FrameViewModel.Name">
            <summary>
            Actual frame name, for example "_blank"
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.FrameViewModel.Description">
            <summary>
            The display description for the frame
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.FrameViewModel.LocalizedDescription">
            <summary>
            The localized display description for the frame
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Internal.FrameViewModel.IsSystemFrame">
            <summary>
            If this is a non-deletable system frame
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Internal.UIImportOptions">
            <summary>
            Provides options for how imports affects the UI.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Internal.UIImportOptions.MarkUsersAsImporters">
            <summary>
            Should users currently importing content be skipped when sending notifications for changes in the imported content.
            </summary>
            <remarks>
            Default value is true.
            </remarks>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Internal.UIImportOptions.ImporterTimeout">
            <summary>
            The number of minutes to wait until a user running an import is removed from the importers list if the user has not been automatically removed after import is finished.
            </summary>
            <remarks>
            Default value is 120.
            </remarks>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Internal.CmsMenuProvider">
            <summary>
            Provides menu items for the CMS product.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.CmsMenuProvider.#ctor(EPiServer.ServiceLocation.IServiceLocator,EPiServer.Framework.Localization.LocalizationService,EPiServer.Core.Internal.ExternalApplicationOptions)">
            <summary>
            Initialized a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Internal.CmsMenuProvider"/> class by referencing a IServiceLocator and a LocalizationService.
            </summary>
            <param name="serviceLocator">The IServiceLocator used to get an instance of <see cref="T:System.Web.Routing.RequestContext"/>.</param>
            <param name="localizationService">The LocalizationService used for translation.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.CmsMenuProvider.GetMenuItems">
            <summary>
            Provides the CMS menu section and the CMS settings section.
            </summary>
            <returns>
            A list of <see cref="T:EPiServer.Shell.Navigation.MenuItem"/>s that the provider exposes.
            </returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Internal.ContentDataMetadataProvider">
            <summary>
            A metadata handler for <see cref="T:EPiServer.Core.IContent"/>
            </summary>
        </member>
        <member name="F:EPiServer.Cms.Shell.UI.Internal.ContentDataMetadataProvider._propertyDefinitionRepository">
            <summary>
            A delegate to load <see cref="T:EPiServer.DataAbstraction.PropertyDefinition"/> from pageDefinitionID.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.ContentDataMetadataProvider.#ctor(EPiServer.Shell.ObjectEditing.MetadataHandlerRegistry,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAbstraction.IPropertyDefinitionRepository},EPiServer.DataAbstraction.ITabDefinitionRepository,EPiServer.DataAbstraction.ContentTypeModelRepository,EPiServer.Cms.Shell.UI.Internal.ContentMetaDataPropertiesInjector,EPiServer.Cms.Shell.UI.Rest.IMetaDataResolver,EPiServer.IContentLoader,EPiServer.Framework.Localization.LocalizationService,EPiServer.Shell.ObjectEditing.ExtensibleMetadataProvider,EPiServer.ServiceLocation.ServiceAccessor{System.Web.HttpContextBase},EPiServer.Validation.IPropertyValidationSettingsRepository)">
            <summary>
            Constructs a provider with custom <see cref="T:EPiServer.DataAbstraction.PropertyDefinition"/> loader.
            </summary>
            <param name="editorRegistry">The editor registry.</param>
            <param name="propertyDefinitionRepository">The property definition repository.</param>
            <param name="tabRepository">The tab repository.</param>
            <param name="contentTypeModelRepository">The content type model repository.</param>
            <param name="contentMetaDataPropertiesInjector">The content meta data properties injector.</param>
            <param name="resolver">The meta data resolver.</param>
            <param name="contentLoader">The content loader.</param>
            <param name="localizationService">The localization service</param>
            <param name="provider">Instance of ExtensibleMetaDataProvider</param>
            <param name="httpContextAccessor">HttpContextBase Service Accessor</param>
            <param name="propertyValidationSettingsRepository">The property validation settings repository</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.ContentDataMetadataProvider.CreateMetadata(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Func{System.Object},System.Type,System.String)">
            <summary>
            Creates and returns the <see cref="T:EPiServer.Shell.ObjectEditing.ExtendedMetadata"/> for the top level object.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="containerType">The type of the container.</param>
            <param name="modelAccessor">The model accessor.</param>
            <param name="modelType">The type of the model.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>The <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.ContentDataMetadata"/> for the top level object.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.ContentDataMetadataProvider.GetMetadataForProperties(System.Object,System.Type)">
            <summary>
            Creates and returns the list of <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.ContentDataMetadata"/> for sub properties.
            </summary>
            <param name="container">The container.</param>
            <param name="containerType">Type of the container, not used by this implementation.</param>
            <returns>List of <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.ContentDataMetadata"/> for sub properties, or empty list if input <paramref name="container"/> was not an instance of <see cref="T:EPiServer.Core.IContentData"/>.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.ContentDataMetadataProvider.HasEditorDescriptor(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Determines whether a metadata handler is connected to the type, either generic or hinted.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.ContentDataMetadataProvider.HasLegacyEditorDescriptor(System.Type)">
            <summary>
            Determines whether the legacy metadata handler is connected to the type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.ContentDataMetadataProvider.AddValidationSettingsAsAttributes(EPiServer.Cms.Shell.UI.ObjectEditing.ContentDataMetadata)">
            <summary>
            Load and convert validation settings into validation attributes.
            </summary>
            <param name="metadata">The meta data.</param>
            <remarks>
                Validation settings takes precedence over validation attributes
                defined on the content types.
            </remarks>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.ContentDataMetadataProvider.AddGroupInformation(EPiServer.Core.IContentData,EPiServer.Core.PropertyData,EPiServer.Cms.Shell.UI.ObjectEditing.ContentDataMetadata,EPiServer.DataAbstraction.PropertyDefinition,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Adds group information to metadata.
            </summary>
            <param name="contentData">The content data.</param>
            <param name="property">The prop.</param>
            <param name="metaData">The meta data.</param>
            <param name="propertyDefinition">The property definition.</param>
            <param name="groups">The groups.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.ContentDataMetadataProvider.GetPropertyMappings(System.Object)">
             <summary>
             Gets a list of mappings between the backing property name in the property collection and the interface prefixed name.
             A mapping is also created for the property name without the interface prefix.
             </summary>
             <remarks>
             Since the metadata properties are prefixed with the name of the declaring interface
             to avoid name clashes with the property collection.
             Adding a property named "Name" to the property collection in admin mode is possible,
             but it would conflict with the content name (which is stored as "PageName") for
             page data content.
            
             Example: A mapping would be
                 Name -> IContent_Name, and
                 PageName -> IContent_Name
             </remarks>
             <param name="container">The container, which should be some type of <see cref="T:EPiServer.Core.IContent"/> for the CMS.</param>
             <returns>A list of mappings between the backing property name, and the interface name.</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Internal.ContentDataModelAccessorCreator">
            <summary>
            Metadata model accessor creator for the <see cref="T:EPiServer.Core.ContentData"/>
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.ContentDataModelAccessorCreator.#ctor(EPiServer.IContentRepository,EPiServer.Globalization.LanguageResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Internal.ContentDataModelAccessorCreator"/> class.
            </summary>
            <param name="contentRepository">The content repository.</param>
            <param name="languageResolver">The language resolver</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.ContentDataModelAccessorCreator.Create(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates the metadata model accessor.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns>Model accessor function</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.ContentDataModelAccessorCreator.AccessByContentId(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Accesses the by content id.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.ContentDataModelAccessorCreator.AccessByContentTypeId(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Accesses the by content type id.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.ContentMetaDataPropertiesInjector.#ctor(EPiServer.DataAbstraction.IBackingTypeResolver,EPiServer.Cms.Shell.UI.Rest.IMetaDataResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Internal.ContentMetaDataPropertiesInjector"/> class.
            </summary>
            <param name="backingTypeResolver">The backing type metaDataResolver.</param>
            <param name="metaDataResolver">The meta data resolver.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.ContentMetaDataPropertiesInjector.Inject(EPiServer.Core.IContentData)">
            <summary>
            Injects metadata properties into the properties collection.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Internal.GroupedMetaDataRegistry">
            <summary>
            A registry containing all implementations of <see cref="T:EPiServer.Cms.Shell.UI.GroupedMetaDataPropertyInfo"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.GroupedMetaDataRegistry.#ctor(EPiServer.Framework.TypeScanner.ITypeScannerLookup,EPiServer.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Internal.GroupedMetaDataRegistry"/> class.
            </summary>
            <param name="typeLookup">The type lookup to find each implementation.</param>
            <param name="serviceLocator">The service locator to instanciate the GroupedMetaDataPropertyInfo objects.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.GroupedMetaDataRegistry.Get(System.Type)">
            <summary>
            Gets all instances of <see cref="T:EPiServer.Cms.Shell.UI.GroupedMetaDataPropertyInfo"/> whose DeclaringType property matches the specified type.
            </summary>
            <param name="type">The type to match against DeclaringType on <see cref="T:EPiServer.Cms.Shell.UI.GroupedMetaDataPropertyInfo"/>.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Internal.MetaDataPropertyInfo">
            <summary>
            Contains information about a meta data property.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.MetaDataPropertyInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Internal.MetaDataPropertyInfo"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.MetaDataPropertyInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Internal.MetaDataPropertyInfo"/> class.
            </summary>
            <param name="propertyInfo">The property info.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Internal.MetaDataPropertyInfo.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Internal.MetaDataPropertyInfo.DeclaringType">
            <summary>
            Gets the type of the interface declaring this meta data property.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Internal.MetaDataPropertyInfo.UniquePropertyName">
            <summary>
            Gets the a unique name of the property.
            </summary>
            <remarks>
            The format is [declaringtypeName]_[propertyName].
            </remarks>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Internal.MetaDataPropertyInfo.PropertyType">
            <summary>
            Gets the type of this meta data property.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Internal.MetaDataPropertyInfo.PropertyBackingType">
            <summary>
            Gets the backing type of this meta data property.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Internal.MetaDataPropertyInfo.SetValue">
            <summary>
            Gets the action that sets the value of this meta data property.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Internal.MetaDataPropertyInfo.GetValue">
            <summary>
            Gets the delegate that gets value of this meta data property.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Internal.MetaDataPropertyInfo.IsLanguageSpecific">
            <summary>
            Gets a value indicating whether this instance is language specific.
            </summary>
            <value>
            	<c>true</c> if this instance is language specific; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Internal.ViewModeMenuProvider">
            <summary>
            Provides menu items for the CMS product.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.ViewModeMenuProvider.#ctor(EPiServer.IContentRepository,EPiServer.Framework.Localization.LocalizationService,EPiServer.Web.ISiteDefinitionRepository,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Web.SiteDefinition},EPiServer.Web.Routing.UrlResolver,EPiServer.ServiceLocation.ServiceAccessor{System.Web.HttpContextBase})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Internal.ViewModeMenuProvider"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.ViewModeMenuProvider.GetMenuItems">
            <summary>
            Provides the go to view mode menu item(s).
            </summary>
            <returns>
            A list of <see cref="T:EPiServer.Shell.Navigation.MenuItem"/>s that the provider exposes.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.ViewModeMenuProvider.GetUrl(EPiServer.Core.ContentReference,EPiServer.Web.SiteDefinition)">
            <summary>
            Returns a resolved URL for the supplied <paramref name="contentLink"/> using <paramref name="definition"/> to determine what host to use.
            </summary>
            <param name="contentLink">The content link that the URL should resolve to.</param>
            <param name="definition">The definition to use to determine what host to base the URL on.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Internal.ViewModeMenuProvider.GetPreferredHostDefinition(EPiServer.Web.SiteDefinition)">
            <summary>
            Gets the preferred host definition from the supplied <paramref name="definition"/>.
            </summary>
            <param name="definition">The definition that contains the available hosts.</param>
            <returns>
            The first host defintion that matches the current requested URL.
            If no match, the Edit host definition will be used.
            If there is no edit host, the Primary or any undefined host definition.
            </returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ActionResults.Internal.TransferResult">
            <summary>
            Represents an ActionResult which works like Server.TransferRequest.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ActionResults.Internal.TransferResult.Url">
            <summary>
            Gets or sets the Url
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ActionResults.Internal.TransferResult.#ctor(System.String)">
            <summary>
            Creates an instance of TransferResult
            </summary>
            <param name="url"></param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalHtmlEmailFormatter">
            <summary>
            Formats one or more Content Approval related notification messages into one single e-mail notification.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalHtmlEmailFormatter.SupportedChannelNames">
            <summary>
            Gets the list of channels supported by this formatter
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalHtmlEmailFormatter.FormatMessagesAsync(System.Collections.Generic.IEnumerable{EPiServer.Notification.FormatterNotificationMessage},System.String,EPiServer.Notification.NotificationFormat,System.String)">
            <summary>
            Performs formatting and concatenation of messages.
            </summary>
            <param name="notifications">Messages to format</param>
            <param name="recipient">The receiver of the message</param>
            <param name="format">The format to format to</param>
            <param name="channelName">The message channel</param>
            <returns>A list of one formatted message</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalMessage">
            <summary>
            Internal approval message class that is serialized in the <see cref="T:EPiServer.Notification.NotificationMessage"/> content
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalMessage.Status">
            <summary>
            Status of the content at the time of the event
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalMessage.ContentLink">
            <summary>
            Contentlink of the content
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalMessage.ResourceKey">
            <summary>
            ResourceKey to look up localization
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalMessage.Comment">
            <summary>
            Comment to be displayed in the notification
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalMessage.StepNumber">
            <summary>
            Current step in approval
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalMessage.TotalSteps">
            <summary>
            Total number of steps in the definition
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalMessage.Created">
            <summary>
            Gets or sets the Date instance when the message was created.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalNotificationOptions">
            <summary>
            Provides options for how approval notifications should be handled.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalNotificationOptions.Immediate">
            <summary>
            Indicates if approval notifications should be sent immediately.
            </summary>
            <remarks>
            Default value is false.
            </remarks>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalNotifier">
            <summary>
            Service that listens to changes made to the approval and creates the corresponding user notification
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalNotifier.CreateNotificationMessage(System.String,System.Collections.Generic.IEnumerable{EPiServer.Notification.INotificationUser},EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalMessage)">
            <summary>
            Creates and posts the notification message
            </summary>
            <param name="sender">Author of the message</param>
            <param name="recipients">Recipients of the message</param>
            <param name="approvalMessage"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalNotifier.SerializeContent(EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalMessage)">
            <summary>
            Seralize the content that is sent in the notification
            </summary>
            <param name="approvalMessage"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalUserNotificationFormatter">
            <summary>
            Formats the Content Approval related UserNotificationMessage before it shows in the UI.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalUserNotificationFormatter.SupportedChannelNames">
            <summary>
            Gets the list of channels supported by this formatter
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalUserNotificationFormatter.FormatUserMessageAsync(EPiServer.Notification.UserNotificationMessage)">
            <summary>
            Formats the UserNotificationMessage to FormattedUserNotificationMessage
            </summary>
            <param name="userNotificationMessage">An instance of UserNotificationMessage</param>
            <returns>An instance of FormattedUserNotificationMessage</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalUserNotificationFormatter.CreateRequestedByNode(System.String)">
            <summary>
            Creates the requested by text node
            </summary>
            <param name="text">Localized requested by text</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalViewModelFactory">
            <summary>
            Creates instances of <see cref="T:EPiServer.Cms.Shell.UI.Approvals.Notifications.Internal.ApprovalViewModel"/>
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalViewModelFactory.CreateApprovalViewModel(EPiServer.Core.IContent,System.Collections.Generic.IEnumerable{EPiServer.Cms.Shell.UI.Approvals.Notifications.NotificationApprovalMessage},EPiServer.Cms.Shell.UI.Approvals.Notifications.EmailViewModelFormatter)">
            <summary>
            Creates an instance of ApprovalViewModel for a list of notifications about a single content item
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalViewModelFactory.CreateNoAccessApprovalViewModel(EPiServer.Core.IContent,System.Collections.Generic.IEnumerable{EPiServer.Cms.Shell.UI.Approvals.Notifications.NotificationApprovalMessage},EPiServer.Cms.Shell.UI.Approvals.Notifications.EmailViewModelFormatter,System.String)">
            <summary>
            Creates an instance of ApprovalViewModel about a content item that the user has no access to any more
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Notifications.ApprovalViewModelFactory.ResolveContentUrl(EPiServer.Core.ContentReference)">
            <summary>
            Gets the edit url for a given content reference
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Approvals.Notifications.EmailViewModelFormatter">
            <summary>
            A utility class with helpers methods to fetch the localized resources for ApprovalEmailViewModel
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Approvals.Notifications.Internal.ApprovalNotificationViewModel">
            <summary>
            View model that represents a single notification
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.Internal.ApprovalNotificationViewModel.Message">
            <summary>
            The message of the notification
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.Internal.ApprovalNotificationViewModel.Author">
            <summary>
            Author of the message
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.Internal.ApprovalNotificationViewModel.Timestamp">
            <summary>
            Time when the status of the content was changed
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.Internal.ApprovalNotificationViewModel.Comment">
            <summary>
            Comment typed in by the reviewer
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.Internal.ApprovalNotificationViewModel.Status">
            <summary>
            Status css class that is set in the email for different colors
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.Internal.ApprovalNotificationViewModel.Subject">
            <summary>
            Subject of the notification message
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Approvals.Notifications.Internal.ApprovalViewModel">
            <summary>
            View model that represents a section with a list of notifications about a single content item
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.Internal.ApprovalViewModel.CallToActionText">
            <summary>
            Call to action text. E.g. "Go to item"
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.Internal.ApprovalViewModel.CallToActionUrl">
            <summary>
            Call to action URL. E.g. "http://mysite/EPiServer/Cms/#context=epi.cms.contentdata:///1"
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.Internal.ApprovalViewModel.Title">
            <summary>
            The title of the content
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.Internal.ApprovalViewModel.ProjectTitle">
            <summary>
            The projecttitle of the notification if the content belongs to an project
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.Internal.ApprovalViewModel.Language">
            <summary>
            Language of the content
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.Internal.ApprovalViewModel.Type">
            <summary>
            Type of the content E.g. "Page, Block, Media"
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Notifications.Internal.ApprovalViewModel.Notifications">
            <summary>
            A list of notifications that relate to a particular content
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Approvals.Notifications.UserNotificationFormatter">
            <summary>
            This class is responsible for resolving content for a specific user and if
            the resolve is unsuccessful giving a localized error message about what the problem is.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Notifications.UserNotificationFormatter.TryGetContentData(EPiServer.Core.ContentReference,System.String,EPiServer.Core.IContent@)">
            <summary>
            This method will try to fetch content from repository and check if it's really accessible, is not in trash or deleted permanently.
            </summary>
            <param name="contentLink">The content link to check</param>
            <param name="requestingUsername">Username of the user that is requesting the content</param>
            <param name="content">Resolved content instance</param>
            <returns>Resource key for the correct error message if something goes wrong</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Approvals.Queries.ApprovalsQueryBase`1">
            <summary>
            Base class to be used by Content Approval tasks queries.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.ApprovalsQueryBase`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.ApprovalsQueryBase`1.Rank">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Queries.ApprovalsQueryBase`1.CanHandleQuery(EPiServer.Shell.Rest.IQueryParameters)">
            <inheritdoc/>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.ApprovalsQueryBase`1.VersionSpecific">
            <summary>
            Multiple versions of the same content can be in multiple approval sequences which means that the queries needs to be version specific.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.ApprovalsQueryBase`1.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.ApprovalsQueryBase`1.SortOrder">
            <inheritdoc/>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.ApprovalsQueryBase`1.AcceptedStatuses">
            <summary>
            Accept content items with those statuses
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.ApprovalsQueryBase`1.IgnoredStatuses">
            <summary>
            Ignore content items with those statuses
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.ApprovalsQueryBase`1.PlugInAreas">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Queries.ApprovalsQueryBase`1.ExecuteQuery(EPiServer.Shell.Rest.IQueryParameters)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Queries.ApprovalsQueryBase`1.SortApprovals(System.Collections.Generic.IEnumerable{EPiServer.Approvals.ContentApprovals.ContentApproval})">
            <summary>
            The default method of sorting, unless overriden, will sort the approvals based on their Started date
            </summary>
            <param name="approvals"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Queries.ApprovalsQueryBase`1.GetQueryParams(System.String)">
            <summary>
            Get the query parameters that will be used during query execution
            </summary>
            <param name="currentUserName"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Queries.ApprovalsQueryBase`1.Filter(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent})">
            <summary>
            Filter the results by access level, and if it's in trash
            </summary>
            <param name="items">The list of items to filter</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Approvals.Queries.ContentStatusAwaitingApprovalQuery">
            <summary>
            Returns all content that are in the state AwaitingApproval
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Queries.ContentStatusAwaitingApprovalQuery.#ctor(EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper,EPiServer.IContentRepository,EPiServer.Core.IContentVersionRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Approvals.Queries.ContentStatusAwaitingApprovalQuery"/> class.
            </summary>
            <param name="queryHelper">Helper used for filter, sort and range.</param>
            <param name="contentRepository">The content repository.</param>
            <param name="contentVersionRepository">The content version repository.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.ContentStatusAwaitingApprovalQuery.Name">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.ContentStatusAwaitingApprovalQuery.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.ContentStatusAwaitingApprovalQuery.PlugInAreas">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.ContentStatusAwaitingApprovalQuery.SortOrder">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Queries.ContentStatusAwaitingApprovalQuery.GetActivities(System.Int32,System.Int32,System.Security.Principal.IPrincipal,System.String)">
            <summary>
            Gets all content items that are in the state AwaitingApproval
            </summary>
            <inheritdoc select="param|returns" />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Approvals.Queries.ReceivedApprovedQuery">
            <summary>
            Returns all content that was approved by the the current user.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Queries.ReceivedApprovedQuery.#ctor(EPiServer.Cms.Shell.Service.Internal.ContentLoaderService,EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper,EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Approvals.Queries.ReceivedApprovedQuery"/> class.
            </summary>
            <param name="contentLoaderService">The content loader service</param>
            <param name="queryHelper">Helper used for filter, sort and range.</param>
            <param name="approvalService">The approval service, which takes responsibility for getting related content.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.ReceivedApprovedQuery.Name">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.ReceivedApprovedQuery.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.ReceivedApprovedQuery.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.ReceivedApprovedQuery.IgnoredStatuses">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Queries.ReceivedApprovedQuery.GetQueryParams(System.String)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Approvals.Queries.ReceivedPendingQuery">
            <summary>
            Returns all content that is awaiting approval from the the current user.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Queries.ReceivedPendingQuery.#ctor(EPiServer.Cms.Shell.Service.Internal.ContentLoaderService,EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper,EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Approvals.Queries.ReceivedPendingQuery"/> class.
            </summary>
            <param name="contentLoaderService">The content loader service</param>
            <param name="queryHelper">Helper used for filter, sort and range.</param>
            <param name="approvalService">The approval service, which takes responsibility for getting related content.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.ReceivedPendingQuery.Name">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.ReceivedPendingQuery.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.ReceivedPendingQuery.DisplayName">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Queries.ReceivedPendingQuery.GetQueryParams(System.String)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Approvals.Queries.SentApprovedQuery">
            <summary>
            Returns all content that is in approved state for the the current user.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Queries.SentApprovedQuery.#ctor(EPiServer.Cms.Shell.Service.Internal.ContentLoaderService,EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper,EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Approvals.Queries.SentApprovedQuery"/> class.
            </summary>
            <param name="contentLoaderService">The content loader service</param>
            <param name="queryHelper">Helper used for filter, sort and range.</param>
            <param name="approvalService">The approval service, which takes responsibility for getting related content.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.SentApprovedQuery.Name">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.SentApprovedQuery.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.SentApprovedQuery.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.SentApprovedQuery.IgnoredStatuses">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Queries.SentApprovedQuery.GetQueryParams(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Queries.SentApprovedQuery.SortApprovals(System.Collections.Generic.IEnumerable{EPiServer.Approvals.ContentApprovals.ContentApproval})">
            <summary>
            Sort the items based on the Approval Completed date
            </summary>
            <param name="approvals"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Approvals.Queries.SentPendingQuery">
            <summary>
            Returns all content that is pending approval for the the current user.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Queries.SentPendingQuery.#ctor(EPiServer.Cms.Shell.Service.Internal.ContentLoaderService,EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper,EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Approvals.Queries.SentPendingQuery"/> class.
            </summary>
            <param name="contentLoaderService">The content loader service</param>
            <param name="queryHelper">Helper used for filter, sort and range.</param>
            <param name="approvalService">The approval service, which takes responsibility for getting related content.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.SentPendingQuery.Name">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.SentPendingQuery.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.SentPendingQuery.DisplayName">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Queries.SentPendingQuery.GetQueryParams(System.String)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Approvals.Queries.SentRejectedQuery">
            <summary>
            Returns all content that is in rejected state for the the current user.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Queries.SentRejectedQuery.#ctor(EPiServer.Cms.Shell.Service.Internal.ContentLoaderService,EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper,EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Approvals.Queries.SentRejectedQuery"/> class.
            </summary>
            <param name="contentLoaderService">The content loader service</param>
            <param name="queryHelper">Helper used for filter, sort and range.</param>
            <param name="approvalService">The approval service, which takes responsibility for getting related content.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.SentRejectedQuery.Name">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.SentRejectedQuery.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.SentRejectedQuery.DisplayName">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Queries.SentRejectedQuery.GetQueryParams(System.String)">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.SentRejectedQuery.AcceptedStatuses">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Approvals.Queries.SentRejectedQuery.SortApprovals(System.Collections.Generic.IEnumerable{EPiServer.Approvals.ContentApprovals.ContentApproval})">
            <summary>
            Sort the items based on the Approval Completed date
            </summary>
            <param name="approvals"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Approvals.Queries.TasksReceivedQueryCategory">
            <summary>
            Category for the users received approval requests. Used to group the status queries in the Task component.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.TasksReceivedQueryCategory.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.TasksReceivedQueryCategory.SortOrder">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Approvals.Queries.TasksSentQueryCategory">
            <summary>
            Category for the users sent approval requests. Used to group the status queries in the Task component.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.TasksSentQueryCategory.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Approvals.Queries.TasksSentQueryCategory.SortOrder">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Components.Internal.TasksQueryService.GetQueries">
            <summary>
            Returns a flat list of all queries ordered by their sort order
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Components.Internal.TasksQueryService.GetCategorizedQueries">
            <summary>
            Get the categorized queries.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Components.Internal.TasksQueryService.Categorize">
            <summary>
            Categorizes the queries.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Components.Internal.TasksQueryService.FilteredQueries">
            <summary>
            Filters out the queries that should be shown in the Tasks component.
            </summary>
            <returns>The queries that should be shown.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Components.Internal.TasksQueryService.GetUncategorizedQueries(System.Collections.Generic.IEnumerable{EPiServer.Shell.ContentQuery.IContentQuery})">
            <summary>
            Filters out the queries that are not part of a category.
            </summary>
            <param name="queries">The queries to filter.</param>
            <returns>The queries that are not part of a category.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Components.Internal.TasksQueryService.GetCategorizedQueries(System.Collections.Generic.IEnumerable{EPiServer.Shell.ContentQuery.IContentQuery},System.Collections.Generic.IEnumerable{EPiServer.Shell.ContentQuery.IContentQueryCategory})">
            <summary>
            Filters out the queries that are not part of a category.
            </summary>
            <param name="queries">The queries to filter.</param>
            <param name="queryCategories">The categories to group by.</param>
            <returns>The queries grouped into categories.</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Components.MediaComponent">
            <summary>
            Component that provides a tree/list based navigation for media (files and folders).
            </summary>
            <remarks>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            </remarks>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Components.MediaMainNavigationComponent">
            <summary>
            Component that provides a tree based navigation for media (files and folders).
            </summary>
            <remarks>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            </remarks>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Components.PageTreeComponent">
            <summary>
            Component that provides a tree based navigation for CMS pages.
            </summary>
            <remarks>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            </remarks>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Components.ProjectChangesComponent">
            <remarks>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            </remarks>
        </member>
        <member name="F:EPiServer.Cms.Shell.UI.Components.ProjectChangesComponent.ProjectService">
            <summary>
            Made it internal so it is possible to test the <see cref="!:ProjectModeViewTransformer"/>
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Components.ProjectComponent">
            <summary>
            Component that provides project management functionality.
            </summary>
            <remarks>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            </remarks>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Components.ProjectModeToolbarComponent">
            <remarks>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            </remarks>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Components.RecentItems">
            <summary>
            Component showing recently accessed items.
            </summary>
            <remarks>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            </remarks>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Components.RecentlyChangedComponent">
            <summary>
            Shows recently changed content items on the site.
            </summary>
            <remarks>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            </remarks>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Components.SharedBlocksComponent">
            <remarks>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            </remarks>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Components.SiteTreeComponent">
            <summary>
            A tree component for selecting sites and/or site language.
            </summary>
            <remarks>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            </remarks>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Components.Tasks">
            <summary>
            Component showing things to do for the editor like unpublished content, things to review etc.
            </summary>
            <remarks>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            </remarks>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Components.Tasks.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Components.Tasks"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Components.Tasks.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Shell.ContentQuery.IContentQuery})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Components.Tasks"/> class.
            </summary>
            <param name="queries">The queries.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Components.Tasks.#ctor(EPiServer.Cms.Shell.UI.Components.Internal.TasksQueryService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Components.Tasks"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Components.Tasks.CreateComponent">
            <summary>
            Creates the component.
            </summary>
            <returns>The component</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Components.Toolbar">
            <summary>
            The server side definition for an automatically plugged in toolbar
            </summary>
            <remarks>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            </remarks>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Components.VersionsComponent">
            <summary>
            Component showing available versions of the currently viewed page or block.
            </summary>
            <remarks>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            </remarks>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Components.WidgetSwitcher">
            <remarks>
            This class is intended to be used internally by EPiServer. We do not support any backward compatibility on this.
            </remarks>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.CompositeViews.Internal.HomeView.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.CompositeViews.Internal.HomeView"/> class.
            </summary>
            <param name="localizationService">The localization service used for getting localized resources.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.CompositeViews.Internal.HomeView.RootContainer">
            <summary>
            Gets the root <see cref="T:EPiServer.Shell.ViewComposition.IContainer"/> that contains the different panels for the view.
            </summary>
            <value>The container.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.CompositeViews.Internal.HomeView.Name">
            <summary>
            Gets the name of the view. Used or finding views.
            </summary>
            <value>The name.</value>
        </member>
        <member name="F:EPiServer.Cms.Shell.UI.CompositeViews.Internal.HomeView.ViewName">
            <summary>
            The view name
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.CompositeViews.Internal.HomeView.CreateView">
            <summary>
            Creates a new instance of the view.
            </summary>
            <returns>A new instance of the view.</returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.CompositeViews.Internal.HomeView.Title">
            <summary>
            Gets a localized title for this view.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.CompositeViews.Internal.HomeView.DefaultContext">
            <summary>
            Returns a context reference to the start page, if defined, otherwise a context reference to the root page is returned.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.CompositeViews.Internal.MediaView.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.CompositeViews.Internal.MediaView"/> class.
            </summary>
            <param name="localizationService">The localization service used for getting localized resources.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.CompositeViews.Internal.MediaView.RootContainer">
            <summary>
            Gets the root <see cref="T:EPiServer.Shell.ViewComposition.IContainer"/> that contains the different panels for the view.
            </summary>
            <value>The container.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.CompositeViews.Internal.MediaView.Name">
            <summary>
            Gets the name of the view. Used or finding views.
            </summary>
            <value>The name.</value>
        </member>
        <member name="F:EPiServer.Cms.Shell.UI.CompositeViews.Internal.MediaView.ViewName">
            <summary>
            The view name
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.CompositeViews.Internal.MediaView.CreateView">
            <summary>
            Creates a new instance of the view.
            </summary>
            <returns>A new instance of the view.</returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.CompositeViews.Internal.MediaView.Title">
            <summary>
            Gets a localized title for this view.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiExternalLinksController">
            <summary>
            External links gadget.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiExternalLinksController.#ctor(EPiServer.Cms.Shell.UI.Models.ExternalLinks.ISettingsManager,EPiServer.Cms.Shell.UI.Models.ExternalLinks.ILinksManager)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiExternalLinksController"/> class.
            </summary>
            <param name="settingsManager">The settings manager.</param>
            <param name="linksManager">The links manager.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiExternalLinksController.Index(System.Guid,System.Nullable{System.Int32})">
            <summary>
            Load link list view
            </summary>
            <param name="gadgetID">The gadget ID.</param>
            <param name="pageNumber">Number of page to show</param>
            <returns>View to show</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiExternalLinksController.Configure(System.Guid)">
            <summary>
            Loads configuration view
            </summary>
            <param name="gadgetId">Id of the Gadget</param>
            <returns>View to show</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiExternalLinksController.Configure(System.Guid,EPiServer.Cms.Shell.UI.Models.ExternalLinks.Settings)">
            <summary>
            Lists the form links based on specified parameters
            </summary>
            <returns>View to show</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiExternalLinksController.OnDeleted(System.Guid)">
            <summary>
            Called when gadget is being deleted.
            </summary>
            <param name="gadgetID">The gadget ID.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiNotesController">
            <summary>
            A controller class for the "Notes" gadget.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiNotesController.Index(System.Guid)">
            <summary>
            Creates the default view for the controller.
            </summary>
            <param name="gadgetId">The gadgets id.</param>
            <returns>The controllers default view.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiNotesController.Save(System.String,System.Guid)">
            <summary>
            Saves the text content for the notes note.
            </summary>
            <param name="content">The content.</param>
            <param name="gadgetId">The gadget id.</param>
            <returns>A Json(true) response.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiNotesController.Configure(System.Guid)">
            <summary>
            Loads the settings configuration view.
            </summary>
            <param name="gadgetId">The gadget id.</param>
            <returns>The settings configuration view.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiNotesController.StoreConfiguration(System.Guid,EPiServer.Cms.Shell.UI.Models.NotesData)">
            <summary>
            Stores the configuration settings for the gadget.
            </summary>
            <param name="gadgetId">The gadget id.</param>
            <param name="data">The data.</param>
            <returns>
            The default view loaded with the updated settings.
            </returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiRSSReaderController">
            <summary>
            A simple RSS reader gadget
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiRSSReaderController.#ctor(EPiServer.Data.Dynamic.DynamicDataStoreFactory,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the EPiRSSReaderController class by referencing a DynamicDataStoreFactory and a LocalizationService.
            </summary>
            <param name="storeFactory">The factory used to access the Dynamic Data Store.</param>
            <param name="localizationService">The ResouceLocator used for translation.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiRSSReaderController.Index(System.Guid)">
            <summary>
            The Index action returns an empty view with a "loading feed..." message.
            This is purely a preformance consideration, since we don't want to send a request
            for a remote RSS feed while assembling the dashboard.
            </summary>
            <param name="gadgetId">The gadget id.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiRSSReaderController.Configure(System.Guid)">
            <summary>
            Returns the configuration view for the Gadget.
            </summary>
            <param name="gadgetId">The gadget id.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiRSSReaderController.FeedInfo(System.Guid,System.String)">
            <summary>
            Loads the feed specified in the feed url and returns feed info as a JSON object.
            </summary>
            <param name="gadgetId">The gadget id.</param>
            <param name="feedUrl">The url to the feed.</param>
            <returns>Info about the feed as a JSON object.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiRSSReaderController.StoreConfiguration(System.Guid,EPiServer.Cms.Shell.UI.Models.RssReader.Settings)">
            <summary>
            Stores the configuration sent with an AJAX request from the configuration view.
            </summary>
            <param name="gadgetId">The gadget id.</param>
            <param name="rssSettings">The RSS settings.</param>
            <returns>A JSON response indicating result and an error message if feed validation failed.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiRSSReaderController.TryLoadRssFeed(EPiServer.Cms.Shell.UI.Models.RssReader.Settings,System.String@)">
            <summary>
            Tries the load RSS feed configured in the settings parameter.
            </summary>
            <param name="settings">The RSS settings indicating the feed to load.</param>
            <param name="errorMessage">A localized error message if the loading failed.</param>
            <returns><c>true</c> if the feed was properly loaded; otherwise <c>false</c></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiRSSReaderController.TryLoadRssFeed(EPiServer.Cms.Shell.UI.Models.RssReader.Settings,EPiServer.Cms.Shell.UI.Models.RssReader.ViewModel@,System.String@)">
            <summary>
            Tries the load RSS feed configured in the settings parameter.
            </summary>
            <param name="settings">The RSS settings indicating the feed to load.</param>
            <param name="model">A <see cref="T:EPiServer.Cms.Shell.UI.Models.RssReader.ViewModel"/> initialized with the feed data.</param>
            <param name="errorMessage">A localized error message if the loading failed.</param>
            <returns><c>true</c> if the feed was properly loaded; otherwise <c>false</c></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiRSSReaderController.LoadSettings(System.Guid)">
            <summary>
            Loads the settings for a gadget instance or create new settings with default data if there are no settings.
            </summary>
            <param name="gadgetId">The gadget id.</param>
            <returns>A <see cref="T:EPiServer.Cms.Shell.UI.Models.RssReader.Settings"/> with information about the feed to load.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiRSSReaderController.LoadFeed(EPiServer.Cms.Shell.UI.Models.RssReader.Settings)">
            <summary>
            Validates that the Feed URL is sane and loads the feed.
            </summary>
            <param name="settings">Settings for the feed to load.</param>
            <returns>The loaded feed, and some meta data.</returns>
            <exception cref="T:System.UriFormatException">The feed url is not an absolute valid Uri.</exception>
            <exception cref="T:System.Xml.XmlException">The remote document is not valid XML.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the Url is not a http or https Uri or if Uri but doesn't contain a recognizable feed</exception>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiRSSReaderController.EPiServer#Shell#Gadgets#IGadgetNotify#OnDeleted(System.Guid)">
            <summary>
            Deletes all stored data for the specified gadget id.
            </summary>
            <param name="gadgetId">The gadget id.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiAboutController">
            <summary>
            Provides general information about EPiServer CMS
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.EPiAboutController.License">
            <summary>
            Returns a view showing the CMS license agreement
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Controllers.Internal.FileUploadController">
            <summary>
            Controller for File upload
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.FileUploadController.#ctor(EPiServer.Framework.Localization.LocalizationService,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.Cms.Shell.UI.Rest.IContentChangeManager,EPiServer.Framework.Blobs.IBlobFactory,EPiServer.Core.ContentMediaResolver,EPiServer.Validation.IValidationService,EPiServer.Configuration.Settings,EPiServer.Framework.Web.AspNetAntiForgeryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Controllers.Internal.FileUploadController"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
            <param name="contentTypeRepository">The content type repository.</param>
            <param name="contentChangeManager">The content change manager.</param>
            <param name="blobFactory">The blob factory.</param>
            <param name="contentMediaResolver">The content media resolver.</param>
            <param name="validationService">The validation service</param>
            <param name="settings"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.FileUploadController.#ctor(EPiServer.Framework.Localization.LocalizationService,EPiServer.Cms.Shell.Service.Internal.ContentService,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.Cms.Shell.UI.Rest.IContentChangeManager,EPiServer.Framework.Blobs.IBlobFactory,EPiServer.Core.ContentMediaResolver,EPiServer.Validation.IValidationService,EPiServer.Framework.Web.AspNetAntiForgeryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Controllers.Internal.FileUploadController"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
            <param name="contentService">The content service.</param>
            <param name="contentTypeRepository">The content type repository.</param>
            <param name="contentChangeManager">The content change manager.</param>
            <param name="blobFactory">The blob factory.</param>
            <param name="contentMediaResolver">The content media resolver.</param>
            <param name="validationService">The validation service</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.FileUploadController.Upload(System.String,System.Boolean)">
            <summary>
            Uploads the posted files via Request to the specified directory.
            </summary>
            <param name="uploadDirectory">The upload directory.</param>
            <param name="createAsLocalAsset">Needs to create a local asset folder or not.</param>
            <returns>A <see cref="T:System.Web.Mvc.ActionResult"/> object with information of the results of the action.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.FileUploadController.UploadAssets(System.String,System.Web.HttpFileCollectionBase,System.Boolean)">
            <summary>
            Uploads posted media via Request
            </summary>
            <param name="target">The upload directory or parent content link (in case "createAsLocalAsset" is TRUE).</param>
            <param name="httpPostedFiles">The HTTP posted files to be uploaded.</param>
            <param name="createAsLocalAsset">Needs to create a local asset folder or not.</param>
            <returns>A collection of <see cref="T:EPiServer.Cms.Shell.UI.Controllers.Internal.UploadFileResult"/> objects for successfully uploaded media</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.FileUploadController.AddSuccessfulResult(System.Collections.Generic.List{EPiServer.Cms.Shell.UI.Controllers.Internal.UploadFileResult}@,System.Int32,System.String,EPiServer.Core.ContentReference)">
            <summary>
            Adds the failed result.
            </summary>
            <param name="results">The results.</param>
            <param name="index">The index.</param>
            <param name="fileName">Name of the file.</param>
            <param name="contentLink">The reference of the uploaded asset.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.FileUploadController.AddFailedResult(System.Collections.Generic.List{EPiServer.Cms.Shell.UI.Controllers.Internal.UploadFileResult}@,System.Int32,System.String,System.String)">
            <summary>
            Adds the failed result.
            </summary>
            <param name="results">The results.</param>
            <param name="index">The index.</param>
            <param name="fileName">Name of the file.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Controllers.Internal.UploadFileResult">
            <summary>
            Class that store the information for an uploaded file
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Controllers.Internal.GeographicLocationController">
            <summary>
            Geographic Location controller.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.GeographicLocationController.#ctor(EPiServer.Framework.Localization.LocalizationService,EPiServer.Personalization.IGeolocationProvider,EPiServer.Personalization.IClientGeolocationResolver)">
            <summary>
            Initializes an instance of <see cref="T:EPiServer.Cms.Shell.UI.Controllers.Internal.GeographicLocationController"/>.
            </summary>
            <param name="localizationService">The LocalizationService used for translation.</param>
            <param name="geoProvider">The GeolocationProvider used to get localization codes</param>
            <param name="clientGeolocationResolver">Used to get available capabilities</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.GeographicLocationController.GetLocations(System.String,System.String)">
            <summary>
            Called by the client side criteria script to load the contents of the continent/country/region drop downs.
            </summary>
            <param name="continentCode">The ISO 3166 continent code. If <c>null</c>, this method returns a list of continents.</param>
            <param name="countryCode">The ISO 3166 country code. If <c>null</c> and <paramref name="continentCode"/> specifies a valid continent code, this method returns a list of countries in that continent.</param>
            <returns>A Json formatted result, suitable to be fed to a Dojo ItemFileReadStore.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.GeographicLocationController.GetAvailableCapabilities">
            <summary>
            Called by the client side criteria script to check available geographic capabilities
            </summary>
            <returns>A Json formatted result</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Controllers.Internal.JsonErrorHandlingAttribute">
            <summary>
            An action filter that sends a json result with error flags rather than responding with 500 server error after unhnadled exceptions.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.JsonErrorHandlingAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            Does nothing.
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.JsonErrorHandlingAttribute.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            Adds a json result containing error information rather than sending server error.
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Controllers.Internal.LinksController">
            <summary>
            Internal links controller to help resolving permanent links
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.LinksController.GetPermanentLink(System.String)">
            <summary>
            Get the permanent link for the given url, if it can't resolve a permanent link it returns the input
            </summary>
            <param name="href"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Controllers.Internal.PropertyRenderController">
            <summary>
            Controller used to render single property values.
            Will do so by calling DisplayFor for the supplied property.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.PropertyRenderController.#ctor(EPiServer.IContentRepository,EPiServer.Framework.Serialization.IObjectSerializerFactory,EPiServer.DataAbstraction.IPropertyDefinitionRepository,EPiServer.Web.TemplateResolver,EPiServer.Globalization.IUpdateCurrentLanguage,System.Web.Mvc.ViewEngineCollection,EPiServer.Framework.Web.AspNetAntiForgeryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Controllers.Internal.PropertyRenderController"/> class.
            </summary>
            <param name="contentRepository">The content repository.</param>
            <param name="objectSerializerFactory">The object serializer factory.</param>
            <param name="propertyDefinitionRepository">The property definition repository.</param>
            <param name="templateResolver">The template resolver.</param>
            <param name="updateCurrentLanguage">Helper for setting the current language.</param>
            <param name="viewEngineCollection"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.PropertyRenderController.ContentRequiresReload(System.String)">
            <summary>
            Checks whether a full page reload is required to update the content.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Controllers.Internal.ThumbnailController">
            <summary>
            Controller that generates bigger thumbnails that are presented in Edit Mode
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.ThumbnailController.#ctor(EPiServer.IContentRepository,EPiServer.Core.Internal.ThumbnailManager,EPiServer.Web.IMimeTypeResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Controllers.Internal.ThumbnailController"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.ThumbnailController.Generate(EPiServer.Core.ContentReference)">
            <summary>
            Get a big thumbnail for a given content reference
            </summary>
            <param name="contentLink">Content reference of the file to generate the thumbnail for</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Controllers.Internal.UserProfileController">
            <summary>
            Controller used by the user profile criterion to render it's edit ui.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.UserProfileController.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the UserProfileController class.
            </summary>
            <param name="localizationService">The LocalizationService used for translations.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.UserProfileController.Edit(System.String,System.String,System.String)">
            <summary>
            Get the edit view for a user profile criterion
            </summary>
            <param name="namingContainer">The naming container.</param>
            <param name="profileKey">The profile key.</param>
            <param name="matchType">How to perform the match.</param>
            <returns>The (partial) edit view</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.UserProfileController.NameToTypeMap">
            <summary>
            Gets the name to type map.
            </summary>
            <returns>A json object containing the map</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.UserProfileController.GetProfileOptions(System.String)">
            <summary>
            Generates the options for selecting profile key.
            </summary>
            <param name="profileKey">The profile key, used to set the selected option.</param>
            <returns>A list of SelectListItem:s</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.UserProfileController.GetMatchOptions(System.String)">
            <summary>
            Genereates the options for selecting the type of match
            </summary>
            <param name="matchType">Type of match, used to set the selected option.</param>
            <returns>A list of SelectListItem:s</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Controllers.Internal.VisitedCategoriesController">
            <summary>
            Controller used by the visited categories criterion.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.VisitedCategoriesController.GetNumberOfPagesUsingCategory(System.Nullable{System.Int32})">
            <summary>
            Gets the number of pages using a category.
            </summary>
            <param name="categoryId">The category id.</param>
            <returns>A json object containing the number of pages using the specified category.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.VisitorGroupMembershipController.GetIncludableVisitorGroups(System.Nullable{System.Guid})">
            <summary>
            Gets visitor groups that can be included (ie, that do not create a circular reference)
            </summary>
            <param name="visitorGroupId">Id of visitor group to get list of includable visitor groups for</param>
            <returns>List of visitor groups that would not cause a circular reference</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Controllers.Internal.VisitorGroupsController">
            <summary>
            Visitor group controller.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.VisitorGroupsController.Index">
            <summary>
            Handles the default case, when the user clicks on the visitor group option in the menu.
            Will create an "empty" view data.
            </summary>
            <returns>The index view</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.VisitorGroupsController.GetCriteriaByCategory">
            <summary>
            Handles the default case, when the user clicks on the visitor group option in the menu.
            Will create an "empty" view data.
            </summary>
            <param name="paging">The paging.</param>
            <returns>A json object containing all the criteria definitions sorted by category.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.VisitorGroupsController.Delete(System.Guid)">
            <summary>
            Deletes the specified group name.
            </summary>
            <param name="groupId">The group id.</param>
            <returns>The index view</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.VisitorGroupsController.DeleteStatistics(System.Guid)">
            <summary>
            Deletes the specified group name.
            </summary>
            <param name="groupId">The group id.</param>
            <returns>The index view</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.VisitorGroupsController.Copy(System.Guid)">
            <summary>
            Copies the specified group name.
            </summary>
            <param name="groupId">The group id.</param>
            <returns>The index view</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.VisitorGroupsController.Edit(System.Nullable{System.Guid})">
            <summary>
            Handles the edit case, when the user clicks the add or edit buttons in the group listing view.
            </summary>
            <param name="groupId">The group id.</param>
            <returns>The edit view</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.VisitorGroupsController.CriteriaModelDefinition(System.String)">
            <summary>
            Get criteria's model definition.
            </summary>
            <param name="typeName">Criteria type name.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.VisitorGroupsController.CriteriaUI(System.String)">
            <summary>
            Get Criteria's setting UI.
            </summary>
            <param name="typeName">Criteria type name.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.VisitorGroupsController.Translate(System.String)">
            <summary>
            Translates all the provided keys.
            </summary>
            <param name="key">The key list.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.VisitorGroupsController.Create">
            <summary>
            Handles the add case, when the user clicks the add buttons in the group listing view.
            </summary>
            <returns>The edit view</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.VisitorGroupsController.SaveVisitorGroup(EPiServer.Personalization.VisitorGroups.VisitorGroup)">
            <summary>
            Saves the visitor group.
            </summary>
            <param name="visitorGroup">visitor group instance.</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Internal.VisitorGroupsController.GetVisitorGroup(System.Guid)">
            <summary>
            Gets the visitor group.
            </summary>
            <param name="visitorGroupId">The visitor group id.</param>
            <returns>A json object containing one visitor group</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Controllers.Internal.VisitorGroupsController.CustomJsonResult">
            <summary>
            Custom JsonResult that serialized datetime in ISO instead of EPOCH
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Preview.Internal.ImageEditController.#ctor">
            <summary>
            REMARK: We need the parameterless ctor because it is created using Activator.CreateInstance(...)
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Controllers.Preview.Internal.MediaEditController`1">
            <summary>
            An abstract controller for editing media content. Creates the base HTML response and uses the 
            preview content that is generated in extending classes as the content of the body.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Preview.Internal.MediaEditController`1.GetPreviewContent(`0)">
            <summary>
            Gets the HTML that will be used to display the preview of this media content.
            </summary>
            <param name="content">The current content</param>
            <returns>An HTML string for the preview.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Preview.Internal.MediaPreviewHandlerBase.GetBlob(System.Web.HttpContextBase)">
            <summary>
            Gets the routed BLOB from the request.
            </summary>
            <remarks>
            The implementation returns IContentMedia.BinaryData.
            </remarks>
            <param name="httpContext">The HTTP context.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Preview.Internal.VideoEditController.#ctor">
            <summary>
            REMARK: We need the parameterless ctor because it is created using Activator.CreateInstance(...)
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Controllers.Reports.Internal.EPiBrokenLinksController">
            <summary>
            A report showing broken links as reported by the broken links scheduled job.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Reports.Internal.EPiBrokenLinksController.#ctor(EPiServer.IContentRepository,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.Framework.Localization.LocalizationService,EPiServer.Web.IPermanentLinkMapper,EPiServer.DataAbstraction.IContentSoftLinkRepository,EPiServer.DataAbstraction.IContentSoftLinkStatusService,EPiServer.LinkAnalyzer.IContentLinkValidatorFactory)">
            <summary>
            Initializes a new instance of the EPiBrokenLinksController class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Reports.Internal.EPiBrokenLinksController.Index(EPiServer.Shell.Web.Mvc.Html.Pager,System.Nullable{System.Int32},System.String)">
            <summary>
            Handles the default case, when the user clicks on the report in the menu.
            Will create an "empty" view data.
            </summary>
            <param name="paging">The paging.</param>
            <param name="rootPageId">The root page id.</param>
            <param name="rootPageName">Name of the root page.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Controllers.Reports.Internal.EPiBrokenLinksController.GetRunningJobs">
            <summary>
            Get a list of running jobs that the user has started
            </summary>
            <returns>a Json results containing all running jobs</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.GroupedMetaDataPropertyInfo">
            <summary>
            Contains information about a grouped meta data property.
            </summary>
            <remarks>
            Implementations of this class can group properties of an meta data interface to another value. For example, map two properties to a BlockData.
            </remarks>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.GroupedMetaDataPropertyInfo.DeclaringType">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.GroupedMetaDataPropertyInfo.PropertyName">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.GroupedMetaDataPropertyInfo.PropertyType">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.GroupedMetaDataPropertyInfo.PropertyBackingType">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.GroupedMetaDataPropertyInfo.GetValue">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.GroupedMetaDataPropertyInfo.SetValue">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Models.BrokenLinks.LinkingPageViewData">
            <summary>
            Represents a page with broken links.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.BrokenLinks.LinkingPageViewData.PageName">
            <summary>
            The page's name.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.BrokenLinks.LinkingPageViewData.EditUrl">
            <summary>
            The url to editing the page.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.BrokenLinks.LinkingPageViewData.ToolTip">
            <summary>
            More information about the page.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.BrokenLinks.LinkingPageViewData.PageLink">
            <summary>
            The page link.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.BrokenLinks.LinkingPageViewData.Language">
            <summary>
            Content Language
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.BrokenLinks.LinkingPageViewData.BrokenLinks">
            <summary>
            Broken links on the page
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Models.BrokenLinks.LinkViewData">
            <summary>
            A link that is broken.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.BrokenLinks.LinkViewData.BrokenSince">
            <summary>
            The first date the broken link was detected.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.BrokenLinks.LinkViewData.LastChecked">
            <summary>
            The last date the link was checked.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.BrokenLinks.LinkViewData.ReferredUrl">
            <summary>
            The url the broken link is referring to.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.BrokenLinks.LinkViewData.StatusText">
            <summary>
            A text representation of the status of the link, e.g. 404, dns resolution failure, etc.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Models.ExternalLinks.ILinksManager">
            <summary>
            Manager class for the gadget
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.ExternalLinks.ILinksManager.GetIndexViewData(EPiServer.Cms.Shell.UI.Models.ExternalLinks.Settings,System.Security.Principal.IPrincipal)">
            <summary>
            Gets index view data for given settings
            </summary>
            <param name="settings">Settings to retreive data</param>
            <param name="user">The user to filter page access for.</param>
            <returns>Data to show on the index view</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Models.ExternalLinks.IndexViewData">
            <summary>
            Data to show on the index view
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.IndexViewData.PageSize">
            <summary>
            Number of the current page
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.IndexViewData.PageNumber">
            <summary>
            Number of the current page
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.IndexViewData.Count">
            <summary>
            Total number of the items
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.IndexViewData.ShowDetails">
            <summary>
            Shoq gadget in details mode
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.IndexViewData.CommonItems">
            <summary>
            Links to show in common mode
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.IndexViewData.DetailsItems">
            <summary>
            Links to show in details mode
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Models.ExternalLinks.LinkCommonData">
            <summary>
            Data to show in common mode
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.LinkCommonData.Host">
            <summary>
            Host name
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.LinkCommonData.Url">
            <summary>
            Host url
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.LinkCommonData.Hits">
            <summary>
            Number of links on the host
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Models.ExternalLinks.LinkDetailsData">
            <summary>
            Link data in details mode
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.LinkDetailsData.Url">
            <summary>
            Link url
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.LinkDetailsData.ContentName">
            <summary>
            CMS content name
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.LinkDetailsData.ContentLink">
            <summary>
            CMS content link
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Models.ExternalLinks.LinksManager">
            <summary>
            Manager class for the gadget
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.ExternalLinks.LinksManager.#ctor(EPiServer.IContentRepository,EPiServer.DataAccess.Internal.ContentSoftLinkDB)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Models.ExternalLinks.LinksManager"/> class.
            </summary>
            <param name="contentRepository">The <see cref="T:EPiServer.IContentRepository"/> instance that should be used by the current instance.</param>
            <param name="softLinkLoader">The soft link loader that should be used by the current instance.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.ExternalLinks.LinksManager.#ctor(EPiServer.IContentLoader,EPiServer.DataAbstraction.IContentSoftLinkRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Models.ExternalLinks.LinksManager"/> class.
            </summary>
            <param name="contentLoader">The <see cref="T:EPiServer.IContentLoader"/> instance that should be used by the current instance.</param>
            <param name="softLinkRepository">The soft link loader that should be used by the current instance.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.ExternalLinks.LinksManager.GetIndexViewData(EPiServer.Cms.Shell.UI.Models.ExternalLinks.Settings,System.Security.Principal.IPrincipal)">
            <summary>
            Gets index view data for given settings
            </summary>
            <param name="settings">Settings to retreive data</param>
            <param name="user">The user to filter content access for.</param>
            <returns>
            Data to show on the index view
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.ExternalLinks.LinksManager.GetContent(EPiServer.Core.ContentReference)">
            <summary>
            Get page data for reference
            </summary>
            <param name="reference">Content Reference to get data</param>
            <returns>Retreived page date or dummy one</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.ExternalLinks.LinksManager.GetDetailsList(System.Collections.Generic.IEnumerable{EPiServer.Cms.Shell.UI.Models.ExternalLinks.UrlContentReferencePair},System.Int32,System.Int32)">
            <summary>
            Get list of items for details mode
            </summary>
            <param name="source">Source list of content links</param>
            <param name="pageNumber">Number of page</param>
            <param name="pageSize">Size of page</param>
            <returns>List of page links items</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.ExternalLinks.LinksManager.GetCommonList(System.Collections.Generic.IEnumerable{EPiServer.Cms.Shell.UI.Models.ExternalLinks.UrlContentReferencePair},System.Int32,System.Int32)">
            <summary>
            Get list of items for common mode
            </summary>
            <param name="source">Source list of content links</param>
            <param name="pageNumber">Number of page</param>
            <param name="pageSize">Size of page</param>
            <returns>List of page links items</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.ExternalLinks.LinksManager.GetContent``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Get one page data
            </summary>
            <typeparam name="T">Type of data</typeparam>
            <param name="source">Data source list</param>
            <param name="pageNumber">Page number</param>
            <param name="pageSize">Page size</param>
            <returns>Data list for given source and page</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.ExternalLinks.LinksManager.GetLinks(System.Security.Principal.IPrincipal)">
            <summary>
            Retreives external links from DB
            </summary>
            <returns>List of external links</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Models.ExternalLinks.Paging">
            <summary>
            Class for paging control
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.Paging.PageNumber">
            <summary>
            Current page number
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.Paging.PageSize">
            <summary>
            Size of the page
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.Paging.TotalItemsCount">
            <summary>
            Total items to show
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.Paging.PagerSize">
            <summary>
            Number of page around current to show as links
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.Paging.MinIndexOfItem">
            <summary>
            Minimal index of show item
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.Paging.MaxIndexOfItem">
            <summary>
            Maximal index of show item
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.Paging.TotalPagesCount">
            <summary>
            Total number of pages
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.Paging.Pages">
            <summary>
            List of page indexes to show
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.ExternalLinks.Paging.GetFromIndexViewData(EPiServer.Cms.Shell.UI.Models.ExternalLinks.IndexViewData)">
            <summary>
            Creates paging object from the given index view data
            </summary>
            <param name="data">Source</param>
            <returns>New paging object</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Models.ExternalLinks.Settings">
            <summary>
            Data transfer object which maintains settings fo NotRecentlyChangedPages gadget
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.Settings.GadgetId">
            <summary>
            Gadget ID
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.Settings.ShowDetails">
            <summary>
            Use details mode
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.Settings.PageSize">
            <summary>
            Number of items on the page
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.Settings.PageNumber">
            <summary>
            Current page number (is not stored in DB)
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.Settings.Id">
            <summary>
            ID of settings object
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Models.ExternalLinks.SettingsManager">
            <summary>
            Class for common management of gadget settings
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.ExternalLinks.SettingsManager.#ctor(EPiServer.Data.Dynamic.DynamicDataStoreFactory,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Models.ExternalLinks.SettingsManager"/> class.
            </summary>
            <param name="storeFactory">The store factory.</param>
            <param name="localizationService">The LocalizationService used for translation.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.SettingsManager.Storage">
            <summary>
            Storage for setttings
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.ExternalLinks.SettingsManager.GetDefault(System.Guid)">
            <summary>
            Get settings with default values
            </summary>
            <param name="gadgetId">ID of the gadget</param>
            <returns>Defualt settings for the gadget</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.ExternalLinks.SettingsManager.GetError(System.String)">
            <summary>
            Get error message for property
            </summary>
            <param name="name">Property name</param>
            <returns>Error message</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.ExternalLinks.SettingsManager.Load(System.Guid)">
            <summary>
            Load settings by gadget ID
            </summary>
            <param name="gadgetId">ID of the gadget</param>
            <returns>Settings for the gadget or default ones</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.ExternalLinks.SettingsManager.Save(EPiServer.Cms.Shell.UI.Models.ExternalLinks.Settings)">
            <summary>
            Save settings for the gadget
            </summary>
            <param name="settings">Settings to save</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.ExternalLinks.SettingsManager.IsValid(EPiServer.Cms.Shell.UI.Models.ExternalLinks.Settings,System.Collections.Generic.IEnumerable{EPiServer.Cms.Shell.UI.Models.ValidationError}@)">
            <summary>
            Validates settings before save
            </summary>
            <param name="settings">Settings object to validate</param>
            <param name="errors">List of errors</param>
            <returns>If validation was successfull</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.ExternalLinks.SettingsManager.Delete(System.Guid)">
            <summary>
            Delete settings for the gadget
            </summary>
            <param name="gadgetId">ID of the gadget</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Models.ExternalLinks.UrlContentReferencePair">
            <summary>
            Contains a references between a url and a content.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.ExternalLinks.UrlContentReferencePair.#ctor(EPiServer.Url,EPiServer.Core.ContentReference)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Models.ExternalLinks.UrlContentReferencePair"/> class.
            </summary>
            <param name="url">The URL to the external resource.</param>
            <param name="contentReference">A reference to the content.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.UrlContentReferencePair.Url">
            <summary>
            Gets or sets the URL.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ExternalLinks.UrlContentReferencePair.ContentReference">
            <summary>
            Gets or sets the content reference.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Models.ExternalLinks.ISettingsManager">
            <summary>
            Interface for settings mananger
            </summary>    
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.ExternalLinks.ISettingsManager.Load(System.Guid)">
            <summary>
            Load settings by gadget ID
            </summary>
            <param name="gadgetId">ID of the gadget</param>
            <returns>Settings for the gadget or default ones (to set default property value use DefaultValue attrivute)</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.ExternalLinks.ISettingsManager.Save(EPiServer.Cms.Shell.UI.Models.ExternalLinks.Settings)">
            <summary>
            Save settings for the gadget
            </summary>
            <param name="settings">Settings to save</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.ExternalLinks.ISettingsManager.IsValid(EPiServer.Cms.Shell.UI.Models.ExternalLinks.Settings,System.Collections.Generic.IEnumerable{EPiServer.Cms.Shell.UI.Models.ValidationError}@)">
            <summary>
            Validates settings before save
            </summary>
            <param name="settings">Settings object to validate</param>
            <param name="errors">List of errors</param>
            <returns>If validation was successfull</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.ExternalLinks.ISettingsManager.Delete(System.Guid)">
            <summary>
            Delete settings for the gadget
            </summary>
            <param name="gadgetId">ID of the gadget</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Models.DisplayResolutionViewModel">
            <summary>
            Display Resolution view model
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.DisplayResolutionViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Models.DisplayResolutionViewModel"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.DisplayResolutionViewModel.#ctor(EPiServer.Web.IDisplayResolution)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Models.DisplayResolutionViewModel"/> class.
            </summary>
            <param name="displayResolution">The display resolution.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.DisplayResolutionViewModel.Name">
            <summary>
            Gets the name of resolution.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.DisplayResolutionViewModel.Width">
            <summary>
            Gets the resolution width in pixels.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.DisplayResolutionViewModel.Height">
            <summary>
            Gets the resolution height in pixels.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Models.NotesData">
            <summary>
            Class that is used to store data and settings for a notes gadget.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.NotesData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Models.NotesData"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.NotesData.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Models.NotesData"/> class.
            </summary>
            <param name="localizationService">The LocalizationService used for translation.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.NotesData.GadgetId">
            <summary>
            Gets or sets the gadget id.
            </summary>
            <value>The gadget id.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.NotesData.FontSize">
            <summary>
            Gets or sets the size of the text.
            </summary>
            <value>The size of the text.</value>
            <remarks>The default value is 100%.</remarks>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.NotesData.Content">
            <summary>
            Gets or sets the notes text content.
            </summary>
            <value>The content of the notes note.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.NotesData.Title">
            <summary>
            Gets or sets the title of the gadget.
            </summary>
            <value>The title of the gadget.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.NotesData.TestSizeOptions">
            <summary>
            Gets a List with the test size options.
            </summary>
            <value>The test size options.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.NotesData.BackgroundColor">
            <summary>
            Gets or sets the background color of the gadget.
            </summary>
            <value>The background color of the gadget.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.NotesData.BackgroundColorOptions">
            <summary>
            Gets a List with the background color options.
            </summary>
            <value>The background color options.</value>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Models.ValidationError">
            <summary>
            Validation error class
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ValidationError.PropertyName">
            <summary>
            Gets or sets the name of the property which contains invalid value.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.ValidationError.ErrorMessage">
            <summary>
            Gets or sets the error message for this property.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Models.RssReader.Settings">
            <summary>
            A class for storing feed settings for the RSS gadget. 
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.RssReader.Settings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Models.RssReader.Settings"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.RssReader.Settings.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Models.RssReader.Settings"/> class.
            </summary>
            <param name="gadgetId">The gadget id.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.RssReader.Settings.GadgetId">
            <summary>
            The id of the gadget this settings object is providing settings for.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.RssReader.Settings.FeedUrl">
            <summary>
            Gets or sets the rul for the feed.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.RssReader.Settings.FeedItemsToShow">
            <summary>
            Gets or sets the number of items from the feed to show in the gadget.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.RssReader.Settings.Title">
            <summary>
            Gets or sets a custom feed title.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.RssReader.Settings.Id">
            <summary>
            Gets or sets the identity for dynamic data store.
            </summary>
            <value>The identity.</value>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Models.RssReader.ViewModel">
            <summary>
            Represents the model data sent to the RSS Reader feed display view 
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.RssReader.ViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Models.RssReader.ViewModel"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Models.RssReader.ViewModel.#ctor(System.String,System.Int32,System.ServiceModel.Syndication.SyndicationFeed)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Models.RssReader.ViewModel"/> class.
            </summary>
            <param name="title">The title of the feed.</param>
            <param name="maxCount">The maximum number of items to show.</param>
            <param name="feed">The feed data.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.RssReader.ViewModel.Title">
            <summary>
            Returns the feed title.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.RssReader.ViewModel.Items">
            <summary>
            Returns the feed items sorted by date.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.RssReader.ViewModel.MaxCount">
            <summary>
            Gets or sets the maximum number of feed items to show.
            </summary>
            <value>The max count.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Models.RssReader.ViewModel.Feed">
            <summary>
            Gets the feed that has been loaded by .
            </summary>
            <value>The feed.</value>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.EllipsisExtensions.Ellipsis(System.String,System.Int32)">
            <summary>
            Extracts mentions from the message and returns a truncated with the length of found mentiona taken into account.
            </summary>
            <param name="message">The message to truncate</param>
            <param name="maxLength">The maximum allowed expanded length</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.EllipsisExtensions.Ellipsis(System.String,System.Int32,System.Char)">
            <summary>
            Extracts mentions from the message and returns a truncated with the length of found mentiona taken into account.
            </summary>
            <param name="message">The message to truncate</param>
            <param name="maxLength">The maximum allowed expanded length</param>
            <param name="ellipsisCharacter">The character to use for ellipsis</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.EllipsisExtensions.CalculateMaxLength(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Calculates a new maxLength based on when string will be used with <see cref="M:System.String.Format(System.String,System.Object[])"/>
            </summary>
            <param name="subject">The replacement subject</param>
            <param name="replacements">The replacements array</param>
            <param name="maxLength">The maximum length allowed for a string with replacements made</param>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Email.Internal.EmailViewModel.Subject">
            <summary>
            The subject of the e-mail
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Email.Internal.EmailViewModel.Header">
            <summary>
            The header of the e-mail
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Email.Internal.EmailViewModel.Disclaimer">
            <summary>
            Disclaimer text
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Email.Internal.EmailViewModel.Projects">
            <summary>
            The projects that are displayed in the e-mail
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Email.Internal.EmailViewModel.Approvals">
            <summary>
            The list of approvals grouped by content
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Notifications.Email.Internal.HtmlEmailFormatterBase">
            <summary>
            This formatter prepares one or more notification messages for sending in one single
            e-mail notification.
            
            Remark: Should be used as a singleton. I.e. when inheriting this class set a
                    ServiceInstanceScope.Singleton on the ServiceConfiguration attribute.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.Email.Internal.HtmlEmailFormatterBase.GetTemplate">
            <summary>
            Loads the template.
            </summary>
            <returns>Template</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Notifications.Feature.FeatureNotificationJob">
            <summary>
            Fetching feeds and push notifications to subscribers.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Notifications.Feature.HttpClientWrapper">
            <summary>
             This class is a wrapper for httpclient. It is useful for UnitTest
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.Feature.HttpClientWrapper.GetStreamAsync(System.Uri)">
            <summary>
            Get response stream from source
            </summary>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.FeatureNotificationFormatter">
            <summary>
            Format the feature notification before showing it to user in the UI.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.FeatureNotificationFormatter.SupportedChannelNames">
            <summary>
            Gets the list of channels supported by this formatter
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.FeatureNotificationFormatter.FormatUserMessageAsync(EPiServer.Notification.UserNotificationMessage)">
            <summary>
            Formats the UserNotificationMessage 
            </summary>
            <param name="message">An instance of UserNotificationMessage</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.FeatureNotificationService">
            <summary>
            Service class for handling subscription and pushing the feature notifications for subscribers.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.FeatureNotificationService.SubscribeAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.FeatureNotificationService.PushAsync(System.Collections.Generic.IEnumerable{EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.FeedModel})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.FeatureNotificationService.ReadUserThroughCache(EPiServer.Framework.Cache.ReadStrategy)">
            <summary>
            Common function to get list users from cache.
            </summary>
            <param name="readStrategy"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.FeatureNotificationService.PushToSubscribers(System.Collections.Generic.IEnumerable{EPiServer.Notification.INotificationUser},EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.FeedModel)">
            <summary>
            Push a feed to subscribers.
            </summary>
            <param name="feed">the feed to push</param>
            <param name="subscribers">subscribers</param>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.FeedModel.Link">
            <summary>
            The link to details of the feed.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.FeedModel.Title">
            <summary>
            The title of the feed.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.FeedModel.Body">
            <summary>
            The content of the feed.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.FeedModel.PublishDate">
            <summary>
            The publish date of the feed.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.IFeatureNotificationService">
            <summary>
            Interface for defining main method for FeatureNotificationService.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.IFeatureNotificationService.SubscribeAsync(System.String)">
            <summary>
            Subscribe for receiving the feature notifications.
            </summary>
            <param name="userName">the username of user.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.IFeatureNotificationService.PushAsync(System.Collections.Generic.IEnumerable{EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.FeedModel})">
            <summary>
            Push feeds to subscribers.
            </summary>
            <param name="feeds">A list of feeds to push</param>
            <returns>The number of feeds succesfully sent to subscribers</returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.LastUpdatedFeed.Id">
            <summary>
            ID of the object generated by dds.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Feature.Internal.LastUpdatedFeed.PublishDate">
            <summary>
            The publish date of the feed.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Notifications.Feature.RssDataFetcher">
            <summary>
            Data fetcher for rss feeds
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.Feature.RssDataFetcher.GetStream">
            <summary>
            Get a stream from a source
            </summary>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Internal.NotificationEventViewModel.Id">
            <summary>
            Id of the notification message
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Internal.NotificationEventViewModel.Action">
            <summary>
            Why the notification has been created
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Notifications.Internal.NotificationUserService">
            <summary>
            Service for querying notification users when working with notifications.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.Internal.NotificationUserService.FindAsync(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Find users and roles based on part of a username.
            </summary>
            <param name="searchQuery">Part or whole username</param>
            <param name="includeRoles">Includes both roles and users if true, only users otherwise</param>
            <param name="pageIndex">The index of the page of results to return. pageIndex is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <returns>A list of <see cref="T:EPiServer.Cms.Shell.UI.Notifications.Internal.UserAndRoleSearchModel"/> found</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.Internal.NotificationUserService.GetRoleInfo(System.String)">
            <summary>
            Get role information with max 10 users in case the reviewer is a Role.
            </summary>
            <param name="roleName">The name of the role</param>
            <returns>A <see cref="T:EPiServer.Cms.Shell.UI.Notifications.Internal.RoleInfoModel"/> with usernames for max <see cref="F:EPiServer.Cms.Shell.UI.Notifications.Internal.NotificationUserService.FirstUserNamesCount"/> users and the total user count for the role</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.Internal.NotificationUserService.GetAsync(System.String)">
            <summary>
            Get a user from a username.
            </summary>
            <param name="username">The name of the user</param>
            <returns>A <see cref="T:EPiServer.Cms.Shell.UI.Notifications.NotificationUserModel"/> representing the user with <paramref name="username"/></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.Internal.NotificationUserService.GetDisplayName(System.String)">
            <summary>
            Gets the display name for the user matching the supplied username. If the user is not found
            or there is no display name cofigured then the username will be returned.
            </summary>
            <param name="username">Username of the user to get display name for</param>
            <returns>A string containing the display name for a matching user if found; otherwise username</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Notifications.Internal.NotificationUserStore">
            <summary>
            A REST store for querying notification user objects.
            </summary>
        </member>
        <member name="F:EPiServer.Cms.Shell.UI.Notifications.Internal.NotificationUserStore.MaxResults">
            <summary>
            The maximum number of notification user that should be returned by queries.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.Internal.NotificationUserStore.Get(System.String,System.String,System.Nullable{System.Boolean},EPiServer.Shell.Services.Rest.ItemRange,System.Boolean)">
            <summary>
            Gets a single notification user object based on the user name, or gets a collection of users
            that match the given query string.
            </summary>
            <param name="id">The username to query for.</param>
            <param name="name">A string fragment to match to notification users</param>
            <param name="includeRoles">If you want to bring Roles matching the search pattern. By default is false.</param>
            <param name="range">The range HTTP header on the incoming request.</param>
            <param name="exactMatch">True if the query looks for an exact match. By default is false.</param>
            <returns>A rest result containing the notification user, or a 404 if the user is not found.</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Notifications.Internal.RoleInfoModel">
            <summary>
            Represents the additional information for the Reviewer type Role
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Internal.RoleInfoModel.TotalNumberOfUsers">
            <summary>
            Gets or sets the total number of users present in the group
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Internal.RoleInfoModel.UserNames">
            <summary>
            Gets the first 10 user names present in the group.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Internal.RoleInfoModel.NumberOfRoleUsersExceededMax">
            <summary>
            True when TotalNumberOfUsers exceeded ApprovalMaxRoleUsers
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Internal.RoleInfoModel.DisplayNameUsersLimit">
            <summary>
            Number of users that will receive notifications
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Internal.UserAndRoleSearchModel.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Internal.UserAndRoleSearchModel.EmailAddress">
            <summary>
            Gets or sets the e-mail address.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Internal.UserAndRoleSearchModel.Name">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Internal.UserAndRoleSearchModel.ReviewerType">
            <summary>
            Gets the type of search entity (i.e user or role)
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.Internal.UserAndRoleSearchModel.RoleInfo">
            <summary>
            Gets the role information in case the reviewer type is Role
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.NotificationUserModel.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.NotificationUserModel.EmailAddress">
            <summary>
            Gets or sets the e-mail address.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.NotificationUserModel.UserName">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Notifications.UserNotifications.Internal.FormattedUserNotificationMessage">
            <summary>
            Represents a notification message which is formatted through UserNotificationFormatterBase
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.UserNotifications.Internal.FormattedUserNotificationMessage.IconKey">
            <summary>
            Gets or sets the icon key which is either for the Project or for Content's typeIdentifier
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.UserNotifications.Internal.FormattedUserNotificationMessage.ContentLanguage">
            <summary>
            Gets or sets the Content language if the message posted on an ILocalizable
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Notifications.UserNotifications.Internal.FormattedUserNotificationMessage.IsExternal">
            <summary>
            Gets or sets a value indicating whether the link of a notification is external link
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Notifications.UserNotifications.Internal.UserNotificationFormatterBase">
            <summary>
            Formats the UserNotificationMessage to FormattedUserNotificationMessage.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.UserNotifications.Internal.UserNotificationFormatterBase.CreateBasicFormattedUserNotificationMessage(EPiServer.Notification.UserNotificationMessage)">
            <summary>
            Creates a basic FormattedUserNotificationMessage
            </summary>
            <param name="message">An instance of UserNotificationMessage</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.UserNotifications.Internal.UserNotificationFormatterBase.GetIconKey(EPiServer.Core.IContent)">
            <summary>
            Returns either the identifier based on content. Can be overridden to use specific icons.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.UserNotifications.Internal.UserNotificationFormatterBase.GetFormatedUsername(EPiServer.Notification.INotificationUser,System.Globalization.CultureInfo)">
            <summary>
            Gets the formatted user DisplayName or username for given INotificationUser
            </summary>
            <param name="user">An instance of INotificationUser</param>
            <param name="cultureInfo">A requested CultureInfo</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.UserNotifications.Internal.UserNotificationFormatterBase.CreateContentIconNode(EPiServer.Cms.Shell.UI.Rest.Models.Internal.ExtendedVersionStatus)">
            <summary>
            Creates the content status icon node
            </summary>
            <param name="contentStatus"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Notifications.UserNotifications.Internal.UserNotificationFormatterBase.CreateCommentNode(System.String)">
            <summary>
            Creates the comment node with quotes around the text
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.AppSettingsCheckboxListEditorDescriptor">
            <summary>
            Specifies a selection factory and client editing class for properties of type <see cref="T:EPiServer.SpecializedProperties.PropertyAppSettingsMultiple"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.AppSettingsCheckboxListEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.AppSettingsCheckboxListEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.AppSettingsDropDownListEditorDescriptor">
            <summary>
            Specifies a selection factory and client editing class for properties of type <see cref="T:EPiServer.SpecializedProperties.PropertyAppSettings"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.AppSettingsDropDownListEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.AppSettingsDropDownListEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.AssetsRepositoryDescriptor.Key">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.AssetsRepositoryDescriptor.Name">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.AssetsRepositoryDescriptor.Roots">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.AssetsRepositoryDescriptor.ContainedTypes">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.AssetsRepositoryDescriptor.CreatableTypes">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.AssetsRepositoryDescriptor.MainNavigationTypes">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.AssetsRepositoryDescriptor.MainViews">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.AssetsRepositoryDescriptor.ChangeContextOnItemSelection">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.BlobEditorDescriptor">
            <summary>
            Editor descriptor that will create a select input to be able to edit Property Blob
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.BlobEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.BlobEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.BlockFolderReferenceEditorDescriptor">
            <summary>
            Editor descriptor that will create a folder selector for block folders.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.BlockReferenceEditorDescriptor">
            <summary>
            Editor descriptor that will create a block selector.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CategoryListEditorDescriptor">
            <summary>
            Editor descriptor that will create a category selector to be able to edit Property Category values
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CategoryListEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CategoryListEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CategoryListEditorDescriptor.#ctor(EPiServer.DataAbstraction.CategoryRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CategoryListEditorDescriptor"/> class.
            </summary>
            <param name="categoryRepository">The category repository.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CheckBoxListEditorDescriptor">
            <summary>
            
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CheckBoxListEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CheckBoxListEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorCommands">
            <summary>
                Defines available commands for collection editor.
            </summary>
        </member>
        <member name="F:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorCommands.None">
            <summary>
            No command is available.
            </summary>
        </member>
        <member name="F:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorCommands.Add">
            <summary>
            The Add command is available.
            </summary>
        </member>
        <member name="F:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorCommands.Edit">
            <summary>
            The Edit command is available.
            </summary>
        </member>
        <member name="F:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorCommands.Remove">
            <summary>
            The Remove command is available.
            </summary>
        </member>
        <member name="F:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorCommands.MoveUp">
            <summary>
            The MoveUp command is available.
            </summary>
        </member>
        <member name="F:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorCommands.MoveDown">
            <summary>
            The MoveDown command is available.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorDescriptor`1">
            <summary>
            Base editor descriptor for collection types.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorDescriptor`1.GridDefinition">
            <summary>
            Gets or sets the grid definition.
            </summary>
            <value>
            The grid definition.
            </value>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorDescriptor`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorDescriptor`1"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorDescriptor`1.ModifyMetadata(EPiServer.Shell.ObjectEditing.ExtendedMetadata,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Modifies the metadata.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorDescriptor`1.GridDefinitionSettings">
            <summary>
            Grid definition settings class.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorDescriptor`1.GridDefinitionSettings.AutoGenerate">
            <summary>
            Gets or sets a value indicating whether to generate columns or not.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorDescriptor`1.GridDefinitionSettings.ExcludedColumns">
            <summary>
            Gets or sets the excluded columns.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorDescriptor`1.GridDefinitionSettings.IncludedColumns">
            <summary>
            Gets or sets the included columns.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorDescriptor`1.GridDefinitionSettings.Commands">
            <summary>
                Defines what commands that are available.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorDescriptor`1.GridDefinitionSettings.GridSettings">
            <summary>
            Gets or sets the grid settings.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorDescriptor`1.GridDefinitionSettings.UseDeleteWithConfirmation">
            <summary>
            Gets or sets a value indicating whether to raise a confirmation message when delete or not
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorDescriptor`1.GridDefinitionSettings.DeleteConfirmationMessage">
            <summary>
            Gets or sets the delete confirmation message
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorDescriptor`1.GridDefinitionSettings.DeleteConfirmationTitle">
            <summary>
            Gets or sets the delete confirmation title
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorDescriptor`1.GridDefinitionSettings.DisableDndSorting">
            <summary>
            Gets or sets weather dnd sorting you be disabled.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorDescriptor`1.GridDefinitionSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorDescriptor`1.GridDefinitionSettings"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorDescriptor`1.GridDefinitionSettings.IncludeColumn``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)">
            <summary>
            Includes a column in grid definition.
            </summary>
            <typeparam name="TValue">The property value type.</typeparam>
            <param name="expression">The property selecting expression.</param>
            <param name="options">The column options.</param>
            <exception cref="T:System.InvalidOperationException">Cannot add column in auto generated columns mode</exception>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorDescriptor`1.GridDefinitionSettings.ExcludeColumn``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Excludes a column from grid definition.
            </summary>
            <typeparam name="TValue">The property value type.</typeparam>
            <param name="expression">The property selecting expression.</param>
            <exception cref="T:System.InvalidOperationException">Cannot exclude column in configured columns mode</exception>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.CollectionEditorDescriptor`1.GridDefinitionSettings.FromLambdaExpression``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Get property name from lambda expression.
            </summary>
            <typeparam name="TValue">The property value type.</typeparam>
            <param name="expression">The property selecting expression.</param>
            <returns>The property name</returns>
            <exception cref="T:System.ArgumentException">Expecting a property access expression</exception>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.ContentAreaEditorDescriptor">
            <summary>
            Editor descriptor that will create a control to be able to edit Property ContentArea values
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.ContentReferenceEditorDescriptor">
            <summary>
            Editor descriptor that will create a page selector to be able to edit Property Page values
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.ContentReferenceListEditorDescriptor">
            <summary>
            Editor descriptor that will set the client editing class for properties of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.ContentReferenceListEditorDescriptor.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Shell.IContentRepositoryDescriptor},EPiServer.IContentLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.ContentReferenceListEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.ContentReferenceListEditorDescriptor.ModifyMetadata(EPiServer.Shell.ObjectEditing.ExtendedMetadata,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Adds unique roots from all <see cref="T:EPiServer.Shell.IContentRepositoryDescriptor"/> implementations to the EditorConfiguration for this editor.
            </summary>
            <param name="metadata">The metadata that is being modified.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.DateTimeEditorDescriptor">
            <summary>
            Editor descriptor that will add conversion information for <see cref="T:System.DateTime" /> values.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.DateTimeEditorDescriptor.ModifyMetadata(EPiServer.Shell.ObjectEditing.ExtendedMetadata,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Modifies the metadata.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.DefaultEditorDescriptor">
            <summary>
            Editor descriptor that will be used when no other editor descriptor matches the type or UIHint.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.DefaultEditorDescriptor.Style">
            <summary>
            Gets or sets the style settings for the textarea.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.DropDownListEditorDescriptor">
            <summary>
            Editor descriptor that will create a list of option in order to be able to edit properties with custom drop down values.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.DropDownListEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.DropDownListEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.EditorDescriptorConstants">
            <summary>
            Used for holding registered client side editors in the <see cref="T:EPiServer.Shell.ObjectEditing.MetadataHandlerRegistry"/>.
            Base class for Page's properties editor descriptor, where <see cref="T:System.Web.Mvc.RequiredAttributeAdapter"/> will be added by default, if <see cref="!:ExtendedMetadata.IsRequired"/> was true.
            </summary>
        </member>
        <member name="F:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.EditorDescriptorConstants.AllowedDndTypesKey">
            <summary>
            Represents a Key for defining what types this property accepts.
            </summary>
            <remarks>This is used for drag and drop for instance.</remarks>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.FileSortOrderEditorDescriptor">
            <summary>
            Specifies a selection factory and client editing class for properties of type <see cref="T:EPiServer.SpecializedProperties.PropertyFileSortOrder"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.FileSortOrderEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.FileSortOrderEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.ImageUrlEditorDescriptor">
            <summary>
            Editor descriptor that will create a textbox to be able to select a URL to an image.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.ImageUrlEditorDescriptor.#ctor(EPiServer.Cms.Shell.UI.ObjectEditing.Internal.FileExtensionsResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.ImageUrlEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.ItemCollectionEditorDescriptor">
            <summary>
            Editor descriptor that a base class for all collection editor descriptors
            <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.LinkCollectionEditorDescriptor"/>
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.ItemCollectionEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.ItemCollectionEditorDescriptor" /> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.ItemCollectionEditorDescriptor.ModifyMetadata(EPiServer.Shell.ObjectEditing.ExtendedMetadata,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Modifies the metadata.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.LanguageEditorDescriptor">
            <summary>
            Specifies a selection factory and client editing class for properties of type <see cref="T:EPiServer.SpecializedProperties.PropertyLanguage"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.LanguageEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.LanguageEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.LegacyPropertyEditorDescriptor">
            <summary>
            Base class for all legacy properties that has a custom editor descriptor
            It will add standard metadata properties for the requested propert type
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.LegacyPropertyEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.LegacyPropertyEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.LegacyPropertyEditorDescriptor.ModifyMetadata(EPiServer.Shell.ObjectEditing.ExtendedMetadata,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Modifies the metadata.
            </summary>
            <param name="metaData">The meta data.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.LinkCollectionEditorDescriptor">
            <summary>
            Editor descriptor that will create a new client editor that to be able to edit property LinkItemCollection
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.LinkCollectionEditorDescriptor.ModifyMetadata(EPiServer.Shell.ObjectEditing.ExtendedMetadata,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Modifies the metadata.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.MediaFolderReferenceEditorDescriptor">
            <summary>
            Editor descriptor that will create a folder selector for media folders.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.MediaReferenceEditorDescriptor">
            <summary>
            Editor descriptor that will create a page selector to be able to edit Property Page values
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.MediaUrlEditorDescriptor">
            <summary>
            Editor descriptor that will create a textbox to be able to select a URL to a media file.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.MediaUrlEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.MediaUrlEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.PageReferenceEditorDescriptor">
            <summary>
            Editor descriptor that will create a page selector to be able to edit Property Page values
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.PageReferenceEditorDescriptor.ModifyMetadata(EPiServer.Shell.ObjectEditing.ExtendedMetadata,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Modifies the metadata.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.PageShortcutTypeEditorDescriptor">
            <summary>
            Specifies a selection factory and client editing class for properties of type <see cref="T:EPiServer.Core.PageShortcutType"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.PageShortcutTypeEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.PageShortcutTypeEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.PageTargetFrameEditorDescriptor">
            <summary>
            Specifies a selection factory and client editing class for properties of type <see cref="!:PageTargetFrame"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.PageTargetFrameEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.PageTargetFrameEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.PageTypeEditorDescriptor">
            <summary>
            Editor descriptor that will create a list of option to be able to edit Property Page Type values
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.PreviewableDateTimeEditorDescriptor">
            <summary>
            Editor descriptor that will create a list of option to be able to edit Property Page Type values
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.PreviewableDateTimeEditorDescriptor.ModifyMetadata(EPiServer.Shell.ObjectEditing.ExtendedMetadata,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Modifies the metadata. Connects a selection factory to the metadata. 
            The selection factory is responsible for providing the list of page types.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.PreviewableTextEditorDescriptor">
            <summary>
            Editor descriptor that will create a list of option to be able to edit Property Page Type values
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.PreviewableTextEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.PreviewableTextEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.PropertySelectorEditorDescriptor">
            <summary>
            Specifies a selection factory and client editing class for properties of type <see cref="T:EPiServer.SpecializedProperties.PropertySelector"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.PropertySelectorEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.PropertySelectorEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.PropertyValueList.PropertyValueListEditorDescriptor`1.ListItem">
            <summary>
            class is used to create metadata for List Item
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.PropertyValueList.TypeDescriptor.PropertyListAssociatedMetadataTypeTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            TypeDescriptor that allows to replace property attributes
            </summary>
            <param name="parent">Parent type descriptor.</param>
            <param name="attributes">List of attributes that should be added on property</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.PropertyValueList.TypeDescriptor.PropertyListExtensibleMetadataProvider">
            <summary>
            MetadataProvider that allows to replace property attributes
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.PropertyValueList.TypeDescriptor.PropertyListExtensibleMetadataProvider.#ctor(EPiServer.Shell.ObjectEditing.MetadataHandlerRegistry,EPiServer.Framework.Localization.LocalizationService,EPiServer.ServiceLocation.ServiceAccessor{System.Web.HttpContextBase},System.Collections.Generic.IEnumerable{System.Attribute})">
             <summary>
            
             </summary>
             <param name="metadataHandlerRegistry">The metadata registry.</param>
             <param name="localizationService">The localization service.</param>
             <param name="httpContext">Access to the current HTTP context</param>
             <param name="attributes">List of attributes that should be added on property</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.ReadOnlyDateTimeEditorDescriptor">
            <summary>
            An editor descriptor that sets the editor to a read only editor
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.AppSettingsOptionsSelectionFactory">
            <summary>
            A factory providing selection items based on the settings set in web.config.
            </summary>
            <seealso cref="T:EPiServer.SpecializedProperties.AppSettingsOptionsLoader"/>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.AppSettingsOptionsSelectionFactory.GetSelections(EPiServer.Shell.ObjectEditing.ExtendedMetadata)">
            <summary>
            Gets a list of selection items based on the settings set in web.config.
            </summary>
            <param name="metadata">The metadata.</param>
            <seealso cref="T:EPiServer.SpecializedProperties.AppSettingsOptionsLoader"/>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.AppSettingsOptionsSelectionFactory.AddEmptyOption">
            <summary>
            Gets a value indicating whether to add an empty option first.
            </summary>
            <remarks>Returns true.</remarks>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.AppSettingsOptionsWithoutEmptyItemSelectionFactory">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.AppSettingsOptionsWithoutEmptyItemSelectionFactory.AddEmptyOption">
            <summary>
            Gets a value indicating whether to add an empty option first.
            </summary>
            <remarks>Returns false.</remarks>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.EnumSelectionFactory">
            <summary>
            Creates selections for the specified Enum type.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.EnumSelectionFactory.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.EnumSelectionFactory"/> class using the specified <paramref name="localizationService"/>.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.EnumSelectionFactory.GetSelections(EPiServer.Shell.ObjectEditing.ExtendedMetadata)">
            <summary>
            Gets the selections for the <see cref="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.EnumSelectionFactory.EnumType"/> enum.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.EnumSelectionFactory.GetStringForEnumValue(System.Int32)">
            <summary>
            Gets the string for the specified enum value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.EnumSelectionFactory.EnumType">
            <summary>
            Gets the type of enum that should be used.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.EnumSelectionFactory.LocalizationService">
            <summary>
            Gets the localization service.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.FileSortOrderSelectionFactory">
            <summary>
            Creates selections for enum of type <see cref="T:EPiServer.Web.PropertyControls.FileSortOrder"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.FileSortOrderSelectionFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.FileSortOrderSelectionFactory"/> class using <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.FileSortOrderSelectionFactory.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.FileSortOrderSelectionFactory"/> class using the specified <paramref name="localizationService"/>.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.FileSortOrderSelectionFactory.GetStringForEnumValue(System.Int32)">
            <summary>
            Gets the string for the specified enum value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.FileSortOrderSelectionFactory.EnumType">
            <summary>
            Gets the type of enum that should be used.
            </summary>
            <seealso cref="T:EPiServer.Web.PropertyControls.FileSortOrder"/>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.FilterSortOrderSelectionFactory">
            <summary>
            Creates selections for enum of type <see cref="T:EPiServer.Filters.FilterSortOrder"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.FilterSortOrderSelectionFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.FilterSortOrderSelectionFactory"/> class using <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.FilterSortOrderSelectionFactory.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.FilterSortOrderSelectionFactory"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.FilterSortOrderSelectionFactory.GetStringForEnumValue(System.Int32)">
            <summary>
            Gets the string for the specified enum value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.FilterSortOrderSelectionFactory.EnumType">
            <summary>
            Gets the type of enum that should be used.
            </summary>
            <seealso cref="T:EPiServer.Filters.FilterSortOrder"/>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.LanguageSelectionFactory">
            <summary>
            Creates selections for properties of type <see cref="T:EPiServer.SpecializedProperties.PropertyLanguage"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.LanguageSelectionFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.LanguageSelectionFactory"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.LanguageSelectionFactory.#ctor(EPiServer.DataAbstraction.ILanguageBranchRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.LanguageSelectionFactory"/> class using the specified <paramref name="languageBranchRepository"/>.
            </summary>
            <param name="languageBranchRepository">The language branch repository.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.LanguageSelectionFactory.GetSelections(EPiServer.Shell.ObjectEditing.ExtendedMetadata)">
            <summary>
            Gets the selections representing all enabled languages.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.PageShortcutTypeSelectionFactory">
            <summary>
            Creates selections for enum of type <see cref="T:EPiServer.Core.PageShortcutType"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.PageShortcutTypeSelectionFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.PageShortcutTypeSelectionFactory"/> class using <see cref="P:EPiServer.Framework.Localization.LocalizationService.Current"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.PageShortcutTypeSelectionFactory.#ctor(EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.PageShortcutTypeSelectionFactory"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.PageShortcutTypeSelectionFactory.GetStringForEnumValue(System.Int32)">
            <summary>
            Gets the string for the specified enum value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.PageShortcutTypeSelectionFactory.EnumType">
            <summary>
            Gets the type of enum that should be used.
            </summary>
            <seealso cref="T:EPiServer.Core.PageShortcutType"/>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.PageTargetFrameSelectionFactory">
            <summary>
            Creates selections for target frame of type <see cref="T:EPiServer.DataAbstraction.Frame"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.PageTargetFrameSelectionFactory.GetSelections(EPiServer.Shell.ObjectEditing.ExtendedMetadata)">
            <summary>
            Gets a list selection items.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.PageTargetFrameSelectionFactory.AddEmptyOption">
            <summary>
            Gets a value indicating whether to add an empty option first.
            </summary>
            <remarks>Returns true.</remarks>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.PageTypeSelectionFactory">
            <summary>
            A factory providing selection items based on a list of page types.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.PageTypeSelectionFactory.#ctor(EPiServer.DataAbstraction.IContentTypeRepository{EPiServer.DataAbstraction.PageType})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.PageTypeSelectionFactory"/> class.
            </summary>
            <param name="pageTypeRepository">The page type repository.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.PageTypeSelectionFactory.GetSelections(EPiServer.Shell.ObjectEditing.ExtendedMetadata)">
            <summary>
            Gets a list selection items. Will create one item for each page type in the system.
            </summary>
            <param name="metadata">The metadata.</param>
            <returns>
            A list of selection items based on the content types in the system.
            </returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.PropertySelectionFactory">
            <summary>
            A factory providing selection items based on a the properties on the current content.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.PropertySelectionFactory.GetSelections(EPiServer.Shell.ObjectEditing.ExtendedMetadata)">
            <summary>
            Gets a list selection items. Will create one item for each property on the current content.
            </summary>
            <param name="metadata">The metadata.</param>
            <returns>
            A list of selection items based on the properties on the current content.
            </returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.PropertySettingsSelectionFactory">
            <summary>
            A factory providing selection items based on the settings for that property.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.PropertySettingsSelectionFactory.#ctor(EPiServer.Framework.Localization.LocalizationService,EPiServer.Core.PropertySettings.PropertySettingsResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.PropertySettingsSelectionFactory"/> class.
            </summary>
            <param name="localizationService">The localization service.</param>
            <param name="propertySettingsResolver">The property settings resolver.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.PropertySettingsSelectionFactory.GetSelections(EPiServer.Shell.ObjectEditing.ExtendedMetadata)">
            <summary>
            Gets a list selection items based on the settings for the property.
            </summary>
            <param name="metadata">The metadata.</param>
            <returns>
            A list of selection items based on the settings for the property.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SelectionFactories.PropertySettingsSelectionFactory.TranslateNameIfPossible(System.String)">
            <summary>
            If the name starts with '/' we will attemt to translate it, using the name as a language key.
            If no translation is found, fallback to the original name.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SortOrderEditorDescriptor">
            <summary>
            Specifies a selection factory and client editing class for properties of type <see cref="T:EPiServer.SpecializedProperties.PropertySortOrder"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SortOrderEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.SortOrderEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.StringEditorDescriptor">
            <summary>
            Editor descriptor that will create an input to be able to edit property String and LongString values
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.StringEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.StringEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.TextareaEditorDescriptor">
            <summary>
            Editor descriptor that will create a text area to be able to edit Textarea value
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.TextareaEditorDescriptor.Style">
            <summary>
            Gets or sets the style settings for the textarea.
            </summary>
            <value>The style.</value>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.UrlEditorDescriptor">
            <summary>
            Registers editor and a drop type for different URL classes.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.UrlEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.UrlEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.UrlEditorDescriptor.#ctor(EPiServer.Cms.Shell.LinkableTypesAssembler)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.UrlEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.UrlEditorDescriptor.ModifyMetadata(EPiServer.Shell.ObjectEditing.ExtendedMetadata,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Modifies the metadata.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.VideoUrlEditorDescriptor">
            <summary>
            Editor descriptor that will create a textbox to be able to select a URL to a video.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.VideoUrlEditorDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.VideoUrlEditorDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.EditorDescriptors.WeekdayLegacyEditorDescriptor">
            <summary>
            Editor descriptor that will create a LegacyPropertyEditorDescriptor for Weekday property type.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.InlineBlockEditSettingsAttribute">
            <summary>
            Attribute used to configure inlin blocks editor dialog
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.AllowedTypesMetadataExtender">
            <summary>
            Metadata extender which sets metadata information from properties with <see cref="T:EPiServer.DataAnnotations.AllowedTypesAttribute"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.AllowedTypesMetadataExtender.ModifyMetadata(EPiServer.Shell.ObjectEditing.ExtendedMetadata,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Extends metadata for all properties decorated with <see cref="T:EPiServer.DataAnnotations.AllowedTypesAttribute"/>
            </summary>
            <param name="metadata">Metadata for data to be edited.</param>
            <param name="attributes">The attributes for the data.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.BlocksEditingMetadataExtender">
            <summary>
            Metadata extender which reads <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.InlineBlockEditSettingsAttribute"/> and and updates block client settings
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.BlocksEditingMetadataExtender.ModifyMetadata(EPiServer.Shell.ObjectEditing.ExtendedMetadata,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Modifies the metadata.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.ContentDataMetadata">
            <summary>
            Provides metadata for ContentData.
            </summary>
        </member>
        <member name="F:EPiServer.Cms.Shell.UI.ObjectEditing.ContentDataMetadata._validators">
            <summary>
            A variable which holds all <see cref="T:System.Web.Mvc.ModelValidator"/> for this Metadata
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.ContentDataMetadata.#ctor(System.Type,System.Func{System.Object},System.Type,System.String,System.ComponentModel.DataAnnotations.DisplayColumnAttribute,EPiServer.Shell.ObjectEditing.ExtendedDataAnnotationsModelMetadataProvider,EPiServer.Framework.Localization.LocalizationService,System.Web.HttpContextBase)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.ContentDataMetadata"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <param name="containerType">Type of the container.</param>
            <param name="modelAccessor">The model accessor.</param>
            <param name="modelType">Type of the model.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="displayColumnAttribute">The display column attribute.</param>
            <param name="localizationService">The localization service instance</param>
            <param name="httpContextBase">The HttpContextBase instance</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.ContentDataMetadata.SetValidators(System.Collections.Generic.IEnumerable{System.Web.Mvc.ModelValidator})">
            <summary>
            Sets the validators, overrides the old one if existed.
            </summary>
            <param name="validators">The list of validator.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.ContentDataMetadata.AddValidator(System.Web.Mvc.ModelValidator)">
            <summary>
            Adds the validator to the list of validator.
            </summary>
            <param name="validator">The validator to add.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.ContentDataMetadata.GetValidators(System.Web.Mvc.ControllerContext)">
            <summary>
            Gets the list of validator.
            </summary>
            <param name="context">The controller context.</param>
            <returns>List of validator for this metadata</returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.ContentDataMetadata.OwnerContent">
            <summary>
            Gets or sets the owner content.
            </summary>
            <value>
            The owner content.
            </value>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.InternalMetadata.ExpireBlock">
            <summary>
            Represents the data that should be edited when modifying expiration on an IContent.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.InternalMetadata.ExpireMetadataPropertyInfo">
            <summary>
            Work in progress.
            Implementation that maps properties from IVersionable interface to an ExpireBlock.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.InternalMetadata.ExpireMetadataPropertyInfo.GetValue">
            <summary>
            Maps the data from an IContent implementing IVersionable to an ExpireBlock.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.InternalMetadata.ExpireMetadataPropertyInfo.SetValue">
            <summary>
            Maps the data from an ExpireBlock to the correct properties on an IContent implementing IVersionable.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.InternalMetadata.GroupMetadataBlock">
            <summary>
            Base class for metadata properties grouped as block
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.InternalMetadata.GroupMetadataBlock.Set``1(System.String,System.Object,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the property value. If the property does not exists in the property collection it will be added
            </summary>
            <typeparam name="TBackingType">The backing type of the property.</typeparam>
            <param name="propertyName">Property name.</param>
            <param name="value">The value to set.</param>
            <param name="isPropertyData">if set to <c>true</c> [is property data].</param>
            <param name="isRequired">if set to <c>true</c> [is required].</param>
            <param name="isLanguageSpecific">if set to <c>true</c> [is language specific].</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.InternalMetadata.GroupMetadataBlock.Get``1(System.String)">
            <summary>
            Get the property value from the backing Property property
            </summary>
            <typeparam name="TType">The type of the property</typeparam>
            <param name="propertyName">Name of the property</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.InternalMetadata.GroupPropertyEditorDescriptor">
            <summary>
            
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.InternalMetadata.GroupPropertyEditorDescriptor.IsRoot">
            <summary>
            Determines whether this instance is root.
            </summary>
            <returns>
            	<c>true</c> if this instance is root; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.InternalMetadata.GroupPropertyEditorDescriptor.IsPage">
            <summary>
            Determines whether this instance is page.
            </summary>
            <returns>
            	<c>true</c> if this instance is page; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.InternalMetadata.LinkModel.FrameLoader">
            <summary>
            Used from tests to mock the static frame loading implementation
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.InternalMetadata.ReloadOnChangeMetadataExtender">
            <summary>
            Metadata extender which reads <see cref="T:EPiServer.Cms.Shell.UI.ObjectEditing.ReloadOnChangeAttribute"/> and registers selected properties to reload the current view
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.InternalMetadata.ReloadOnChangeMetadataExtender.ModifyMetadata(EPiServer.Shell.ObjectEditing.ExtendedMetadata,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Modifies the metadata.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.InternalMetadata.ShortcutBlock">
            <summary>
            Represents the data that should be edited when modifying shortcut block on an IContent.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.InternalMetadata.ShortcutMetadataPropertyInfo">
            <summary>
            Implementation that maps properties from IVersionable interface to a ShortcutBlock.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.InternalMetadata.ShortcutMetadataPropertyInfo.GetValue">
            <summary>
            Maps the data from an IContent implementing IVersionable to a ShortcutBlock.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.ObjectEditing.InternalMetadata.ShortcutMetadataPropertyInfo.SetValue">
            <summary>
            Maps the data from a ShortcutBlock to the correct properties on an IContent implementing IVersionable.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.Internal.FileExtensionsResolver">
            <summary>
            Class used to find allowed file extensions for a given model type
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.Internal.FileExtensionsResolver.GetAllowedExtensions(System.Type,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Get allowed file extensions for a specific type
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.SettingsPanelMetadataExtender">
            <summary>
            Metadata extender which selects important properties and move them to Settings panel group
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.SettingsPanelMetadataExtender.ModifyMetadata(EPiServer.Shell.ObjectEditing.ExtendedMetadata,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Modifies the metadata.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.SettingsPanelMetadataExtender.CreateGroupSettings">
            <summary>
            Creates the group settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.ObjectEditing.SettingsPanelMetadataExtender.MigrateGroupSettings(EPiServer.Shell.ObjectEditing.ExtendedMetadata,EPiServer.Shell.ObjectEditing.ExtendedMetadata)">
            <summary>
            Migrates the group settings.
            </summary>
            <param name="metadata">The metadata.</param>
            <param name="property">The property.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.ObjectEditing.ReloadOnChangeAttribute">
            <summary>
            Attribute can be used to make the context reload after property value is changed
            </summary>
        </member>
        <member name="F:EPiServer.Cms.Shell.UI.Profile.CurrentUiCulture.GetEpiProfileLanguage">
            <summary>
            Internal Func to make it possible to mock EPiServerProfile during test
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Profile.CurrentUiCulture.Get(System.String)">
            <summary>
            Returns the preferred UI Culture for the user
            </summary>
            <param name="userName">The userName for the user to get the ui culture for</param>
            <returns>The preferred UI culture or EN</returns>
            <remarks>If the preferred culture hasn't been stored in the ProfileRepository we try to get it from the old <see cref="T:EPiServer.Personalization.EPiServerProfile"/></remarks>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Profile.CurrentUiCulture.Save(System.String,System.Globalization.CultureInfo)">
            <summary>
            Saves the preferred culture in the <see cref="T:EPiServer.Shell.Profile.IProfileRepository"/>
            </summary>
            <param name="userName">The userName for the user to store the ui culture</param>
            <param name="culture">The preferred ui culture</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.PropertyReflector">
            <summary>
            Internal helper class for hierarchically finding a property on a content item
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.PropertyReflector.PropertyType">
            <summary>
            Returns the type of the property
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.PropertyReflector.Value">
            <summary>
            Gets or sets the property value on the instance using reflection
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.PropertyReflector.Property">
            <summary>
            Returns a reference to the backing property data
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.PropertyReflector.Create(EPiServer.Core.IContent,System.String)">
            <summary>
            Finds a given property on a content instance using reflection and returns an instance for manipulating the value.
            </summary>
            <param name="content">The content instance to locate the property on</param>
            <param name="propertyName">Name of the property. Use dots (.) to traverse into complex sub-properties</param>
            <returns>An initialized <see cref="T:EPiServer.Cms.Shell.UI.PropertyReflector"/> instance</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Activities.ActivitiesResult">
            <summary>
            A composite object, used listing activities and their associated content, returned
            by queries to the activites service.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.ActivitiesResult.Activities">
            <summary>
            A collection of <see cref="T:EPiServer.DataAbstraction.Activities.Activity"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.ActivitiesResult.AssociatedContent">
            <summary>
            A collection of <see cref="T:EPiServer.Core.IContent"/>, indexed by content reference, that is
            associated with the activities.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.ActivitiesResult.AssociatedComments">
            <summary>
            A collection of <see cref="T:EPiServer.DataAbstraction.Activities.ActivityComment"/>, indexed by the activity id, that is
            associated with the activities.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Activities.Exceptions.ActivitiesUserHasNoEditRightsException">
            <summary>
            Represents the Exception when the user has no edit rights
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Exceptions.ActivitiesUserHasNoEditRightsException.#ctor(System.String)">
            <summary>
            Creates the instance of UserHasNoEditRightsException
            </summary>
            <param name="message">The message propagated to the Exception</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityCommentsStore">
            <summary>
            A REST store for exposing <see cref="T:EPiServer.DataAbstraction.Activities.ActivityComment"/> information to the client.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityCommentsStore.Get(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Gets an activity comment for the specified ID or a list of activity comments for the specified activity
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityCommentsStore.Post(EPiServer.Cms.Shell.UI.Rest.Activities.Models.ActivityCommentViewModel)">
            <summary>
            Creates a new ActivityComment
            </summary>
            <param name="commentModel"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityCommentsStore.Put(EPiServer.Cms.Shell.UI.Rest.Activities.Models.ActivityCommentViewModel)">
            <summary>
            Updates an activity comment
            </summary>
            <param name="commentModel"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityEventListener">
            <summary>
            Listens to activity/comment save and update events and sends change events to the <see cref="T:EPiServer.Shell.UI.Messaging.Internal.PushMessenger"/>
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityService">
            <summary>
            A facade service class to be used when working with activities.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityService.ListProjectMessageActivitiesAsync(System.Int32)">
            <summary>
            Lists all <see cref="T:EPiServer.DataAbstraction.Activities.ProjectMessageActivity"/> related to the specified <see cref="T:EPiServer.DataAbstraction.Project"/>.
            </summary>
            <param name="projectId">The identity of the project to load activities for.</param>
            <returns>A result containing all activities related to the specified project.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityService.ListActivitiesAsync(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
            <summary>
            List all activities for a content version.
            </summary>
            <param name="contentReferences">The content to get related activities for</param>
            <returns>A result containing all activities related to the content versions.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityService.ListActivitiesAsync(System.Int32,System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
            <summary>
            List all activities for a content version that is related to a <see cref="T:EPiServer.DataAbstraction.Project"/>.
            </summary>
            <param name="projectId">The related project</param>
            <param name="contentReferences">The content to get project related activities for</param>
            <returns>A result containing all activities related to the content versions and project.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityService.LoadActivityAsync(System.Int64)">
            <summary>
            Loads a specific <see cref="T:EPiServer.DataAbstraction.Activities.Activity"/>, if does not exists null is return
            </summary>
            <param name="activityId">The id of the activity to load</param>
            <returns>The <see cref="T:EPiServer.DataAbstraction.Activities.Activity"/> if found otherwise null</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityService.HasRelatedProjects(System.Int64)">
            <summary>
            Indicates whether an activity has any related projects
            </summary>
            <returns>Returns true when there are related projects, otherwise false</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityService.SaveMessageActivityAsync(EPiServer.DataAbstraction.Activities.MessageActivity)">
            <summary>
            Saves a new or updates an existing message activity
            </summary>
            <param name="messageActivity">The message activity to save/update</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityService.ListActivityCommentsAsync(System.Int64)">
            <summary>
            Lists all comment related to a specific <see cref="T:EPiServer.DataAbstraction.Activities.Activity"/>.
            </summary>
            <param name="activityId">The id of the activity.</param>
            <returns>A list of comments related to the provided activity.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityService.LoadActivityCommentAsync(System.Int64)">
            <summary>
            Load the comment with given id.
            </summary>
            <param name="activityCommentId">The id for the comment to load.</param>
            <returns>The comment.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityService.SaveActivityCommentAsync(EPiServer.DataAbstraction.Activities.ActivityComment)">
            <summary>
            Saves a new or existing comment.
            </summary>
            <param name="activityComment">The comment to save.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityService.CanBeRepliedTo(EPiServer.DataAbstraction.Activities.Activity,System.String@)">
            <summary>
            Checks if the activity can be commented on.
            It would also return the editorial message that can later be commented on
            </summary>
            <param name="activity">Activity to analyze</param>
            <param name="editorialMessage">Potential editorial message</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityService.HasAnyCommentsAsync(EPiServer.DataAbstraction.ProjectItem)">
            <summary>
            Returns true if there are any <see cref="T:EPiServer.DataAbstraction.Activities.MessageActivity"/> or a <see cref="T:EPiServer.DataAbstraction.Activities.ActivityComment"/> on any <see cref="T:EPiServer.DataAbstraction.Activities.Activity"/>
            associated with the content in the project
            </summary>
            <param name="projectItem">The related project item</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityService.HasAnyCommentsAsync(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.ProjectItem})">
            <summary>
            Returns true if there are any <see cref="T:EPiServer.DataAbstraction.Activities.MessageActivity"/> or a <see cref="T:EPiServer.DataAbstraction.Activities.ActivityComment"/> on any <see cref="T:EPiServer.DataAbstraction.Activities.Activity"/>
            associated with the content in the project
            </summary>
            <param name="projectItems">The related project items</param>
            <returns>A dictionary with the project item id and true/false depending on if there are any associated comments</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityService.HasCommentsAsync(EPiServer.DataAbstraction.ProjectItem,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Determine if there are any comments on any of the activities associated with the project item
            </summary>
            <param name="projectItem"></param>
            <param name="activitiesIds"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityService.CreateActivitiesResult(System.Collections.Generic.ICollection{EPiServer.DataAbstraction.Activities.Activity})">
            <summary>
            Helper method for converting a collection of activities to a activities result object.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityService.GetReference(EPiServer.DataAbstraction.Activities.Activity)">
            <summary>
            Helper method for getting ContentReference's from different activity types.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityService.IsRelevant(EPiServer.DataAbstraction.Activities.Activity)">
            <summary>
            Helper method for filtering out activites we want to show to the user.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityStore">
            <summary>
            A REST store for exposing <see cref="T:EPiServer.DataAbstraction.Activities.Activity"/> information to the client.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityStore.Get(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.ICollection{EPiServer.Core.ContentReference},EPiServer.Shell.Services.Rest.ItemRange)">
            <summary>
            Gets an activity for the specified ID or a list of activities for the specified project or content references.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityStore.Post(EPiServer.Cms.Shell.UI.Rest.Activities.Models.PostMessageActivityViewModel)">
            <summary>
            Creates a new Message activity
            </summary>
            <param name="messageModel"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityStore.Put(EPiServer.Cms.Shell.UI.Rest.Activities.Models.PostMessageActivityViewModel)">
            <summary>
            Updates a message activity
            </summary>
            <param name="messageModel"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityStore.SetContentProperties(EPiServer.Core.IContent,EPiServer.Cms.Shell.UI.Rest.Activities.Models.IContentActivityViewModel)">
            <summary>
            Helper method for setting content properties on the view model.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityStore.SetActionProperties(EPiServer.DataAbstraction.Activities.ProjectActionType,EPiServer.Cms.Shell.UI.Rest.Activities.Models.IActionActivityViewModel)">
            <summary>
            Helper method for setting project action properties on the view model.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityStore.SetActionProperties(EPiServer.DataAbstraction.Activities.ContentActionType,EPiServer.Cms.Shell.UI.Rest.Activities.Models.IActionActivityViewModel)">
            <summary>
            Helper method for setting content action properties on the view model.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityStore.SetActionProperties(EPiServer.DataAbstraction.Activities.ApprovalActionType,EPiServer.Cms.Shell.UI.Rest.Activities.Models.IActionActivityViewModel)">
            <summary>
            Helper method for setting content action properties on the approval view model.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Activities.Internal.ActivityStore.SetupContextualMappings(EPiServer.Cms.Shell.UI.Rest.Activities.ActivitiesResult)">
            <summary>
            Set the context sensitive after map actions.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ActivityCommentViewModel.Id">
            <summary>
            Gets or sets the identifier for the <see cref="T:EPiServer.DataAbstraction.Activities.ActivityComment"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ActivityCommentViewModel.ActivityId">
            <summary>
            Gets or sets the identifier of the <see cref="T:EPiServer.DataAbstraction.Activities.Activity"/> that this <see cref="T:EPiServer.DataAbstraction.Activities.ActivityComment"/> is related to.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ActivityCommentViewModel.Author">
            <summary>
            Gets or sets the author of this <see cref="T:EPiServer.DataAbstraction.Activities.ActivityComment"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ActivityCommentViewModel.Created">
            <summary>
            Gets the date and time when this <see cref="T:EPiServer.DataAbstraction.Activities.ActivityComment"/> was created.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ActivityCommentViewModel.LastUpdated">
            <summary>
            Gets the date and time when this <see cref="T:EPiServer.DataAbstraction.Activities.ActivityComment"/> was last updated.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ActivityCommentViewModel.Message">
            <summary>
            Gets or sets the message of this <see cref="T:EPiServer.DataAbstraction.Activities.ActivityComment"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ActivityCommentViewModel.HasChanged">
            <summary>
            Returns true if the Created and the LastUpdate date differs
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ActivityViewModel.Id">
            <summary>
            Gets or sets the identifier for the <see cref="T:EPiServer.DataAbstraction.Activities.Activity"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ActivityViewModel.ActivityType">
            <summary>
            Gets or sets the type of <see cref="T:EPiServer.DataAbstraction.Activities.Activity"/> that this view model represents.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ActivityViewModel.Created">
            <summary>
            Gets or sets the date and time the <see cref="T:EPiServer.DataAbstraction.Activities.Activity"/> was created.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ActivityViewModel.ChangedBy">
            <summary>
            Gets or sets the user who most recently modified the <see cref="T:EPiServer.DataAbstraction.Activities.Activity"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ActivityViewModel.Comments">
            <summary>
            Gets or sets the comments associated with the activity
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ActivityViewModel.CanBeRepliedTo">
            <summary>
            Gets or sets if the activity can be commented on.
            While it makes sense for certain activities to be `commentable`, e.g. Rejected, Approve, Sent for review, etc.
            then it does not for activities like VersionDeleted, Moved and similar
            All activities that have the actual message produced by a human editor will be
            possible to comment regardless of the type.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ContentActivityViewModel.AccessMask">
            <summary>
            Gets or sets the access rights on this item for the current user.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ContentActivityViewModel.ActionColor">
            <summary>
            Gets or sets the color associated with the action type.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ContentActivityViewModel.ActionIcon">
            <summary>
            Gets or sets the icon associated with the action type.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ContentActivityViewModel.ActionText">
            <summary>
            Gets or sets the text associated with the action type.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ContentActivityViewModel.ContentLink">
            <summary>
            Gets or sets the content reference.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ContentActivityViewModel.Language">
            <summary>
            Gets or sets the language.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ContentActivityViewModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ContentActivityViewModel.Status">
            <summary>
            Gets or sets the version status.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ContentActivityViewModel.TypeIdentifier">
            <summary>
            Gets or sets the type identifier.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ContentActivityViewModel.DelayPublishUntil">
            <summary>
            Gets or sets the date and time that publishing is delay until.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.Internal.ContentApprovalActivityViewModel.Comment">
            <summary>
            Gets or sets the comment for the approval activity.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.Internal.ContentApprovalActivityViewModel.AccessMask">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.Internal.ContentApprovalActivityViewModel.ContentLink">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.Internal.ContentApprovalActivityViewModel.Language">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.Internal.ContentApprovalActivityViewModel.Name">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.Internal.ContentApprovalActivityViewModel.Status">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.Internal.ContentApprovalActivityViewModel.TypeIdentifier">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.Internal.ContentApprovalActivityViewModel.ActionColor">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.Internal.ContentApprovalActivityViewModel.ActionIcon">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.Internal.ContentApprovalActivityViewModel.ActionText">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ContentMessageActivityViewModel.AccessMask">
            <summary>
            Gets or sets the access rights on this item for the current user.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ContentMessageActivityViewModel.ContentLink">
            <summary>
            Gets or sets the content reference.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ContentMessageActivityViewModel.Language">
            <summary>
            Gets or sets the language.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ContentMessageActivityViewModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ContentMessageActivityViewModel.Status">
            <summary>
            Gets or sets the version status.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ContentMessageActivityViewModel.TypeIdentifier">
            <summary>
            Gets or sets the type identifier.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ContentMessageActivityViewModel.Property">
            <summary>
            The name of the content instance property which the message relates to.
            </summary>
            <remarks>
            This is null if the message is not related to a specific property.
            </remarks>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.IActionActivityViewModel.ActionColor">
            <summary>
            Gets or sets the color associated with the action type.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.IActionActivityViewModel.ActionIcon">
            <summary>
            Gets or sets the icon associated with the action type.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.IActionActivityViewModel.ActionText">
            <summary>
            Gets or sets the text associated with the action type.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.IContentActivityViewModel.AccessMask">
            <summary>
            Gets or sets the access mask of the content for the current user.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.IContentActivityViewModel.ContentLink">
            <summary>
            Gets or sets the content reference.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.IContentActivityViewModel.Language">
            <summary>
            Gets or sets the language.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.IContentActivityViewModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.IContentActivityViewModel.Status">
            <summary>
            Gets or sets the version status.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.IContentActivityViewModel.TypeIdentifier">
            <summary>
            Gets or sets the type identifier.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.MessageActivityViewModel.Message">
            <summary>
            Gets or sets the message for the <see cref="T:EPiServer.DataAbstraction.Activities.MessageActivity"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.MessageActivityViewModel.LastUpdated">
            <summary>
            Gets or sets when the <see cref="T:EPiServer.DataAbstraction.Activities.MessageActivity"/> was last updated.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.MessageActivityViewModel.HasChanged">
            <summary>
            Returns true if the created and the last updated dates differ; otherwise false.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ProjectActivityViewModel.ProjectId">
            <summary>
            Gets or set the ID of the project associated with the <see cref="T:EPiServer.DataAbstraction.Activities.ProjectActivity"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ProjectActivityViewModel.ActionColor">
            <summary>
            Gets or sets the color associated with the action type.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ProjectActivityViewModel.ActionIcon">
            <summary>
            Gets or sets the icon associated with the action type.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ProjectActivityViewModel.ActionText">
            <summary>
            Gets or sets the text associated with the action type.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ProjectContentActivityViewModel.AccessMask">
            <summary>
            Gets or sets the access rights on this item for the current user.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ProjectContentActivityViewModel.ContentLink">
            <summary>
            Gets or sets the content reference.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ProjectContentActivityViewModel.Language">
            <summary>
            Gets or sets the language.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ProjectContentActivityViewModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ProjectContentActivityViewModel.Status">
            <summary>
            Gets or sets the version status.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ProjectContentActivityViewModel.TypeIdentifier">
            <summary>
            Gets or sets the type identifier.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ProjectMessageActivityViewModel.ProjectId">
            <summary>
            Gets or set the ID of the project associated with the <see cref="T:EPiServer.DataAbstraction.Activities.ProjectMessageActivity"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ProjectUpdateActivityViewModel.Status">
            <summary>
            Gets the status of the project after the update.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Activities.Models.ProjectUpdateActivityViewModel.Name">
            <summary>
            Gets the name of the project after the update.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalDefinitionStore">
            <summary>
            A REST store for exposing <see cref="T:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionViewModel"/> information to the client.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalDefinitionStore.Get(EPiServer.Core.ContentReference,System.Nullable{System.Boolean})">
            <summary>
            Gets the approval definition for the given content link.
            </summary>
            <param name="id">The content reference of the approval definition.</param>
            <param name="getApprovalRelatedDefinition">If true, then it'll returns the definition which is related to the running approval sequence.</param>
            <returns>A result containing the approval definition, otherwise a result with status code indicating what went wrong.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalDefinitionStore.Delete(EPiServer.Core.ContentReference)">
            <summary>
            Deletes the approval definition for the given content link.
            </summary>
            <param name="id">The content reference of the approval definition.</param>
            <returns>A result with status code indicating the outcome of the operation.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalDefinitionStore.Put(EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionViewModel)">
            <summary>
            Creates or updates the approval definition for the given content link.
            </summary>
            <param name="entity">The approval definition to save.</param>
            <returns>A result with status code.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalDefinitionStore.Inherit(EPiServer.Core.ContentReference)">
            <summary>
            Removes the approval definition by given link and returns the ancestor's definition
            </summary>
            <param name="id">The content reference of the approval definition</param>
            <returns>Either an approval definition or the result containing the status of the failure.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalDefinitionStore.HandleExceptions(System.Func{System.Threading.Tasks.Task{System.Web.Mvc.ActionResult}})">
            <summary>
            Wraps an approval method with standard exception handling.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService">
            <summary>
            Service for CRUD operations on <see cref="T:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionViewModel"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService.GetApprovalAsync(EPiServer.Core.ContentReference)">
            <summary>
            Gets the active approval for the given content reference.
            </summary>
            <param name="contentLink">The content reference to get an approval for.</param>
            <returns>The active approval or null</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService.GetApprovalAsync(EPiServer.Core.IContent)">
            <summary>
            Gets the active approval for the given content.
            </summary>
            <param name="content">The content to get an approval for.</param>
            <returns>The active approval or null</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService.GetApprovalsAsync(EPiServer.Approvals.ContentApprovals.ContentApprovalQuery,System.Int32,System.Int32)">
            <summary>
            Returns all approvals by query
            </summary>
            <param name="query"></param>
            <param name="startIndex"></param>
            <param name="maxCount"></param>
            <returns>List of approvals</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService.IsUserPartOfActiveApprovalStepAsync(EPiServer.Core.IContent,System.String)">
            <summary>
            Indicates if the logged in user is part of the active approval step
            </summary>
            <param name="content">The content that is awaiting review</param>
            <param name="username">Name of the user</param>
            <returns>True if the user is part of the active approval step</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService.IsPartOfActiveApprovalAsync(EPiServer.Core.IContent)">
            <summary>
            Indicates if the content is part of an active approval
            </summary>
            <param name="content">The content to check</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService.GetDefinitionAsync(EPiServer.Core.ContentReference)">
            <summary>
            Gets the <see cref="T:EPiServer.Approvals.ContentApprovals.ContentApprovalDefinition"/> associated with the given <see cref="T:EPiServer.Core.ContentReference"/>.
            </summary>
            <param name="contentLink">The content reference of the approval definition.</param>
            <returns>The approval definition with given content reference; otherwise a fake definition that points to the Root node.</returns>
            <exception cref="T:EPiServer.Core.AccessDeniedException">When the user does not have read access for the content at the given content reference.</exception>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService.GetApprovalRelatedDefinitionAsync(EPiServer.Core.ContentReference)">
            <summary>
            Gets the <see cref="T:EPiServer.Approvals.ContentApprovals.ContentApprovalDefinition"/> which belongs to the currently running approval with given <see cref="T:EPiServer.Core.ContentReference"/>.
            </summary>
            <param name="contentLink">The content reference of the approval definition.</param>
            <returns>The approval definition with given content reference; if no running approval found for given content, it'll throw <exception cref="T:EPiServer.Approvals.MissingApprovalException" /> </returns>
            <exception cref="T:EPiServer.Core.AccessDeniedException">When the user does not have read access for the content at the given content reference.</exception>
            /// <exception cref="T:EPiServer.Approvals.MissingApprovalException">When there is no running approval found for given content link.</exception>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService.GetDefinitionVersionAsync(System.Int32)">
            <summary>
            Gets the approval definition with the given version id.
            </summary>
            <param name="definitionVersionId">The version id of the approval definition</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService.DeleteDefinitionAsync(EPiServer.Core.ContentReference)">
            <summary>
            Deletes the <see cref="T:EPiServer.Approvals.ContentApprovals.ContentApprovalDefinition"/> associated with the given <see cref="T:EPiServer.Core.ContentReference"/>.
            </summary>
            <param name="contentLink">The content reference of the approval definition.</param>
            <exception cref="T:EPiServer.Core.AccessDeniedException">When the user does not have admin access for the content at the given content reference.</exception>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService.HasDefinitionAndIsEnabledAsync(EPiServer.Core.ContentReference)">
            <summary>
            Indicates whether an enabled approval definition exists for the given content reference.
            </summary>
            <param name="contentLink">The content reference of the approval definition.</param>
            <returns><code>true</code> if an approval definition exists, either directly or inherited, and is enabled; otherwise <code>false</code>.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService.SaveAsync(EPiServer.Approvals.ContentApprovals.ContentApprovalDefinition)">
            <summary>
            Creates or updates the given <see cref="T:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionViewModel"/>.
            </summary>
            <param name="approvalDefinition">The approval definition.</param>
            <exception cref="T:EPiServer.Core.AccessDeniedException">When the user does not have admin access for the given approval definition.</exception>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService.InheritDefinitionAsync(EPiServer.Core.ContentReference)">
            <summary>
            Deletes the approval definition found by given content link and returns the ancestor's definition
            </summary>
            <param name="contentLink">The ContentReference instance</param>
            <returns>The Approval Definition of the parent</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService.ApproveStepAsync(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Approves the approval step
            </summary>
            <param name="approvalId">The identifier of the approval instance</param>
            <param name="username">Name of the user</param>
            <param name="stepIndex">stepIndex of the given approval</param>
            <param name="approveReason">The approve reason, if any</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService.ForceApproveAsync(System.Int32,System.String,System.String)">
            <summary>
            Force approves an approval instance.
            </summary>
            <param name="approvalId">The identifier of the approval instance</param>
            <param name="username">Name of the user</param>
            <param name="forceReason">Reason for forcing approval</param>
            <exception cref="T:EPiServer.Cms.Shell.UI.Rest.Approvals.Exceptions.ApprovalCommentRequiredException">Thrown when there is no <see cref="!:forceReason"/></exception>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService.CancelApprovalAsync(System.Int32,System.String)">
            <summary>
            Cancel the approval
            </summary>
            <param name="approvalId">The identifier of the approval instance</param>
            <param name="username">Name of the user</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService.RejectStepAsync(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Rejects the approval step
            </summary>
            <param name="approvalId">The identifier of the approval instance</param>
            <param name="username">Name of the user</param>
            <param name="stepIndex">stepIndex of the given approval</param>
            <param name="rejectReason">The reason for rejection</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService.CommentAsync(System.Int32,System.String,System.String)">
            <summary>
            Attaches comment to the review request
            </summary>
            <param name="id">ID of the approval step</param>
            <param name="username">Name of the user</param>
            <param name="comment">Comment on the step</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService.IsApprovalApprovedAsync(EPiServer.Core.ContentReference)">
            <summary>
            Indicates if the content have been part of an approved approval
            </summary>
            <param name="contentLink"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService.GetDecisionsAsync(System.Int32)">
            <summary>
            Returns all decisions for an approval
            </summary>
            <param name="id">Id of the approval</param>
            <returns>List of decision</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService.CanConfigureDefinition(EPiServer.Core.ContentReference)">
            <summary>
            Checks whether it is possible to configure an approval definition on the given content link
            </summary>
            <param name="contentLink">The content link</param>
            <returns>true or false</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalStore.Get(EPiServer.Core.ContentReference)">
            <summary>
            Get the approval matching the content reference
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalStore.ApproveChanges(System.Int32,System.Int32,System.String)">
            <summary>
            Approves the approval
            </summary>
            <param name="id">ID of the approval step</param>
            <param name="activeStepIndex">Index of the approval step</param>
            <param name="approveReason">Approve reason, if any</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalStore.ForceComplete(System.Int32,System.String)">
            <summary>
            Force completes an approval instance as approved.
            </summary>
            <param name="id">The identifier of the approval instance</param>
            <param name="forceReason">Reason for forcing the approval</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalStore.CancelChanges(System.Int32)">
            <summary>
            Cancel the approval with given data
            </summary>
            <param name="id">id of the approval</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalStore.RejectChanges(System.Int32,System.Int32,System.String)">
            <summary>
            Rejects the approval step with given data
            </summary>
            <param name="id">id of the approval step</param>
            <param name="activeStepIndex">index of the approval step</param>
            <param name="rejectReason">The reason for rejection</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalStore.CommentChanges(System.Int32,System.String)">
            <summary>
            Attaches comment to the review request
            </summary>
            <param name="id">ID of the approval step</param>
            <param name="comment">Comment on the step</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalStore.HandleExceptions(System.Int32,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Wraps an approval method with standard exception handling.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Approvals.CanConfigureApprovalDefinition">
            <summary>
            Determines if the content can have its own Approval Definition or not
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Approvals.ContentApprovalContextResolver">
            <summary>
            Resolves the context for a content approval URI.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Approvals.ContentApprovalContextResolver.TryResolveUri(System.Uri,EPiServer.Shell.Rest.ClientContextBase@)">
            <summary>
            Resolves the context for a given URI.
            </summary>
            <param name="uri">The URI uniquely identifying a specific data.</param>
            <param name="instance">Returns the context representing the given URI.</param>
            <returns>True if the context was loaded; otherwise false.</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionReviewerViewModel">
            <summary>
            A reviewer that is part of a particular <see cref="T:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionStepViewModel"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionReviewerViewModel.Name">
            <summary>
            Gets or sets the name for the reviewer.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionReviewerViewModel.ReviewerType">
            <summary>
            Gets or set the type of reviewer
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionReviewerViewModel.DisplayName">
            <summary>
            Gets or sets the display name for the reviewer.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionReviewerViewModel.Languages">
            <summary>
            Gets or sets the languages that this reviewer can approve. Zero languages means all languages.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionReviewerViewModel.RoleInfo">
            <summary>
            Gets or sets the role information in case the reviewer type is Role
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionStatus">
            <summary>
            The status of an <see cref="T:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionViewModel"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionStepViewModel">
            <summary>
            A step that is part of a <see cref="T:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionViewModel"/> containing a list of <see cref="T:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionReviewerViewModel"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionStepViewModel.Reviewers">
            <summary>
            Gets or sets the list of <see cref="T:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionReviewerViewModel"/> for this step.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionStepViewModel.Name">
            <summary>
            Gets or sets the header for the approval step
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionViewModel">
            <summary>
            The definition of a content approval sequence.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionViewModel.Id">
            <summary>
            Gets or sets the id of the definition.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionViewModel.ApprovalInheritedFrom">
            <summary>
            Gets or sets the content link to the content that the page inherited content approval settings from.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionViewModel.ContentLink">
            <summary>
            Gets or sets the content link to the content that needs approval.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionViewModel.ApprovalSteps">
            <summary>
            Gets or sets the list of <see cref="T:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionStepViewModel"/> for this definition.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionViewModel.Languages">
            <summary>
            Gets or sets the list of available languages for this definition.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionViewModel.IsReadOnly">
            <summary>
            Gets or sets whether the approval definition is in readonly mode.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionViewModel.IsDeclineCommentRequired">
            <summary>
            Indicates whether a comment is required when declining
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionViewModel.IsApproveCommentRequired">
            <summary>
            Indicates whether a comment is required when approving
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionViewModel.IsStartCommentRequired">
            <summary>
            Indicates whether a comment is required when sending for review
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionViewModel.SelfApprove">
            <summary>
            Indicates whether users can approve their own changes
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionViewModel.IsForcedApproveCommentRequired">
            <summary>
            Indicates whether a comment is required when forcing approval
            Always require comment when forcing approval
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionViewModel.SavedBy">
            <summary>
            Gets or sets the name of the user who saved the approval definition.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionViewModel.Saved">
            <summary>
            Gets or set the time which the approval definition was saved.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionViewModel.Status">
            <summary>
            Gets or sets the status of the approval definition.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalViewModel">
            <summary>
            A review request based on a <see cref="T:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalDefinitionViewModel"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalViewModel.Id">
            <summary>
            Id of the approval
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalViewModel.ActiveStepIndex">
            <summary>
            ActiveStepIndex of the approval
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalViewModel.CanApproveCurrentStep">
            <summary>
            Indicates if the logged in user can approve the active approval step
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalViewModel.StartDate">
            <summary>
            Start date of the approval step
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalViewModel.StartedBy">
            <summary>
            Gets or sets the username who started the approval
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalViewModel.TotalSteps">
            <summary>
            Gets or sets the total number of steps this approval contains
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.ApprovalViewModel.Status">
            <summary>
            Gets or sets the approval status.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.InheritedApprovalDefinitionViewModel">
            <summary>
            The information about the inherited approval definition.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.InheritedApprovalDefinitionViewModel.ContentLink">
            <summary>
            Gets or sets content link.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.InheritedApprovalDefinitionViewModel.Name">
            <summary>
            Gets or sets definition name.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Approvals.Internal.InheritedApprovalDefinitionViewModel.IsEnabled">
            <summary>
            Gets a value indicating whether the parent definition is enabled or not
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Capabilities.ContentCapabilitiesResolver.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Cms.Shell.UI.Rest.Capabilities.IContentCapability})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Capabilities.ContentCapabilitiesResolver"/> class.
            </summary>
            <param name="contentCapabilities">List of IContentCapability to be resolved</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Capabilities.ContentCapabilitiesResolver.GetContentCapabilities(EPiServer.Core.IContent)">
            <summary>
            Gets the content capabilities, make sure capabilities which highest SortOrder in a group will be chosen.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Capabilities.DeleteLanguageBranchCapability">
            <summary>
            Check if this content has capability to delete language branch
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.DeleteLanguageBranchCapability.SortOrder">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Capabilities.DynamicPropertiesCapability">
            <summary>
            Dynamic properties are only aviable on <see cref="T:EPiServer.Core.PageData"/>
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.DynamicPropertiesCapability.Key">
            <summary>
            Gets the key that identifies this capability.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Capabilities.DynamicPropertiesCapability.IsCapable(EPiServer.Core.IContent)">
            <summary>
            Determines if the given <see cref="T:EPiServer.Core.IContent"/> supports dynamic properties
            </summary>
            <param name="content">The <see cref="T:EPiServer.Core.IContent"/> to test</param>
            <returns><code>true</code> if <see cref="T:EPiServer.Core.ILocalizable"/> is implemented; otherwise <code>false</code></returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.DynamicPropertiesCapability.SortOrder">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Capabilities.GenerateThumbnailCapability">
            <summary>
            Determines if we can generate a thumbnail image from the <see cref="T:EPiServer.Core.IContent"/>
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.GenerateThumbnailCapability.Key">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.GenerateThumbnailCapability.SortOrder">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Capabilities.GenerateThumbnailCapability.IsCapable(EPiServer.Core.IContent)">
            <summary>
            Determines we can generate a thumbnail for the supplied <see cref="T:EPiServer.Core.IContent"/>
            </summary>
            <param name="content">The <see cref="T:EPiServer.Core.IContent"/> to test</param>
            <returns>
                <code>true</code> if <see cref="T:EPiServer.Core.IContent"/> is of type <see cref="T:EPiServer.Core.ImageData"/> and it has <see cref="P:EPiServer.Core.IBinaryStorable.BinaryData"/>; otherwise <code>false</code>
            </returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Capabilities.IContentCapability">
            <summary>
            Implementing objects will determine if a particular capability is available for the given <see cref="T:EPiServer.Core.IContent"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.IContentCapability.Key">
            <summary>
            Gets the key that identifies this capability.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Capabilities.IContentCapability.IsCapable(EPiServer.Core.IContent)">
            <summary>
            Determines if the capability is available for the given <see cref="T:EPiServer.Core.IContent"/>.
            </summary>
            <param name="content">The <see cref="T:EPiServer.Core.IContent"/> to test</param>
            <returns><code>true</code> if the capability is available; otherwise <code>false</code></returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.IContentCapability.SortOrder">
            <summary>
            Gets the sort order. Higher sort order capability with same name will be picked.
            </summary>
            <value>
            The sort order. By default, SortOrder will be 0. Override it with higher value.
            </value>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Capabilities.IsBlockCapability">
            <summary>
            Determines if <see cref="T:EPiServer.Core.IContent"/> is a <see cref="T:EPiServer.Core.BlockData"/>
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.IsBlockCapability.Key">
            <summary>
            Gets the key that identifies this capability.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Capabilities.IsBlockCapability.IsCapable(EPiServer.Core.IContent)">
            <summary>
            Determines if <see cref="T:EPiServer.Core.IContent"/> is a <see cref="T:EPiServer.Core.BlockData"/>
            </summary>
            <param name="content">The <see cref="T:EPiServer.Core.IContent"/> to test</param>
            <returns><code>true</code> if <see cref="T:EPiServer.Core.IContent"/> is of type <see cref="T:EPiServer.Core.BlockData"/>; otherwise <code>false</code></returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.IsBlockCapability.SortOrder">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Capabilities.IsContentFolderCapability">
            <summary>
            Determines if <see cref="T:EPiServer.Core.IContent"/> is a <see cref="T:EPiServer.Core.ContentFolder"/>
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.IsContentFolderCapability.Key">
            <summary>
            Gets the key that identifies this capability.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Capabilities.IsContentFolderCapability.IsCapable(EPiServer.Core.IContent)">
            <summary>
            Determines if <see cref="T:EPiServer.Core.IContent"/> is a <see cref="T:EPiServer.Core.ContentFolder"/> or any subclass like ContentAssetFolder
            </summary>
            <param name="content">The <see cref="T:EPiServer.Core.IContent"/> to test</param>
            <returns><code>true</code> if <see cref="T:EPiServer.Core.IContent"/> is of type <see cref="T:EPiServer.Core.ContentFolder"/>; otherwise <code>false</code></returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.IsContentFolderCapability.SortOrder">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Capabilities.IsLocalContentCapability">
            <summary>
            Determines if <see cref="T:EPiServer.Core.IContent"/> is in "For this page" folder
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Capabilities.IsLocalContentCapability.#ctor(EPiServer.IContentLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Capabilities.IsLocalContentCapability"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.IsLocalContentCapability.Key">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Capabilities.IsLocalContentCapability.IsCapable(EPiServer.Core.IContent)">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.IsLocalContentCapability.SortOrder">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Capabilities.IsPageCapability">
            <summary>
            Determines if <see cref="T:EPiServer.Core.IContent"/> is a <see cref="T:EPiServer.Core.PageData"/>
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.IsPageCapability.Key">
            <summary>
            Gets the key that identifies this capability.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Capabilities.IsPageCapability.IsCapable(EPiServer.Core.IContent)">
            <summary>
            Determines if <see cref="T:EPiServer.Core.IContent"/> is a <see cref="T:EPiServer.Core.ContentFolder"/>
            </summary>
            <param name="content">The <see cref="T:EPiServer.Core.IContent"/> to test</param>
            <returns><code>true</code> if <see cref="T:EPiServer.Core.IContent"/> is of type <see cref="T:EPiServer.Core.ContentFolder"/>; otherwise <code>false</code></returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.IsPageCapability.SortOrder">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Capabilities.LanguageDataCapability">
            <summary>
            Determines if <see cref="T:EPiServer.Core.ILocalizable"/> is implemented by the given <see cref="T:EPiServer.Core.IContent"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Capabilities.LanguageDataCapability.#ctor(EPiServer.Core.IContentProviderManager)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Capabilities.LanguageDataCapability"/> class.
            </summary>
            <param name="contentProviderManager">The content provider manager.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.LanguageDataCapability.Key">
            <summary>
            Gets the key that identifies this capability.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Capabilities.LanguageDataCapability.IsCapable(EPiServer.Core.IContent)">
            <summary>
            Determines if the given <see cref="T:EPiServer.Core.IContent"/> implements the <see cref="T:EPiServer.Core.ILocalizable"/> interface.
            </summary>
            <param name="content">The <see cref="T:EPiServer.Core.IContent"/> to test</param>
            <returns><code>true</code> if <see cref="T:EPiServer.Core.ILocalizable"/> is implemented; otherwise <code>false</code></returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.LanguageDataCapability.SortOrder">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Capabilities.LanguageSettingsCapability">
            <summary>
            Determines if the given <see cref="T:EPiServer.Core.IContent"/> should have possibility to set language settings.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Capabilities.LanguageSettingsCapability.#ctor(EPiServer.IContentRepository,EPiServer.Configuration.Settings)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Capabilities.LanguageSettingsCapability" /> class.
            </summary>
            <param name="contentRepository">The content repository.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.LanguageSettingsCapability.Key">
            <summary>
            Gets the key that identifies this capability.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Capabilities.LanguageSettingsCapability.IsCapable(EPiServer.Core.IContent)">
            <summary>
            Determines if the the given <see cref="T:EPiServer.Core.IContent"/> can set language settings.
            </summary>
            <param name="content">The <see cref="T:EPiServer.Core.IContent"/> to test</param>
            <returns><code>true</code> if the capability is available; otherwise <code>false</code></returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.LanguageSettingsCapability.SortOrder">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Capabilities.ResourceableCapability">
            <summary>
            Determines if <see cref="T:EPiServer.Core.IResourceable"/> is implemented by the given <see cref="T:EPiServer.Core.IContent"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.ResourceableCapability.Key">
            <summary>
            Gets the key that identifies this capability.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Capabilities.ResourceableCapability.IsCapable(EPiServer.Core.IContent)">
            <summary>
            Determines if the given <see cref="T:EPiServer.Core.IContent"/> implements the <see cref="T:EPiServer.Core.IResourceable"/> interface.
            </summary>
            <param name="content">The <see cref="T:EPiServer.Core.IContent"/> to test</param>
            <returns><code>true</code> if <see cref="T:EPiServer.Core.IResourceable"/> is implemented; otherwise <code>false</code></returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.ResourceableCapability.SortOrder">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Capabilities.SecurableCapability">
            <summary>
            Determines if <see cref="T:EPiServer.Security.IContentSecurable"/> is implemented by the given <see cref="T:EPiServer.Core.IContent"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Capabilities.SecurableCapability.#ctor(EPiServer.IContentRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Capabilities.SecurableCapability"/> class.
            </summary>
            <param name="contentRepository">The content repository.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.SecurableCapability.Key">
            <summary>
            Gets the key that identifies this capability.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Capabilities.SecurableCapability.IsCapable(EPiServer.Core.IContent)">
            <summary>
            Determines if the given <see cref="T:EPiServer.Core.IContent"/> implements the <see cref="T:EPiServer.Security.ISecurable"/> interface.
            </summary>
            <param name="content">The <see cref="T:EPiServer.Core.IContent"/> to test</param>
            <returns><code>true</code> if <see cref="T:EPiServer.Security.ISecurable"/> is implemented; otherwise <code>false</code></returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.SecurableCapability.SortOrder">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Capabilities.VersionableCapability">
            <summary>
            Determines if <see cref="T:EPiServer.Security.ISecurable"/> is implemented by the given <see cref="T:EPiServer.Core.IContent"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.VersionableCapability.Key">
            <summary>
            Gets the key that identifies this capability.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Capabilities.VersionableCapability.IsCapable(EPiServer.Core.IContent)">
            <summary>
            Determines if the given <see cref="T:EPiServer.Core.IContent"/> implements the <see cref="T:EPiServer.Security.ISecurable"/> interface.
            </summary>
            <param name="content">The <see cref="T:EPiServer.Core.IContent"/> to test</param>
            <returns><code>true</code> if <see cref="T:EPiServer.Security.ISecurable"/> is implemented; otherwise <code>false</code></returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Capabilities.VersionableCapability.SortOrder">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager">
            <summary>
            Broker object which is responsible for managing content change operations between stores and repositories
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.#ctor(EPiServer.IContentRepository,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.Validation.IValidationService,EPiServer.Web.PropertyResolver,EPiServer.Framework.Serialization.IObjectSerializerFactory,EPiServer.Cms.Shell.UI.Rest.IMetaDataResolver,EPiServer.DataAbstraction.IPropertyDefinitionRepository,EPiServer.Framework.Localization.LocalizationService,EPiServer.Core.ContentAssetHelper,EPiServer.Configuration.Settings,EPiServer.Web.ISiteDefinitionRepository,EPiServer.Security.PermissionService,EPiServer.Cms.Shell.Service.IContentService,EPiServer.Globalization.LanguageResolver,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Web.SiteDefinition},EPiServer.Core.IStatusTransitionEvaluator,EPiServer.Core.LanguageSelectorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager"/> class.
            </summary>
            <param name="contentRepository">The content repository used for getting and storing content instances.</param>
            <param name="contentTypeRepository">The content type repository.</param>
            <param name="validationService">The validation service.</param>
            <param name="propertyResolver">The property resolver.</param>
            <param name="serializerFactory">The serializer factory.</param>
            <param name="metaDataResolver">The meta data resolver.</param>
            <param name="propertyDefinitionRepository">The data property definition repository.</param>
            <param name="localizationService">The localization service.</param>
            <param name="contentAssetHelper">The content asset helper.</param>
            <param name="settings"></param>
            <param name="siteDefinitionRepository"></param>
            <param name="permissionService">The permission service</param>
            <param name="contentService">The ContentService instance</param>
            <param name="languageResolver">Language resolver to resolve preferred culture</param>
            <param name="currentSiteDefinition"></param>
            <param name="statusTransitionEvaluator"></param>
            <param name="languageSelectorFactory"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.#ctor(EPiServer.IContentRepository,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.Validation.IValidationService,System.Collections.Generic.IEnumerable{EPiServer.Cms.Shell.Workspace.Committers.ICommitter},EPiServer.Web.PropertyResolver,EPiServer.Framework.Serialization.IObjectSerializerFactory,EPiServer.Cms.Shell.UI.Rest.IMetaDataResolver,EPiServer.DataAbstraction.IPropertyDefinitionRepository,EPiServer.Framework.Localization.LocalizationService,EPiServer.Core.ContentAssetHelper,EPiServer.Configuration.Settings,EPiServer.Web.ISiteDefinitionRepository,EPiServer.Security.PermissionService,EPiServer.Cms.Shell.Service.IContentService,EPiServer.Globalization.LanguageResolver,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Web.SiteDefinition},EPiServer.Core.IStatusTransitionEvaluator,EPiServer.Core.LanguageSelectorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager"/> class.
            </summary>
            <param name="contentRepository">The content repository used for getting and storing content instances.</param>
            <param name="contentTypeRepository">The content type repository.</param>
            <param name="validationService">The validation service.</param>
            <param name="committers">The committers.</param>
            <param name="propertyResolver">The property resolver.</param>
            <param name="serializerFactory">The serializer factory.</param>
            <param name="metaDataResolver">The meta data resolver.</param>
            <param name="propertyDefinitionRepository">The data property definition repository.</param>
            <param name="localizationService">The localization service.</param>
            <param name="contentAssetHelper">The content asset helper.</param>
            <param name="settings"></param>
            <param name="siteDefinitionRepository"></param>
            <param name="permissionService">The permission service</param>
            <param name="contentService">The ConentService instance</param>
            <param name="languageResolver">Language resolver to resolve preferred culture</param>
            <param name="currentSiteDefinition"></param>
            <param name="languageSelectorFactory"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.Create(EPiServer.Core.ContentReference,System.Int32,System.Nullable{System.Int64},System.Boolean,EPiServer.Cms.Shell.UI.Rest.ILocalAssetNameGenerator,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new content with a name generator.
            </summary>
            <param name="parentLink">The parent link.</param>
            <param name="contentTypeId">The content type id.</param>
            <param name="resourceFolderId">The content folder id.</param>
            <param name="createAsLocalAsset">Indicate that the created content should be put in the parent content's local asset folder.</param>
            <param name="nameGenerator">The content name generator.</param>
            <param name="properties">The property values.</param>
            <returns><see cref="T:EPiServer.Core.ContentReference"/> to the new Content</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.Create(EPiServer.Core.ContentReference,System.Int32,System.Nullable{System.Int64},System.Boolean,EPiServer.Cms.Shell.UI.Rest.ILocalAssetNameGenerator,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Create a new content with a name generator.
            </summary>
            <param name="parentLink">The parent link.</param>
            <param name="contentTypeId">The content type id.</param>
            <param name="resourceFolderId">The content folder id.</param>
            <param name="createAsLocalAsset">Indicate that the created content should be put in the parent content's local asset folder.</param>
            <param name="nameGenerator">The content name generator.</param>
            <param name="properties">The property values.</param>
            <param name="autoPublish">Indicates if the content should be published automatically when created if the user has publish rights.</param>
            <returns><see cref="T:EPiServer.Core.ContentReference"/> to the new Content</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.Create(EPiServer.Core.ContentReference,System.Int32,System.Nullable{System.Int64},System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new content.
            </summary>
            <param name="parentLink">The parent link.</param>
            <param name="contentTypeId">The content type id.</param>
            <param name="resourceFolderId">The content folder id.</param>
            <param name="createAsLocalAsset">Indicate that the created content should be put in the parent content's local asset folder.</param>
            <param name="name">The name of the content.</param>
            <param name="properties">The property values.</param>
            <returns><see cref="T:EPiServer.Core.ContentReference"/> to the new Content</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.Create(EPiServer.Core.ContentReference,System.Int32,System.Nullable{System.Int64},System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Creates a new content with the ability to auto publish content.
            </summary>
            <param name="parentLink">The parent link.</param>
            <param name="contentTypeId">The content type id.</param>
            <param name="resourceFolderId">The content folder id.</param>
            <param name="createAsLocalAsset">Indicate that the created content should be put in the parent content's local asset folder.</param>
            <param name="name">The name of the content.</param>
            <param name="properties">The property values.</param>
            <param name="autoPublish">Indicates if the content should be published automatically when created if the user has publish rights.</param>
            <returns><see cref="T:EPiServer.Core.ContentReference"/> to the new Content</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.CreateContent(EPiServer.Core.ContentReference,System.Int32,System.Nullable{System.Int64},System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Creates a new content with the ability to auto publish content.
            </summary>
            <param name="parentLink">The parent link.</param>
            <param name="contentTypeId">The content type id.</param>
            <param name="resourceFolderId">The content folder id.</param>
            <param name="createAsLocalAsset">Indicate that the created content should be put in the parent content's local asset folder.</param>
            <param name="name">The name of the content.</param>
            <param name="properties">The property values.</param>
            <param name="autoPublish">Indicates if the content should be published automatically when created if the user has publish rights.</param>
            <returns><see cref="T:EPiServer.Core.ContentReference"/> to the new Content</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.CreateContent(EPiServer.Core.ContentReference,System.Int32,System.Nullable{System.Int64},System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},EPiServer.DataAccess.SaveAction)">
            <summary>
            Creates a new content.
            </summary>
            <param name="parentLink">The parent link.</param>
            <param name="contentTypeId">The content type id.</param>
            <param name="resourceFolderId">The content folder id.</param>
            <param name="createAsLocalAsset">Indicate that the created content should be put in the parent content's local asset folder.</param>
            <param name="name">The name of the content.</param>
            <param name="properties">The property values.</param>
            <param name="saveAction">The <see cref="T:EPiServer.DataAccess.SaveAction"/> to save content</param>
            <returns>
              <see cref="T:EPiServer.Core.ContentReference" /> to the new Content
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.GetOrCreateContentAssetsFolder(EPiServer.Core.ContentReference)">
            <summary>
            Creates a new content assets folder
            </summary>
            <param name="parentLink">The parent link.</param>
            <returns><see cref="T:EPiServer.Core.ContentReference"/> to the new Content</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.CreateLanguageBranch(EPiServer.Core.ContentReference,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new language branch based on the current language.
            </summary>
            <param name="contentReference">The content reference.</param>
            <param name="name">The name of the content.</param>
            <param name="languageBranch">The language branch to create the content for.</param>
            <param name="properties">The property values.</param>
            <returns>ContentReference to the new Content</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.Copy(EPiServer.Core.IContent,EPiServer.Core.IContent,System.Boolean)">
            <summary>
            Copies the content to specified destination.
            </summary>
            <param name="source">The content.</param>
            <param name="destination">The destination.</param>
            <param name="createAsLocalAsset">Indicate that the created content should be put in the parent content's local asset folder.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.Move(EPiServer.Core.IContent,EPiServer.Core.IContent,System.Boolean)">
            <summary>
            Moves the content to specified destination.
            </summary>
            <param name="source">The content.</param>
            <param name="destination">The destination.</param>
            <param name="createAsLocalAsset">Indicate that the created content should be put in the parent content's local asset folder.</param>
            <returns>ContentReference of moved content. When moving between ContentProviders it can be new value</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.ValidateUniqueNameChangeAndThrow(EPiServer.Core.IContent,EPiServer.Core.ContentReference)">
            <summary>
            Validates the name of the content and throw an exception if it does not validate
            </summary>
            <param name="instance">The content instance to validate.</param>
            <param name="parentLink">The parent content.</param>
            <exception cref="T:EPiServer.Core.EPiServerException"></exception>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.ValidateUniqueNameChange(EPiServer.Core.IContent,EPiServer.Core.ContentReference,System.Boolean)">
            <summary>
            Validates the name change.
            </summary>
            <param name="instance">The content instance to validate.</param>
            <param name="parentLink">The parent content.</param>
            <param name="skipSameContent">Indicates whether you want to perform check on the given content or not. Default is false.</param>
            <returns>The validation error if any, otherwise null</returns>
            <remarks>
            This is implemented here because of some performance problems that we have if we do a GetChildren inside a IValidate implementation.
            By implementing it here we guarantee that the validation does not occur when we e.g. import data in the system.
            </remarks>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.EnsureUniqueName(EPiServer.Core.IContent,System.Type@)">
            <summary>
            Returns true if the type requires a unique name on the same level
            </summary>
            <param name="content">The content.</param>
            <param name="baseType">The base type to use when checking for duplicate items.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.SetNameAndLanguageSpecificProperties(EPiServer.Core.IContent,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Sets the properties.
            </summary>
            <param name="content">The content.</param>
            <param name="name">The name.</param>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.InitializeNameAndProperties(EPiServer.Core.IContent,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes the content with name and properties.
            </summary>
            <param name="content">The content.</param>
            <param name="name">The name.</param>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.InitializePropertyValue(EPiServer.Core.IContentData,System.String,System.Object)">
            <summary>
            Initializes the property with specified value.
            Existing property value is not overriden by specified value if existing property value is inherited or set by default.
            </summary>
            <param name="contentData">The content data.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">The property value.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.UpdateContentProperties(EPiServer.Core.ContentReference,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Updates the specified properties to the content matching the specified content reference.
            </summary>
            <param name="contentReference">The content reference to the content to be updated.</param>
            <param name="properties">The properties to update</param>
            <returns>A <see cref="T:EPiServer.Cms.Shell.UI.Rest.PropertiesUpdateResult"/> with the results of the update.</returns>
            <remarks>
            It will use the following <see cref="T:EPiServer.DataAccess.SaveAction">save action</see>: SaveAction.Save | SaveAction.SkipValidation
            </remarks>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.UpdateContentProperties(EPiServer.Core.ContentReference,System.Collections.Generic.IDictionary{System.String,System.String},EPiServer.DataAccess.SaveAction)">
            <summary>
            Updates the specified properties to the content matching the specified content reference.
            </summary>
            <param name="contentReference">The content reference to the content to be updated.</param>
            <param name="properties">The properties.</param>
            <param name="saveAction">The save action to be used when updating the repository.</param>
            <returns>A <see cref="T:EPiServer.Cms.Shell.UI.Rest.PropertiesUpdateResult"/> with the results of the update.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.SkipSaveOnError(EPiServer.Core.IContent)">
            <summary>
            Determines if we shouldn't save when there is a validation error
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.Commit(EPiServer.Core.ContentReference,EPiServer.DataAccess.SaveAction)">
            <summary>
            Commits the specified change.
            </summary>
            <param name="contentReference">The content reference.</param>
            <param name="action">The desired <see cref="T:EPiServer.DataAccess.SaveAction"/>.</param>
            <returns>
            A <see cref="T:EPiServer.Cms.Shell.Workspace.Committers.CommitResult"/> object with information about the results of the commit.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.Deserialize(System.String,System.Type)">
            <summary>
            Deserializes the specified json value.
            </summary>
            <param name="value">The value to deserialize.</param>
            <param name="type">The type of value to deserialize to.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.TranslateAncestors(EPiServer.Core.IContent)">
            <summary>
            Translates the ancestor of the content IF the content is or inherits from <see cref="T:EPiServer.Core.BlockData"/>.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.GetFilteredAncestors(EPiServer.Core.IContent,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Get all filtered ancestors of the given translated content
            There ancestors need qualified following requirements:
                is not root
                is not root folder
                is not translated in the given translated content language branch
                inhertis from a type in the allowedTypes array
            </summary>
            <param name="content">The content.</param>
            <param name="allowedTypes">The allowed types.</param>
            <returns>An enumerable of the matching ancestor</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.IsUntranslatedContent(EPiServer.Core.IContent)">
            <summary>
            Determines whether the specified content is translated.
            </summary>
            <param name="content">The content</param>
            <returns>
                <c>true</c> if the specified content is translated; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentChangeManager.IsUntranslatedAncestor(EPiServer.Core.IContent,EPiServer.Core.IContent)">
            <summary>
                Determines whether the specified ancestor content is translated.
            </summary>
            <param name="childContent">The child content</param>
            <param name="ancestorContent">The ancestor content</param>
            <returns>
                <c>true</c> if the specified ancestor content is translated; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentLanguageInformation.IsTranslationNeeded">
            <summary>
            Gets or sets a value indicating wheter the content exists for the preferred language
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentLanguageInformation.Language">
            <summary>
            Gets or sets the language that was selected for the request
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentLanguageInformation.IsPreferredLanguageAvailable">
            <summary>
            Gets or sets a value indicating whether the preferred language is set as available for the current content.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentLanguageInformation.PreferredLanguage">
            <summary>
            Gets or sets the preferred language.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentLanguageInformation.Reason">
            <summary>
            Gets or sets the reason why this language has been selected
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentLanguageInformation.Warning">
            <summary>
            Gets or sets a warning describing why this language has been selected.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentLanguageInformation.HasTranslationAccess">
            <summary>
            Gets or sets a value indicating whether the current user has enough access to create a translation for the current page to the preferred culture.
            </summary>
            <remarks>
            Will check that the current user has edit access on the preferred language branch, and create access on the content.
            </remarks>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentLanguageInformation.GetUrlLanguage">
            <summary>
            Gets the the language most suited for URL creation.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentActivitiesQueryBase">
            <summary>
            Abstract base class for queries relating to content activities (ready to publish, not ready, rejected...)
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentActivitiesQueryBase.#ctor(EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper,EPiServer.IContentRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentActivitiesQueryBase"/> class.
            </summary>
            <param name="queryHelper">Helper used for filter, sort and range.</param>
            <param name="contentRepository">The content repository.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentActivitiesQueryBase.Name">
            <inheritdoc/>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentActivitiesQueryBase.Rank">
            <inheritdoc/>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentActivitiesQueryBase.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentActivitiesQueryBase.PlugInAreas">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentActivitiesQueryBase.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentActivitiesQueryBase.VersionSpecific">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentActivitiesQueryBase.CanHandleQuery(EPiServer.Shell.Rest.IQueryParameters)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentActivitiesQueryBase.ExecuteQuery(EPiServer.Shell.Rest.IQueryParameters)">
            <summary>
            Gets the content activities by using the implementing class' GetActivities method
            </summary>
            <inheritdoc select="param|returns" />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentActivitiesQueryBase.Sort(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryParameters)">
            <summary>
            Performs sorting using the registered implementation of the
            <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper"/> interface.
            </summary>
            <param name="items">The items to sort.</param>
            <param name="parameters">Parameters containing the <see cref="!:SortColumn"/> instances
            describing how to sort the collection.</param>
            <returns>The sorted collection</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentActivitiesQueryBase.GetActivities(System.Int32,System.Int32,System.Security.Principal.IPrincipal,System.String)">
            <summary>
            Should return the unfiltered items of the query as <see cref="T:EPiServer.DataAbstraction.ContentVersion"/>  items
            </summary>
            <param name="offset">The index (zero-based) of the first item to return.</param>
            <param name="count">The number of items to return.</param>
            <param name="user">Principal to get activity items for.</param>
            <param name="language">The preferred language for the items.</param>
            <returns>The matching activities as <see cref="T:EPiServer.DataAbstraction.ContentVersion"/> items.</returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentActivitiesQueryBase.RequiredAccess">
            <summary>
            The required access for the user to list pages from this query is Edit
            is Publish
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentActivitiesQueryBase`1">
            <summary>
            Abstract base class for simplify defining classes with categorized queries
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryBase">
            <summary>
            A base class for content queries which can apply default filters, paging
            and content range.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryBase.#ctor(EPiServer.IContentRepository,EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper)">
            <summary>
            Constructor for the base class which accepts the content filter creator
            to use in the implementation when executing CreateFilterInstance
            </summary>
            <param name="contentRepository">The content repository.</param>
            <param name="queryHelper">Helper used for filter, sort and range.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryBase.Name">
            <inheritdoc/>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryBase.Rank">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryBase.CanHandleQuery(EPiServer.Shell.Rest.IQueryParameters)">
            <inheritdoc/>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryBase.ExecuteQuery(EPiServer.Shell.Rest.IQueryParameters)">
            <summary>
            Default implementation which calls the GetContent method implemented in the subclass and then applies
            the filters. To use this default implementation just implement GetContent. Override this method to
            apply your own filtering, sorting and raning (for example if you want to do sorting and paing
            in a database call to avoid querying for items that end up not being returned.
            </summary>
            <inheritdoc select="param|returns" />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryBase.GetContent(EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryParameters)">
            <summary>
            Called by ExecuteQuery prior to applying filters.
            </summary>
            <param name="parameters">The parameters from the original request.</param>
            <returns>The unfiltered, unsorted and unpaged content which is then handled by ExecuteQuery.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryBase.GetChildrenByType(System.Type,EPiServer.Core.ContentReference,EPiServer.Core.ILanguageSelector)">
            <summary>
            Gets children of a specific type.
            </summary>
            <param name="type">The type.</param>
            <param name="parentLink">The parent link.</param>
            <param name="selector">The language selector.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryBase.Filter(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryParameters)">
            <summary>
            Performs filtering for language, content class, read access and waste basket using the
            registered implementation of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper"/> interface.
            </summary>
            <param name="items">The items to filter.</param>
            <param name="parameters">Parameters used by the filters.</param>
            <returns>The filtered items.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryBase.Sort(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryParameters)">
            <summary>
            Performs sorting using the registered implementation of the
            <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper"/> interface.
            </summary>
            <param name="items">The items to sort.</param>
            <param name="parameters">Parameters containing the <see cref="T:EPiServer.Shell.Services.Rest.SortColumn"/> instances
            describing how to sort the collection.</param>
            <returns>The sorted collection</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryBase.Range(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryParameters)">
            <summary>
            Performs ranging using the registered implementation of the
            <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper"/> interface.
            </summary>
            <param name="items">The full item collection to get the range from.</param>
            <param name="parameters">Parameters containing the <see cref="T:EPiServer.Shell.Services.Rest.ItemRange"/>
            describing the requested range.</param>
            <returns>A <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentRange"/> instance containing the items and the resulting range.</returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryBase.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryBase.PlugInAreas">
            <inheritdoc/>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryBase.SortOrder">
            <inheritdoc/>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryBase.VersionSpecific">
            <inheritdoc/>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryBase`1">
            <summary>
            Abstract base class for simplify defining classes with categorized queries
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryParameters">
            <summary>
            Class which carries parameters to a content query.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryParameters.CurrentPrincipal">
            <summary>
            Gets or sets the current principal.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryParameters.PreferredCulture">
            <summary>
            Gets or sets the preferred culture in which to load items.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentRange">
            <summary>
            Container for a <see cref="T:EPiServer.Core.IContent"/> collection and a <see cref="T:EPiServer.Shell.Services.Rest.ItemRange"/> instance
            describing how the collection was selected from the corresponding total collection.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentRange.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},EPiServer.Shell.Services.Rest.ItemRange)">
            <summary>
            Initializes a new instance and sets the items collection and the resulting range.
            </summary>
            <param name="items">The items collection</param>
            <param name="range">The resulting range</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper">
            <summary>
            Wrapper class used to give the sorter additional fields to sort by
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper.#ctor(EPiServer.Core.IContent,EPiServer.Shell.UIDescriptorRegistry)">
            <summary>
            Create a new wrapper
            </summary>
            <param name="content">The content to wrap</param>
            <param name="uiDescriptorRegistry"></param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper.Content">
            <summary>
            The wrapped content
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper.Name">
            <summary>
            Name from wrapped Content
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper.ContentLink">
            <summary>
            Content from wrapped Content
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper.ParentLink">
            <summary>
            ParentLink from wrapped Content
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper.ContentGuid">
            <summary>
            ContentGuid from wrapped Content
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper.ContentTypeID">
            <summary>
            ContentTypeID from wrapped Content
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper.IsDeleted">
            <summary>
            IsDeleted from wrapped Content
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper.TypeIdentifier">
            <summary>
            Gets the content type identifier.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper.Property">
            <summary>
            Property from wrapped Content
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper.Created">
            <summary>
            Created from wrapped Content if it is IChangeTrackable, otherwise default
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper.CreatedBy">
            <summary>
            CreatedBy from wrapped Content if it is IChangeTrackable, otherwise default
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper.Changed">
            <summary>
            Changed from wrapped Content if it is IChangeTrackable, otherwise default
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper.SetChangedOnPublish">
            <summary>
            SetChangedOnPublish from wrapped Content if it is IChangeTrackable, otherwise default
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper.ChangedBy">
            <summary>
            ChangedBy from wrapped Content if it is IChangeTrackable, otherwise default
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper.Saved">
            <summary>
            Saved from wrapped Content if it is IChangeTrackable, otherwise default
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper.DeletedBy">
            <summary>
            DeletedBy from wrapped Content if it is IChangeTrackable, otherwise default
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper.Deleted">
            <summary>
            Deleted from wrapped Content if it is IChangeTrackable, otherwise default
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper.Status">
            <summary>
            Status from wrapped Content if it is IVersionable, otherwise default
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper.IsPendingPublish">
            <summary>
            IsPendingPublish from wrapped Content if it is IVersionable, otherwise default
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper.StartPublish">
            <summary>
            StartPublish from wrapped Content if it is IVersionable, otherwise default
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentSortWrapper.StopPublish">
            <summary>
            StopPublish from wrapped Content if it is IVersionable, otherwise default
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.GetChildrenQuery">
            <summary>
            Gets the children of a node.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.GetChildrenQuery.#ctor(EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper,EPiServer.IContentRepository,EPiServer.Core.LanguageSelectorFactory,EPiServer.Shell.Web.Internal.UserInterfaceOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.GetChildrenQuery"/> class.
            </summary>
            <param name="queryHelper">Helper used for filter, sort and range.</param>
            <param name="contentRepository">The content repository.</param>
            <param name="languageSelectorFactory">The language selector factory.</param>
            <param name="userInterfaceOptions">User interface options.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.GetChildrenQuery.#ctor(EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper,EPiServer.IContentRepository,EPiServer.Core.LanguageSelectorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.GetChildrenQuery"/> class.
            </summary>
            <param name="queryHelper">Helper used for filter, sort and range.</param>
            <param name="contentRepository">The content repository.</param>
            <param name="languageSelectorFactory">The language selector factory.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.GetChildrenQuery.Name">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.GetChildrenQuery.GetContent(EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryParameters)">
            <summary>
            Gets the children of the specified parent
            </summary>
            <param name="parameters">Parameters to the query. This method only uses the AllLanguages parameter.</param>
            <returns>The children</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.GetChildrenQuery.Filter(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryParameters)">
            <summary>
            Override which filters by the deletedBy query parameter before calling the
            base class Filters.
            </summary>
            <inheritdoc select="param|returns" />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper.FilterTypeIdentifier(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Exclude content which does not match the any of the supplied type identifiers.
            </summary>
            <param name="items">The items to filter.</param>
            <param name="typeIdentifiers">The type identifiers to filter by. Null or empty to skip filtering.</param>
            <returns>Items after filtering.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper.FilterDeletedBy(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},System.String)">
            <summary>
            Exclude content which is not deleted or was deleted by a user different from the supplied user.
            </summary>
            <param name="items">The items to filter.</param>
            <param name="deletedBy">User name to match. Null or empty to skip filtering.</param>
            <returns>Items after filtering.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper.FilterLanguage(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},System.Boolean)">
            <summary>
            Exclude content which is not available for the preferred language.
            Includes content which is returned by fallback or replacement.
            </summary>
            <param name="items">The items to filter.</param>
            <param name="allLanguages">True to include content for all languages,
            regardless of the preferred language.</param>
            <returns>Items after filtering.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper.FilterAccess(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},EPiServer.Security.AccessLevel)">
            <summary>
            Exclude content the user does not have sufficient access to.
            </summary>
            <param name="items">The items to filter.</param>
            <param name="requiredAccess">Required access level.</param>
            <returns>Items after filtering.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper.FilterWasteBasket(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent})">
            <summary>
            Exclude content that are waste baskets
            </summary>
            <param name="items">The items to filter.</param>
            <returns>Items after filtering.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper.FilterNewerPublishedVersion(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},System.Nullable{System.DateTime})">
            <summary>
            Exclude content that has a newer published version.
            </summary>
            <param name="items">The items to filter.</param>
            <param name="requestTime">The time the request was made, to use as input to the
            published filter.</param>
            <returns>Items after filtering.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper.Sort(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},System.Collections.Generic.IEnumerable{EPiServer.Shell.Services.Rest.SortColumn})">
            <summary>
            Sort according to the supplied sorting parameters
            </summary>
            <param name="items">The items to sort.</param>
            <param name="sortColumns">A collection of <see cref="T:EPiServer.Shell.Services.Rest.SortColumn"/> instances
            describing how to sort the collection. Null or empty to skip sorting.</param>
            <returns>The sorted items.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper.ApplyRange(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},EPiServer.Shell.Services.Rest.ItemRange)">
            <summary>
            Applies the specified range (start, end) and returns the items
            in the range together with the actual range (start, end, total).
            </summary>
            <param name="items">The full item collection to get the range from.</param>
            <param name="requestedRange">The requested range with start and/or end set.
            Null or not defined (neither start nor end set) to return the full range.</param>
            <returns>A <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentRange"/> instance containing the items and the resulting range.</returns>
            <remarks>Checks the IsDefined property of the <see cref="T:EPiServer.Shell.Services.Rest.ItemRange" /> instance as well as null.</remarks>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryProvider">
            <summary>
            Helps finding a <see cref="!:IContentQuery"/> which can execute the query.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesNotReadyQuery">
            <summary>
            Returns all content belonging to the user that is in state not ready (checked in).
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesNotReadyQuery.#ctor(EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper,EPiServer.IContentRepository,EPiServer.Core.IContentVersionRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesNotReadyQuery"/> class.
            </summary>
            <param name="queryHelper">Helper used for filter, sort and range.</param>
            <param name="contentRepository">The content repository.</param>
            <param name="contentVersionRepository">The content version repository.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesNotReadyQuery.Name">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesNotReadyQuery.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesNotReadyQuery.PlugInAreas">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesNotReadyQuery.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesNotReadyQuery.RequestTime">
            <summary>
            Gets or sets the request time.
            </summary>
            <remarks>
            At runtime this resolves to <see cref="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesNotReadyQuery.RequestTime"/>.
            However this can be set e.g. from tests to avoid dependency to set up context.
            </remarks>
            <value>The request time.</value>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesNotReadyQuery.GetActivities(System.Int32,System.Int32,System.Security.Principal.IPrincipal,System.String)">
            <summary>
            Gets users not ready (checked in) pages from the database.
            </summary>
            <inheritdoc select="param|returns" />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesNotReadyQuery.Filter(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryParameters)">
            <summary>
            Performs filtering as the base class but also filters out pages that have newer published versions.
            </summary>
            <inheritdoc select="param|returns" />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesReadyToPublishQuery">
            <summary>
            Returns all content that is ready to publish that the user has sufficient
            access rights to publish.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesReadyToPublishQuery.#ctor(EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper,EPiServer.IContentRepository,EPiServer.Core.IContentVersionRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesReadyToPublishQuery"/> class.
            </summary>
            <param name="queryHelper">Helper used for filter, sort and range.</param>
            <param name="contentRepository">The content repository.</param>
            /// <param name="contentVersionRepository">The content version repository</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesReadyToPublishQuery.Name">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesReadyToPublishQuery.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesReadyToPublishQuery.PlugInAreas">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesReadyToPublishQuery.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesReadyToPublishQuery.RequiredAccess">
            <summary>
            The required access for the user to list pages from this query
            is Publish.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesReadyToPublishQuery.GetActivities(System.Int32,System.Int32,System.Security.Principal.IPrincipal,System.String)">
            <summary>
            Gets ready to publish pages from the database.
            </summary>
            <inheritdoc select="param|returns" />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesRejectedQuery">
            <summary>
            Returns all content belonging to the user that is in state rejected.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesRejectedQuery.#ctor(EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper,EPiServer.IContentRepository,EPiServer.Core.IContentVersionRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesRejectedQuery"/> class.
            </summary>
            <param name="queryHelper">Helper used for filter, sort and range.</param>
            <param name="contentRepository">The content repository.</param>
            <param name="contentVersionRepository">The personal activity db.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesRejectedQuery.Name">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesRejectedQuery.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesRejectedQuery.PlugInAreas">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesRejectedQuery.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesRejectedQuery.RequestTime">
            <summary>
            Gets or sets the request time.
            </summary>
            <remarks>
            At runtime this resolves to <see cref="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesRejectedQuery.RequestTime"/>.
            However this can be set e.g. from tests to avoid dependency to set up context.
            </remarks>
            <value>The request time.</value>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesRejectedQuery.GetActivities(System.Int32,System.Int32,System.Security.Principal.IPrincipal,System.String)">
            <summary>
            Gets users rejected pages from the database.
            </summary>
            <inheritdoc select="param|returns" />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentActivitiesRejectedQuery.Filter(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryParameters)">
            <summary>
            Performs filtering as the base class but also filters out pages that have newer published versions.
            </summary>
            <inheritdoc select="param|returns" />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentQueryProvider">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentQueryProvider.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Shell.ContentQuery.IContentQuery})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentQueryProvider"/> class.
            </summary>
            <param name="queries">The collection of queries.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentQueryProvider.GetQuery(System.String,EPiServer.Shell.Rest.IQueryParameters)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentRestorePointQuery">
            <summary>
            A content query that returns the restore point of an content item.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentRestorePointQuery.#ctor(EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper,EPiServer.IContentRepository,EPiServer.Core.IContentProviderManager,EPiServer.DataAbstraction.IParentRestoreRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentRestorePointQuery"/> class.
            </summary>
            <param name="queryHelper">Helper used for filter, sort and range.</param>
            <param name="parentRestoreRepository">The parent restore repository.</param>
            <param name="contentProviderManager">The content provider manager.</param>
            <param name="contentRepository">The content repository.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentRestorePointQuery.Name">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentRestorePointQuery.GetContent(EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryParameters)">
            <summary>
            Gets the restore point for the specified content.
            </summary>
            <param name="parameters">Unused by this method.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the restore point, or empty list if not found.</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentSearchQuery">
            <summary>
            Queries content based on free text.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentSearchQuery.#ctor(EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper,EPiServer.IContentRepository,EPiServer.Shell.Search.SearchProvidersManager,EPiServer.Core.LanguageSelectorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentSearchQuery"/> class.
            </summary>
            <param name="queryHelper">Helper used for filter, sort and range.</param>
            <param name="contentRepository">The content repository.</param>
            <param name="searchProvidersManager">The search providers manager.</param>
            <param name="languageSelectorFactory">The language selector factory.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentSearchQuery.Name">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentSearchQuery.GetContent(EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryParameters)">
            <summary>
            Textual search for content.
            </summary>
            <param name="parameters">Parameters to the query. This method uses the AllLanguages parameter
            as well as queryText, contentSearchAreas and matchProvider in the AllParameters collection.</param>
            <returns>
            	<see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the search results.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ContentSearchQuery.Filter(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryParameters)">
            <summary>
            Override which filters by the deletedBy query parameter before calling the
            base class Filters.
            </summary>
            <inheritdoc select="param|returns" />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.DefaultContentQueryHelper">
            <summary>
            A default implementation of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper"/> interface.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.DefaultContentQueryHelper.#ctor(EPiServer.IContentRepository,EPiServer.Core.IContentProviderManager,EPiServer.Cms.Shell.UI.Rest.Internal.MissingContentLanguageInformationResolver,EPiServer.Shell.UIDescriptorRegistry,EPiServer.Globalization.LanguageResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.DefaultContentQueryHelper"/> class.
            </summary>
            <param name="contentRepository">The content repository.</param>
            <param name="contentProviderManager">The content provider manager.</param>
            <param name="contentLanguageInformationResolver">The content language information resolver.</param>
            <param name="uiDescriptorRegistry"></param>
            <param name="languageResolver"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.DefaultContentQueryHelper.FilterTypeIdentifier(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.DefaultContentQueryHelper.FilterDeletedBy(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},System.String)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.DefaultContentQueryHelper.FilterLanguage(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.DefaultContentQueryHelper.FilterAccess(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},EPiServer.Security.AccessLevel)">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.DefaultContentQueryHelper.FilterWasteBasket(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.DefaultContentQueryHelper.FilterNewerPublishedVersion(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.DefaultContentQueryHelper.Sort(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},System.Collections.Generic.IEnumerable{EPiServer.Shell.Services.Rest.SortColumn})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.DefaultContentQueryHelper.ApplyRange(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},EPiServer.Shell.Services.Rest.ItemRange)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.EditingInProgressQuery">
            <summary>
            Returns all content that are marked as in use by current user.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.EditingInProgressQuery.#ctor(EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper,EPiServer.IContentRepository,EPiServer.Shell.Notification.IInUseNotificationRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.EditingInProgressQuery"/> class.
            </summary>
            <param name="queryHelper">Helper used for filter, sort and range.</param>
            <param name="inUseNotificationRepository">The in use notification repository.</param>
            <param name="contentRepository">The content repository.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.EditingInProgressQuery.Name">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.EditingInProgressQuery.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.EditingInProgressQuery.PlugInAreas">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.EditingInProgressQuery.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.EditingInProgressQuery.VersionSpecific">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.EditingInProgressQuery.GetContent(EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryParameters)">
            <summary>
            Gets content that is marked as in use by the current user.
            </summary>
            <param name="parameters">Unused by this method.</param>
            <returns>
            	<see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the content that is marked as in use by the current user.
            </returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.FolderChildrenEvaluator">
            <summary>
            ContentFolder evaluator. Used to determine if paging can be applied to a given ContentFolder instance.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.FolderChildrenEvaluator.#ctor(EPiServer.Core.IContentProviderManager,EPiServer.Core.LanguageSelectorFactory,EPiServer.IContentRepository,EPiServer.Shell.Web.Internal.UserInterfaceOptions)">
            <summary>
            Creates a new instance of <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.FolderChildrenEvaluator"/>
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.FolderChildrenEvaluator.TryToApplyPaging(EPiServer.Core.ContentReference,System.Type,System.Int32@)">
            <summary>
            Tries to determine the amount of children of a requested type
            </summary>
            <param name="reference">Parent reference></param>
            <param name="requestedType">Requested content type</param>
            <param name="count">Out parameter with the children count</param>
            <returns>True if the parent was a ContentFolder and it had more than <see cref="!:MaxContentFolderChildrenWithoutPaging"/> items</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.GetBlockRootChildrenQuery">
            <summary>
            Query handling the sub roots needed for the block picker
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.GetBlockRootChildrenQuery.#ctor(EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper,EPiServer.IContentRepository,EPiServer.Web.ISiteDefinitionRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.GetBlockRootChildrenQuery" /> class.
            </summary>
            <param name="queryHelper">The query helper.</param>
            <param name="contentRepository">The content repository.</param>
            <param name="siteDefinitionRepository">The site definition repository.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.GetBlockRootChildrenQuery.GetContent(EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryParameters)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.GetContentByPermanentLinkQuery">
            <summary>
            Get the content by a permanent link.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.GetContentByPermanentLinkQuery.#ctor(EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper,EPiServer.IContentRepository,EPiServer.Web.Routing.UrlResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.GetContentByPermanentLinkQuery" /> class.
            </summary>
            <param name="queryHelper">Helper used for filter, sort and range.</param>
            <param name="contentRepository">The content repository.</param>
            <param name="urlResolver">UrlResolver used to resolve the link.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.GetContentByPermanentLinkQuery.Name">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.GetContentByPermanentLinkQuery.GetContent(EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryParameters)">
            <summary>
            Gets the enumerable content of the specified permanent link.
            </summary>
            <param name="parameters">Parameters to the query. This method only uses the AllParameters parameter.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.GetPagedChildrenQuery">
            <summary>
                Gets the children of a node.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.GetPagedChildrenQuery.Name">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.GetPagedChildrenQuery.ExecuteQuery(EPiServer.Shell.Rest.IQueryParameters)">
            <summary>
                Gets the children of the specified parent
            </summary>
            <param name="parameters">Parameters to the query. This method only uses the AllLanguages parameter.</param>
            <returns>The children</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.GetPagedChildrenQuery.ExecuteOriginalGetChildrenQuery(EPiServer.Shell.Rest.IQueryParameters)">
            <summary>
                Find the GetChildrenQuery with the highest Rank and execute it with original parameters
            </summary>
            <param name="parameters">Original query parameters</param>
            <returns>The children</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.RangeLoader">
            <summary>
            Utility class that allows to get ranges of Content items from an uncontrolled data loading function
            that may cause some items to be filtered out due to lacking access rights or other conditions
            The RangeLoader in that case will try to fetch the next page and load remaining items in order to fulfill its contract
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.RangeLoader.GetRange(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ChildrenResult})">
            <summary>
            Gets a range of content items
            </summary>
            <param name="startIndex">Start from index</param>
            <param name="numberOfItems">Number of items to load</param>
            <param name="dataLoadingFunc">Data loading function that takes two parameters and returns <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.ChildrenResult"/> as a result</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.RecentlyChangedQuery">
            <summary>
            Returns all content that are marked as in use by current user.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.RecentlyChangedQuery.#ctor(EPiServer.IContentRepository,EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper,EPiServer.DataAbstraction.Activities.IActivityQueryService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.RecentlyChangedQuery"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.RecentlyChangedQuery.Name">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.RecentlyChangedQuery.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.RecentlyChangedQuery.PlugInAreas">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.RecentlyChangedQuery.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.RecentlyChangedQuery.VersionSpecific">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.RecentlyChangedQuery.GetContent(EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryParameters)">
            <summary>
            Gets content that is marked as in use by the current user.
            </summary>
            <param name="parameters">Unused by this method.</param>
            <returns>
            	<see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the content that is marked as in use by the current user.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.RecentlyChangedQuery.AppendChangedContentFromActivites(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.Activities.Activity},System.Collections.Generic.IDictionary{EPiServer.Core.ContentReference,EPiServer.Core.IContent},System.String)">
            <summary>
            Appends the changed content from the change log.
            </summary>
            <param name="activities">The changed content.</param>
            <param name="results">The results.</param>
            <param name="language">The language.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.RecentlyChangedQuery.IsActivityRelevant(EPiServer.DataAbstraction.Activities.ContentActivity)">
            <summary>
            Content changes and status changes (but not deletions with empty trash).
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.RecentlyChangedQuery.IsContentRelevant(EPiServer.Core.IContent)">
            <summary>
            Folders and content in trash should not be part of the recently changed list.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.SearchDeletedContentQuery">
            <summary>
            Query for deleted items only
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.SearchDeletedContentQuery.#ctor(EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper,EPiServer.IContentRepository,EPiServer.Shell.Search.SearchProvidersManager,EPiServer.Core.LanguageSelectorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.SearchDeletedContentQuery"/> class.
            </summary>
            <param name="queryHelper">Helper used for filter, sort and range.</param>
            <param name="contentRepository">The content repository.</param>
            <param name="searchProvidersManager">The search providers manager.</param>
            <param name="languageSelectorFactory">The language selector factory.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.SearchDeletedContentQuery.Name">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ContentQuery.Internal.SearchDeletedContentQuery.GetContent(EPiServer.Cms.Shell.UI.Rest.ContentQuery.ContentQueryParameters)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ContentQuery.TasksStatusQueryCategory">
            <summary>
            Status category used to group the status queries in the Task component
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.TasksStatusQueryCategory.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.ContentQuery.TasksStatusQueryCategory.SortOrder">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.CurrentContentContext">
            <summary>
            Represents the current content retrieved from given HttpContext.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.CurrentContentContext.#ctor(EPiServer.ServiceLocation.ServiceAccessor{System.Web.HttpContextBase})">
            <summary>
            Creates the instance of <see cref="T:EPiServer.Cms.Shell.UI.Rest.CurrentContentContext"/>
            </summary>
            <param name="httpContextAccessor">Service accessor for getting the HttpContext.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.CurrentContentContext.ContentLink">
            <summary>
            Gets the ContentReference of the current content context.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.DefaultQueryParameters">
            <summary>
            Class which carries default parameters to a query.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.DefaultQueryParameters.AllParameters">
            <summary>
            All parameters (un-parsed) from the original request.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.DefaultQueryParameters.Range">
            <summary>
            Requested range.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.DefaultQueryParameters.ReferenceId">
            <summary>
            An optional reference whose interpretation is specific to the query class.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.DefaultQueryParameters.References">
            <summary>
            An optional list of references whose interpretation is specific to the query class.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.DefaultQueryParameters.AllLanguages">
            <summary>
            Whether to include content of all languages or just content
            returned for the preferred language.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.DefaultQueryParameters.TypeIdentifiers">
            <summary>
            Type identifiers to filter by.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.DefaultQueryParameters.SortColumns">
            <summary>
            Columns to sort by.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.DefaultQueryParameters.SelectedContentReference">
            <summary>
            An optional reference of the currently selected content link.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.IContentChangeManager">
            <summary>
            Broker object which is responsible for managing content change operations between stores and repositories
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.IContentChangeManager.Commit(EPiServer.Core.ContentReference,EPiServer.DataAccess.SaveAction)">
            <summary>
            Commits the specified change.
            </summary>
            <param name="contentReference">The content reference.</param>
            <param name="action">The desired <see cref="T:EPiServer.DataAccess.SaveAction"/>.</param>
            <returns>
            A <see cref="T:EPiServer.Cms.Shell.Workspace.Committers.CommitResult"/> object with information about the results of the commit.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.IContentChangeManager.Create(EPiServer.Core.ContentReference,System.Int32,System.Nullable{System.Int64},System.Boolean,EPiServer.Cms.Shell.UI.Rest.ILocalAssetNameGenerator,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new content with a name generator.
            </summary>
            <param name="parentLink">The parent link.</param>
            <param name="contentTypeId">The content type id.</param>
            <param name="resourceFolderId">The content folder id.</param>
            <param name="createAsLocalAsset">Indicate that the created content should be put in the parent content's local asset folder.</param>
            <param name="nameGenerator">The content name generator.</param>
            <param name="properties">The property values.</param>
            <returns><see cref="T:EPiServer.Core.ContentReference"/> to the new Content</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.IContentChangeManager.Create(EPiServer.Core.ContentReference,System.Int32,System.Nullable{System.Int64},System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new content.
            </summary>
            <param name="parentLink">The parent link.</param>
            <param name="contentTypeId">The content type id.</param>
            <param name="resourceFolderId">The content folder id.</param>
            <param name="createAsLocalAsset">Indicate that the created content should be put in the parent content's local asset folder.</param>
            <param name="name">The name of the content.</param>
            <param name="properties">The property values.</param>
            <returns><see cref="T:EPiServer.Core.ContentReference"/> to the new Content</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.IContentChangeManager.GetOrCreateContentAssetsFolder(EPiServer.Core.ContentReference)">
            <summary>
            Get or creates a new content assets folder
            </summary>
            <param name="parentLink">The parent link.</param>
            <returns><see cref="T:EPiServer.Core.ContentReference"/> to the new Content</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.IContentChangeManager.CreateLanguageBranch(EPiServer.Core.ContentReference,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new language branch based on the current language.
            </summary>
            <param name="contentReference">The content reference.</param>
            <param name="name">The name of the content.</param>
            <param name="languageBranch">The language branch to create the content for.</param>
            <param name="properties">The property values.</param>
            <returns>ContentReference to the new Content</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.IContentChangeManager.Copy(EPiServer.Core.IContent,EPiServer.Core.IContent,System.Boolean)">
            <summary>
            Copies the content to specified destination.
            </summary>
            <param name="source">The content.</param>
            <param name="destination">The destination.</param>
            <param name="createAsLocalAsset">Indicate that the created content should be put in the parent content's local asset folder.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.IContentChangeManager.Move(EPiServer.Core.IContent,EPiServer.Core.IContent,System.Boolean)">
            <summary>
            Moves the content to specified destination.
            </summary>
            <param name="source">The content.</param>
            <param name="destination">The destination.</param>
            <param name="createAsLocalAsset">Indicate that the created content should be put in the parent content's local asset folder.</param>
            <returns>ContentReference of moved content. When moving between ContentProviders it can be new value</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.IContentChangeManager.TranslateAncestors(EPiServer.Core.IContent)">
            <summary>
            Translates the ancestor of the content IF the content is or inherits from <see cref="T:EPiServer.Core.BlockData"/>.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.IContentChangeManager.UpdateContentProperties(EPiServer.Core.ContentReference,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Updates the specified properties to the content matching the specified content reference.
            </summary>
            <param name="contentReference">The content reference to the content to be updated.</param>
            <param name="properties">The properties to update</param>
            <returns>A <see cref="T:EPiServer.Cms.Shell.UI.Rest.PropertiesUpdateResult"/> with the results of the update.</returns>
            <remarks>
            It will use the following <see cref="T:EPiServer.DataAccess.SaveAction">save action</see>: SaveAction.Save | SaveAction.SkipValidation
            </remarks>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.IContentChangeManager.UpdateContentProperties(EPiServer.Core.ContentReference,System.Collections.Generic.IDictionary{System.String,System.String},EPiServer.DataAccess.SaveAction)">
            <summary>
            Updates the specified properties to the content matching the specified content reference.
            </summary>
            <param name="contentReference">The content reference to the content to be updated.</param>
            <param name="properties">The properties.</param>
            <param name="saveAction">The save action to be used when updating the repository.</param>
            <returns>A <see cref="T:EPiServer.Cms.Shell.UI.Rest.PropertiesUpdateResult"/> with the results of the update.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.IContentLanguageInformationResolver.Resolve(EPiServer.Core.IContent,System.String)">
            <summary>
            Extract more information on why the preferred language has been selected
            </summary>
            <param name="content">The content.</param>
            <param name="preferredLanguage">The preferred language.</param>
            <returns>A <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentLanguageInformation"/> instance describing the
            language selection, or null if the content or content provider does not
            support multi language.</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.IContentReferenceModelCreator">
            <summary>
            Interface for content reference model creators
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.IContentReferenceModelCreator.Create(EPiServer.DataAbstraction.ReferenceInformation)">
            <summary>
            Creates the content reference model.
            </summary>
            <param name="reference">The reference.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.IContentStoreModelCreator">
            <summary>
            Utility class help to create content store model.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.IContentStoreModelCreator.CreateContentDataStoreModels``1(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},EPiServer.Cms.Shell.UI.Rest.DefaultQueryParameters)">
            <summary>
            Creates the content data store model.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="content">The content.</param>
            <param name="queryParameters">The query parameters</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.IContentTypeAdvisor">
            <summary>
            Specifies methods concerning suggested content types in the UI.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.IContentTypeAdvisor.GetSuggestions(EPiServer.Core.IContent,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the ids of suggested content types.
            </summary>
            <param name="parent">The owner Content.</param>
            <param name="contentFolder">If true then get suggestion for the local asset folder otherwise for the owner.</param>
            <param name="requestedTypes">The requested types.</param>
            <returns>An enumeration of ids for suggested content types.</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.ILocalAssetNameGenerator">
            <summary>
            Generates an unique name for local asset based on parent name, content type name.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.ILocalAssetNameGenerator.Generate(EPiServer.Core.ContentReference,System.Int32)">
            <summary>
            Generates the asset name.
            </summary>
            <param name="parentLink">The parent link.</param>
            <param name="contentTypeId">The content type id.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.IMetaDataResolver">
            <summary>
            Definies signature for component that acts as a resolver for metadata properties
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.IMetaDataResolver.ResolveMetaData(System.String)">
            <summary>
            Resolves a meta data property with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <remarks>For properties on metadata interfaces the names is expected to be in format '[interfaceName]_[propertyName]'</remarks>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.IMetaDataResolver.GetAllMetaDataProperties">
            <summary>
            Gets all available meta data properties.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.IMetaDataResolver.GetMetaDataPropertiesForInstance(System.Object)">
            <summary>
            Gets the meta data properties for the specified instance.
            </summary>
            <param name="instance">The instance to check for meta data properties.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.IMetaDataResolver.GetMetaDataProperties(System.Type)">
            <summary>
            Gets the meta data properties for the specified type
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Internal.CategoryStore">
            <summary>
            REST store that makes it able to work with some basic properties of <see cref="T:EPiServer.DataAbstraction.Category"/> objects without sending the entire objects.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.CategoryStore.#ctor(EPiServer.DataAbstraction.CategoryRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.CategoryStore"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.CategoryStore.Get(System.String,System.String,EPiServer.Shell.Services.Rest.ItemRange)">
            <summary>
            Get a single <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.CategoryViewModel"/> by id or queries for multiple categories.
            </summary>
            <param name="id">The <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.CategoryViewModel"/>ID.</param>
            <param name="query">The query.</param>
            <param name="range">Range http header on incoming requests.</param>
            <returns>
            A specific <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.CategoryViewModel"/>.
            </returns>
            <remarks>
            Available queries are:
            <c>getchildren</c>
            Here is an example of the format of a URL: [storepath]/[categoryId]?query=getchildren
            </remarks>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.CategoryStore.FindCategory(System.Int32)">
            <summary>
            Finds the category.
            </summary>
            <param name="id">The id number for the category to find.</param>
            <returns>The found category or null if the category could not be found</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.CategoryStore.GetCategory(System.Int32)">
            <summary>
            Gets the category.
            </summary>
            <param name="id">The id number for the category to find.</param>
            <returns>a CategoryViewModel object corresponding to the found category or
            null if the category could not be found, in Json format</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.CategoryStore.GetVisibleChildren(System.Int32,EPiServer.Shell.Services.Rest.ItemRange)">
            <summary>
            Gets visible children of a category.
            </summary>
            <param name="id">The id of the category.</param>
            <param name="range">The range of categories requested.</param>
            <returns>The children which are visible in edit mode</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Internal.CmsContentContextResolver">
            <summary>
            Resolves URIs and URLs for the shell context service.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.CmsContentContextResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.CmsContentContextResolver" /> class.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Internal.CmsContentContextResolver.Name">
            <summary>
            The name of the model the context contextualizes.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.CmsContentContextResolver.TryResolveUri(System.Uri,EPiServer.Shell.Rest.ClientContextBase@)">
            <summary>
            Resolves a content link in URI format.
            </summary>
            <param name="uri">The URI.</param>
            <param name="instance">The output context instance.</param>
            <returns>True if the URI was successfully resolved.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.CmsContentContextResolver.TryResolveUrl(System.Uri,EPiServer.Shell.Rest.ClientContextBase@)">
            <summary>
            Tries to resolve an url to page context.
            </summary>
            <param name="url">The URL to parse.</param>
            <param name="instance">The return context.</param>
            <returns>True if the url matches a page.</returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Internal.CmsContentContextResolver.SortOrder">
            <summary>
            Sort order among peer url resolvers.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.CmsContentContextResolver.ToContentDataContext(EPiServer.Core.ContentReference,EPiServer.Core.IContent,EPiServer.Cms.Shell.UI.Rest.ContentLanguageInformation,System.Uri,EPiServer.UrlBuilder)">
            <summary>
            Converts a <see cref="T:EPiServer.Core.IContent" /> object to content data context DTO, including the in use notification data.<see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentDataContext" />.
            </summary>
            <param name="requestedContentReference">The requested content reference.</param>
            <param name="content">The page to be converted to page data context DTO.</param>
            <param name="languageInformation">The language context.</param>
            <param name="requestedUri">The requested URI.</param>
            <param name="requestedUrl">Optional. The url currently being resolved</param>
            <returns>
            A <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentDataContext" /> version of the page.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.CmsContentContextResolver.RemoveInternalParameters(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Remove any known EPiServer edit mode parameters from the query collection
            </summary>
            <param name="parameters">The unfiltered parameter collection</param>
            <returns>A filtered collection without internal edit mode parameters</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.CmsContentContextResolver.ResolveUrl(EPiServer.Core.IContent,EPiServer.Core.ContentReference,System.String,EPiServer.Web.ContextMode,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Resolves a url to an IContent instance rendered in a specific mode
            </summary>
            <param name="content">The content to resolve a url for</param>
            <param name="requestedContentReference">Optional content link to resolve.</param>
            <param name="language">The language.</param>
            <param name="mode">The mode.</param>
            <param name="parameters">Additional query parameters to append to the url</param>
            <returns>
            A url to the content
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.CmsContentContextResolver.GetFullUrlToEditView(EPiServer.Web.SiteDefinition)">
            <summary>
            Gets the full URL to Home view in sparrowhawk ui.
            </summary>
            <param name="sitedDef">The settings.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Internal.CmsContentContextResolver.CurrentSiteDefinition">
            <summary>
            Gets or sets the current site settings.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Internal.CompositeValidationError">
            <summary>
            A validation error class that assoicates a collection of validation errors with a content item.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Internal.CompositeValidationError.Content">
            <summary>
            Gets the content assoicated with the validation errors.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Internal.CompositeValidationError.ValidationErrors">
            <summary>
            Gets the collection of validation errors for the given content.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Internal.ContentDataStore">
            <summary>
            REST store exposing <see cref="T:EPiServer.Core.IContent"/> information to the client.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentDataStore.#ctor(EPiServer.IContentRepository,EPiServer.Core.IContentVersionRepository,EPiServer.Cms.Shell.UI.Rest.IContentChangeManager,EPiServer.Cms.Shell.UI.Rest.IContentStoreModelCreator,EPiServer.Cms.Shell.UI.Rest.ILocalAssetNameGenerator,EPiServer.Globalization.LanguageResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.ContentDataStore" /> class.
            </summary>
            <param name="contentRepository">The repository used to handle content data.</param>
            <param name="contentVersionRepository">The content version repository.</param>
            <param name="contentChangeManager">The content change manager.</param>
            <param name="contentStoreModelCreator">The content store model creator.</param>
            <param name="localAssetNameGenerator">The local asset name generator.</param>
            <param name="languageResolver">Preferred culture resolver</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentDataStore.Get(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,System.String[])">
            <summary>
            Gets the specified content data.
            If parentLink has a value, will return the children of the parent link.
            If id is null, will return the root folder.
            </summary>
            <param name="id">The of the content to get.</param>
            <param name="parentLink">The parent link.</param>
            <param name="typeIdentifiers">The set of content types to be taken into account</param>
            <returns>
            Either the content for the specified id, or the children of the specified parent link.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentDataStore.GetContent(EPiServer.Core.ContentReference,EPiServer.Cms.Shell.UI.Rest.DefaultQueryParameters)">
            <summary>
            Get content
            </summary>
            <param name="contentReference">The content reference.</param>
            <param name="queryParameters">The query parameters.</param>
            <returns>
            The content for the specified content reference
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentDataStore.Post(EPiServer.Cms.Shell.UI.Rest.Models.PostContentModel)">
            <summary>
            Posts the specified content.
            </summary>
            <param name="entity">Content data store model.</param>
            <returns>The contentLink</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentDataStore.Patch(EPiServer.Cms.Shell.UI.Rest.Models.PatchContentDataModel)">
            <summary>
            Patches the specified content
            </summary>
            <param name="entity">The patch data model entity.</param>
            <returns>
            A <see cref="T:EPiServer.Cms.Shell.UI.Rest.PropertiesUpdateResult"/> with the results of the update.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentDataStore.ChangeStatus(EPiServer.Core.ContentReference,EPiServer.DataAccess.SaveAction)">
            <summary>
            Changes the status off the content
            </summary>
            <param name="id">The id.</param>
            <param name="action">The action to execute.</param>
            <returns>
            A <see cref="T:System.Web.Mvc.ActionResult"/> with information about the results of the commit.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentLanguageInformationResolver.#ctor(EPiServer.Core.IContentLanguageSettingsHandler,EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.Core.IContentProviderManager,EPiServer.IContentLoader,EPiServer.Globalization.LanguageResolver,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Web.SiteDefinition},EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.ContentLanguageInformationResolver"/> class.
            </summary>
            <param name="contentLanguageSettingsHandler">The content language settings handler.</param>
            <param name="languageBranchRepository">The language branch repository.</param>
            <param name="contentProviderManager">The content provider manager.</param>
            <param name="contentLoader">The content loader to use</param>
            <param name="languageResolver">Current Language resolver</param>
            <param name="currentSiteDefinition">The current site definition (SiteDefinition.Current)</param>
            <param name="localizationService"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentLanguageInformationResolver.Resolve(EPiServer.Core.IContent,System.String)">
            <summary>
            Extract more information on why the preferred language has been selected
            </summary>
            <param name="content">The content.</param>
            <param name="preferredLanguage">The preferred language.</param>
            <returns>A <see cref="T:EPiServer.Cms.Shell.UI.Rest.ContentLanguageInformation"/> instance describing the
            language selection, or null if the content or content provider does not
            support multi language.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentLanguageInformationResolver.IsLanguageAgnosticRoot(EPiServer.Core.IContent)">
            <summary>
            Checks if an item is considered to be a system root that should always appear in all languages
            even though it does not exists for that language.
            </summary>
            <param name="content">The content to test the condition.</param>
            <returns>True if this item is considered to be a root, otherwise false.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentLanguageInformationResolver.SetWarning(EPiServer.Cms.Shell.UI.Rest.ContentLanguageInformation,EPiServer.Core.IContent)">
            <summary>
            Sets the language warning messages
            </summary>
            <param name="languageInformation">The language information.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentLanguageInformationResolver.Translate(System.String)">
            <summary>
            Get the name for the culture configured in the site or the translated name of the culture
            </summary>
            <param name="cultureName">The name of the culture</param>
            <returns>The culture named defined in the site or the translated name of the culture</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentLanguageInformationResolver.Translate(System.Globalization.CultureInfo)">
            <summary>
            Get the name for the culture configured in the site or the translated name of the culture
            </summary>
            <param name="cultureInfo">The culture to get the name for</param>
            <returns>The culture named defined in the site or the translated name of the culture</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Internal.ContentReferenceModelCreator">
            <summary>
            Default content reference model creator
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentReferenceModelCreator.#ctor(EPiServer.Cms.Shell.Service.Internal.ContentLoaderService,EPiServer.Shell.UIDescriptorRegistry,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Web.SiteDefinition})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.ContentReferenceModelCreator"/> class.
            </summary>
            <param name="contentLoaderService">The content loader service used when fetching data.</param>
            <param name="uiDescriptorRegistry">The ui descriptor registry</param>
            <param name="currentSiteDefinition">The current site definition accessor</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentReferenceModelCreator.Create(EPiServer.DataAbstraction.ReferenceInformation)">
            <summary>
            Creates the content reference model.
            </summary>
            <param name="reference">The reference.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentReferenceStore.#ctor(EPiServer.IContentLoader,EPiServer.Cms.Shell.UI.Rest.Internal.ReferencedContentResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.ContentReferenceStore" /> class.
            </summary>
            <param name="contentLoader">The content loader used to get content data.</param>
            <param name="referencedContentResolver">The referenced content resolver.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentReferenceStore.Get(EPiServer.Core.ContentReference,EPiServer.Shell.Services.Rest.ItemRange)">
            <summary>
            Gets references to specific content.
            </summary>
            <param name="id">The content id.</param>
            <param name="range">The range.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore">
            <summary>
            REST store that makes it able to work with some basic properties of <see cref="T:EPiServer.Core.IContent"/> objects without sending the entire objects.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore.#ctor(EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.DataAbstraction.ContentTypeAvailabilityService,EPiServer.Core.IContentProviderManager,EPiServer.Cms.Shell.UI.Rest.IContentStoreModelCreator,EPiServer.Cms.Shell.UI.Rest.IContentChangeManager,EPiServer.Framework.Localization.LocalizationService,EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryProvider,EPiServer.Web.ISiteDefinitionRepository,EPiServer.Cms.Shell.Service.Internal.ContentService,EPiServer.Globalization.LanguageResolver,EPiServer.Cms.Shell.UI.Rest.Internal.PageSortUtility,EPiServer.Security.PermissionService,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Web.SiteDefinition})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore" /> class.
            </summary>
            <param name="contentTypeRepository">The content type repository.</param>
            <param name="contentTypeAvailabilityService">Service that keeps track of which content types are allowed to be created at which position in the content structure.</param>
            <param name="contentProviderManager">The content provider manager.</param>
            <param name="contentStoreModelCreator">The content store model creator.</param>
            <param name="contentChangeManager">The content change manager.</param>
            <param name="localizationService">The localization service, which takes responsibility for translating text.</param>
            <param name="queryProvider">The query provider.</param>
            <param name="siteDefinitionRepository"></param>
            <param name="contentService">The content service instance</param>
            <param name="languageResolver"></param>
            <param name="sortUtility"></param>
            <param name="permissionService"></param>
            <param name="currentSiteDefinition"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore.Get(EPiServer.Core.ContentReference,System.String,EPiServer.Core.ContentReference,EPiServer.Core.ContentReference[],System.String[],System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{EPiServer.Shell.Services.Rest.SortColumn},EPiServer.Core.ContentReference,EPiServer.Shell.Services.Rest.ItemRange)">
            <summary>
            Get a single <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel"/> by id or queries for multiple content's.
            </summary>
            <param name="id">The <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel"/>ID.</param>
            <param name="query">An additional query for item selection.</param>
            <param name="referenceId"> </param>
            <param name="references">The id's of the parent references to execute the query on</param>
            <param name="typeIdentifiers">The requested type identifiers.</param>
            <param name="allLanguages">Indicates if all languages should be returned.</param>
            <param name="sortColumns">The sort columns.</param>
            <param name="selectedContentReference">Optional selected content link.</param>
            <param name="range">Range http header on incoming requests.</param>
            <returns>
            A specific <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel"/> or the root page if both <paramref name="id"/>
            and <paramref name="query"/> are null.
            </returns>
            <remarks>
            Available queries are:
                <c>getchildren</c>
                <c>contentsearch</c>
                <c>contentactivities</c>
                <c>getrestorepoint</c>
            New queries can be added by implementing the <see cref="T:EPiServer.Shell.ContentQuery.IContentQuery"/> interface.
            Here is an example of the format of a URL: [storepath]/?query=getrestorepoint&amp;referenceId=[contentId].
            </remarks>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore.Copy(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Copies the specified content to new parent.
            </summary>
            <param name="id">The <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel"/> ID of the content that is being copied.</param>
            <param name="targetId">The <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel"/> ID of the target.</param>
            <param name="createAsLocalAsset">Indicate that the created content should be put in the parent content's local asset folder.</param>
            <param name="sortIndex">An optional new sort index for the item.</param>
            <returns>
            An <see cref="T:EPiServer.Shell.Services.Rest.RestResult"/> which contains the cloned page.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore.CopyMany(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},EPiServer.Core.ContentReference,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Copies the specified content to new parent.
            </summary>
            <param name="ids">The IDs of the content that is being copied.</param>
            <param name="targetId">The <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel"/> ID of the target.</param>
            <param name="createAsLocalAsset">Indicate that the created content should be put in the parent content's local asset folder.</param>
            <param name="sortIndex">An optional new sort index for the item.</param>
            <returns>
            An <see cref="T:EPiServer.Shell.Services.Rest.RestResult"/> which contains the cloned page.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore.Move(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Moves a specified content to new parent. If new parent is the same as the current parent, then the item is sorted among its siblings.
            </summary>
            <param name="id">The <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel"/>ID of the content that is being moved.</param>
            <param name="targetId">The <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel"/>ID of the target that the content will be moved to.</param>
            <param name="createAsLocalAsset">Indicate that the created content should be put in the parent content's local asset folder.</param>
            <param name="sortIndex">An optional new sort index for the item.</param>
            <returns>
            A <see cref="T:EPiServer.Shell.Services.Rest.RestResult"/> if the move action is handled.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore.MoveMany(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},EPiServer.Core.ContentReference,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Moves the specified content to new parent. If new parent is the same as the current parent, then the item is sorted among its siblings.
            </summary>
            <param name="ids">The IDs of the content that is being moved.</param>
            <param name="targetId">The ID of the target that the content will be moved to.</param>
            <param name="createAsLocalAsset">Indicate that the created content should be put in the parent content's local asset folder.</param>
            <param name="sortIndex">An optional new sort index for the item.</param>
            <returns>
            A <see cref="T:EPiServer.Shell.Services.Rest.RestResult"/> if the move action is handled.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore.Delete(EPiServer.Core.ContentReference)">
            <summary>
            Deletes the specified content id.
            </summary>
            <param name="id">The id.</param>
            <returns>The parent content data</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore.List(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
            <summary>
            Get multiple <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel"/> by id
            </summary>
            <param name="ids">The content ids.</param>
            <returns>Models for the specified ids.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore.CopyContent(EPiServer.Core.IContent,EPiServer.Core.IContent,System.Boolean,EPiServer.Cms.Shell.UI.Rest.Models.ActionResponse{EPiServer.Core.ContentReference})">
            <summary>
            Copies the content.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="createAsLocalAsset">Indicate that the created content should be put in the parent content's local asset folder.</param>
            <param name="response">The response.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore.AddParentToResult(EPiServer.Core.ContentReference,EPiServer.Cms.Shell.UI.Rest.Models.ActionResponse{System.Collections.Generic.IDictionary{EPiServer.Core.ContentReference,EPiServer.Cms.Shell.UI.Rest.Models.ActionResponse{EPiServer.Core.ContentReference}}},EPiServer.Cms.Shell.UI.Rest.Models.ActionResponse{EPiServer.Core.ContentReference})">
            <summary>
            Adds the parent id to extra information if the response is OK. The parent id will be used on the client to notify stores that needs to be updated.
            </summary>
            <param name="parentId"></param>
            <param name="result"></param>
            <param name="response"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore.GetContent(EPiServer.Core.ContentReference,EPiServer.Cms.Shell.UI.Rest.DefaultQueryParameters)">
            <summary>
            Get lightweight content data
            </summary>
            <param name="contentReference">The content reference.</param>
            <param name="queryParameters">The query parameters.</param>
            <returns>
            The lightweight content
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore.GetParentReference(EPiServer.Core.ContentReference)">
            <summary>
            Gets the parent reference.
            </summary>
            <param name="contentReference">The content reference.</param>
            <returns>The parent reference.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore.SortPage(EPiServer.Core.IContent,EPiServer.Core.IContent,EPiServer.Cms.Shell.UI.Rest.Models.ActionResponse{EPiServer.Core.ContentReference},System.Int32,System.Boolean)">
            <summary>
            Sorts the page.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="response">The response.</param>
            <param name="sortIndex">Index of the sort.</param>
            <param name="pageIsAddedToNewCollection">if set to <c>true</c> [page is added to new collection].</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore.ExecuteAction(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,System.Boolean,System.Func{EPiServer.Core.IContent,EPiServer.Core.IContent,System.Boolean,EPiServer.Cms.Shell.UI.Rest.Models.ActionResponse{EPiServer.Core.ContentReference},System.Boolean},EPiServer.Cms.Shell.UI.Rest.Models.ActionResponse{EPiServer.Core.ContentReference}@)">
            <summary>
            Copy, move or sort a content
            </summary>
            <param name="sourceContentLink">The <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel" /> ID of the content that is being copied.</param>
            <param name="destinationContentLink">The <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel" /> ID of the parent content.</param>
            <param name="createAsLocalAsset">Indicate that the created content should be put in the parent content's local asset folder.</param>
            <param name="action">The action.</param>
            <param name="result">The result of the operation</param>
            <returns>
            true if succedded otherwise false
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore.ValidateBeforeMoveOrCopy(EPiServer.Core.IContent,EPiServer.Core.IContent,System.Boolean,System.String@)">
            <summary>
            Validates the content before move or copy the <paramref name="source"/> into <paramref name="destination"/>.
            </summary>
            <param name="source">The source object</param>
            <param name="destination">The destination object.</param>
            <param name="createAsLocalAsset">Indicate that the created content should be put in the parent content's local asset folder.</param>
            <param name="validateMessage">The result validate message.</param>
            <returns>true if success, otherwise false.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore.SupportsContentType(EPiServer.Core.IContent,EPiServer.Core.IContent)">
            <summary>
            If the settings support a certain content to be cut or copied under a content depending on the page type.
            </summary>
            <param name="source">The content that is to be cut/copied.</param>
            <param name="destination">The content that we need to check settings for.</param>
            <returns>True if the settings allow the content to be created; otherwise false.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore.CreateStoreModel(EPiServer.Core.IContent,EPiServer.Cms.Shell.UI.Rest.DefaultQueryParameters)">
            <summary>
            Create the model for content with properties
            </summary>
            <param name="content">The content.</param>
            <param name="queryParameters">the query parameters</param>
            <returns>
            The <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel" /> for content
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore.MoveContent(EPiServer.Core.IContent,EPiServer.Core.IContent,System.Boolean,EPiServer.Cms.Shell.UI.Rest.Models.ActionResponse{EPiServer.Core.ContentReference})">
            <summary>
            Moves the content.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="createAsLocalAsset">Indicate that the created content should be put in the parent content's local asset folder.</param>
            <param name="response">The response.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore.IsAncestor(EPiServer.Core.IContent,EPiServer.Core.IContent)">
            <summary>
            Determines whether <paramref name="source"/> is parent or (recursively) the parent of an ancestor of <paramref name="target"/>.
            In other words, checks whether the dragged items are parent rows in the tree which are being dragged into their own children.
            </summary>
            <param name="source">The source content - dragged content.</param>
            <param name="target">The target content - dropped content.</param>
            <returns>
            	<c>true</c> if <paramref name="source"/> is parent or (recursively) the parent of an ancestor of <paramref name="target"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore.GetAncestorList(EPiServer.Core.ContentReference)">
            <summary>
            Gets list of ancestors (parent or recursively parent) of input <paramref name="contentReference"/>.
            </summary>
            <param name="contentReference">The content reference.</param>
            <returns>
            List of ancestors (parent or recursively parent) of input <paramref name="contentReference"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore.Failure(EPiServer.Cms.Shell.UI.Rest.Models.ActionResponse{EPiServer.Core.ContentReference})">
            <summary>
            Returns a failed RestStatusCodeResult based on the result
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStore.Failure(System.Net.HttpStatusCode,System.String)">
            <summary>
            Returns a failed RestStatusCodeResult based on the status code
            </summary>
            <param name="statusCode">The status code.</param>
            <param name="message">The message.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStoreModelCreator">
            <summary>
            Class to use for creating models based on <see cref="T:EPiServer.Core.IContent"/> data
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStoreModelCreator.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransform})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStoreModelCreator" /> class.
            </summary>
            <param name="transforms">The transforms that should be applied.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentStoreModelCreator.CreateContentDataStoreModels``1(System.Collections.Generic.IEnumerable{EPiServer.Core.IContent},EPiServer.Cms.Shell.UI.Rest.DefaultQueryParameters)">
            <summary>
            Creates the model for a content data
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <param name="content">The content data.</param>
            <param name="queryParameters">The query parameters</param>
            <returns>
            The <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel" /> for content
            </returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Internal.ContentTypeStore">
            <summary>
            REST store exposing <see cref="T:EPiServer.DataAbstraction.ContentType"/> information to the client.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentTypeStore.#ctor(EPiServer.DataAbstraction.ContentTypeAvailabilityService,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.IContentLoader,EPiServer.DataAbstraction.ContentTypeModelRepository,EPiServer.Shell.UIDescriptorRegistry,System.Collections.Generic.IEnumerable{EPiServer.Cms.Shell.UI.Rest.IContentTypeAdvisor},EPiServer.Shell.Modules.ModuleTable,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Web.SiteDefinition},EPiServer.Cms.Shell.UI.Rest.Internal.FilterContentTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.ContentTypeStore" /> class.
            </summary>
            <param name="contentTypeAvailabilityService">The available content types service.</param>
            <param name="contentTypeRepository">The content type repository containing <see cref="T:EPiServer.DataAbstraction.ContentType" /> instances.</param>
            <param name="contentLoader">The content data loader.</param>
            <param name="contentTypeModelRepository">The content type model repository.</param>
            <param name="descriptorRegistry">The UI descriptor registry.</param>
            <param name="advisors">The advisors.</param>
            <param name="moduleTable">The module table.</param>
            <param name="currentSiteDefinition">The current site definition.</param>
            <param name="filterContentTypes">The content types filter.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentTypeStore.Get(System.Nullable{System.Int32},System.String,EPiServer.Core.ContentReference,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get a single <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentTypeViewModel"/> by its id.
            </summary>
            <param name="id">The id of the content type to load.</param>
            <param name="query">The query.</param>
            <param name="parentReference">The content reference.</param>
            <param name="localAsset">If true then get available or suggested content types for local asset folder otherwise for the parent</param>
            <param name="requestedTypes">A array with a list of types to filter the results.</param>
            <returns>
            A specific <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentTypeViewModel"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentVersionStore.Get(EPiServer.Core.ContentReference,EPiServer.Core.ContentReference,System.String,System.Collections.Generic.IEnumerable{EPiServer.Shell.Services.Rest.SortColumn},System.String,EPiServer.Shell.Services.Rest.ItemRange)">
            <summary>
            Lists the page versions for the specified page.
            </summary>
            <param name="id">The content id.</param>
            <param name="contentLink">Reference to a page whose versions need to be loaded.</param>
            <param name="language">Language that versions retrieved should be for; if null all versions are retrieved.</param>
            <param name="sortColumns">The sort information used for sorting the returned collection of page versions.</param>
            <param name="query">The query.</param>
            <param name="range">Range http header on incoming requests.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentVersionStore.ProcessQuery(EPiServer.Core.ContentReference,System.String,System.Collections.Generic.IEnumerable{EPiServer.Shell.Services.Rest.SortColumn},System.String,EPiServer.Shell.Services.Rest.ItemRange)">
            <summary>
                Get content version based on the query name
            </summary>
            <param name="contentLink">The <see cref="T:EPiServer.Core.ContentReference"/></param>
            <param name="language">Language that versions retrieved should be for; if null all versions are retrieved.</param>
            <param name="query">The query name</param>
            <returns>The content version view model</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentVersionStore.Post(EPiServer.Cms.Shell.UI.Rest.Models.Internal.CreateContentVersionViewModel)">
            <summary>
            Creates a new writable version of the page
            </summary>
            <param name="entity">The page version view model</param>
            <returns>the new PageReference</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentVersionStore.Patch(EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentVersionViewModel)">
            <summary>
            Patch the specified item.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentVersionStore.CheckAccessLevel(EPiServer.DataAbstraction.ContentVersion,EPiServer.Security.AccessLevel[])">
            <summary>
            Determines whether we have access on the specified content.
            </summary>
            <param name="version">The content version to check the access level for.</param>
            <param name="accessLevels">The access level to test for. User must have permissions to secured content with at least one access level.</param>
            <returns>
              <c>true</c> if we have edit access on the specified content; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentVersionStore.CheckAccessLevel(EPiServer.Core.IContent,EPiServer.Security.AccessLevel[])">
            <summary>
            Determines whether we have access on the specified content.
            </summary>
            <param name="content">The content to check the access level for.</param>
            <param name="accessLevels">The access levels to test for. User must have permissions to secured content with at least one access level.</param>
            <returns>
              <c>true</c> if we have edit access on the specified content; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentVersionStore.Delete(EPiServer.Core.ContentReference,System.Nullable{System.Boolean})">
            <summary>
            Deletes a page version.
            </summary>
            <param name="id">The page link.</param>
            <param name="deleteLanguageBranch">The delete language branch.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentVersionStore.CanDelete(EPiServer.Core.IContent)">
            <summary>
            Determines whether the version with a specified id can be deleted.
            </summary>
            <param name="content">The content to determine can be deleted.</param>
            <returns>
            	<c>true</c> if the version can be deleted; otherwise, <c>false</c>.
            </returns>
            <remarks>Can delete a version if it is unpublished and there is at least one other version of the same language</remarks>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentVersionStore.GetPublishedVersion(EPiServer.Core.ContentReference,System.String)">
            <summary>
            Gets the published version.
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentVersionStore.GetCommonDraftVersion(EPiServer.Core.ContentReference,System.String)">
            <summary>
            Gets the common draft version.
            </summary>
            <param name="contentLink">The content link.</param>
            <param name="language">The language.</param>
            <returns>
            The content version view model
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ContentVersionStore.GetLatestPublishedVersion(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.ContentVersion},System.Boolean)">
            <summary>
            Depending on current version type
            we want to get a suitable compare version.
            </summary>
            <param name="versions">Version List</param>
            <param name="forceMasterLanguage">Prefer master language even if it's older than most recent published version in another language</param>
            <returns>
            The suitable default version for compare
            </returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Internal.DefaultContentTypeAdvisor">
            <summary>
            The CMS implementation of <see cref="T:EPiServer.Cms.Shell.UI.Rest.IContentTypeAdvisor" />.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.DefaultContentTypeAdvisor.#ctor(EPiServer.DataAbstraction.ContentTypeAvailabilityService,EPiServer.IContentLoader,EPiServer.Cms.Shell.UI.Rest.Internal.FilterContentTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.DefaultContentTypeAdvisor"/> class.
            </summary>
            <param name="contentTypeAvailablilityService">The available content types.</param>
            <param name="contentLoader">The content loader.</param>
            <param name="filterContentTypes">The content types filter.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.DefaultContentTypeAdvisor.GetSuggestions(EPiServer.Core.IContent,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Internal.DefaultLocalAssetNameGenerator">
            <summary>
            Default implementation of <see cref="T:EPiServer.Cms.Shell.UI.Rest.ILocalAssetNameGenerator"/>
            Generates asset name based on parent name, content type name, and current time.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.DefaultLocalAssetNameGenerator.#ctor(EPiServer.IContentRepository,EPiServer.DataAbstraction.IContentTypeRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.DefaultLocalAssetNameGenerator"/> class.
            </summary>
            <param name="contentRepository">The content repository.</param>
            <param name="contentTypeRepository">The content type repository.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.DefaultLocalAssetNameGenerator.Generate(EPiServer.Core.ContentReference,System.Int32)">
            <summary>
            Generates the asset name.
            </summary>
            <param name="parentLink">The parent link.</param>
            <param name="contentTypeId">The content type id.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.DisplayOptionsStore.#ctor(EPiServer.Web.DisplayOptions,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.DisplayOptionsStore" /> class.
            </summary>
            <param name="displayOptions">The display options.</param>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.DisplayOptionsStore.Get(System.String)">
            <summary>
            Gets a list of <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.DisplayOptionModel"/> or a single <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.DisplayOptionModel"/> if an Id is specified
            </summary>
            <param name="id">The id of the option to get, or null if all options should be returned </param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Internal.EpochToIsoConverter">
            <summary>
            Takes a JSON string and converts all instances of Epoch datetimes to Iso datetimes
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.EpochToIsoConverter.ConvertEpochToIso(System.String)">
            <summary>
            Convert Epoch to Iso
            </summary>
            <param name="json">JSON string to convert</param>
            <returns>JSON string with Iso datestimes</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Internal.FunctionPager`1">
            <summary>
            This type helps to paginate through items that were not meant to be paginable, or support paging in a limited way.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.FunctionPager`1.#ctor(System.Func{System.Int32,System.Int32,EPiServer.Async.AsyncPaginationResult{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.FunctionPager`1" /> class.
            </summary>
            <param name="functionToWrap">function that retrieves the items that will be wrapped</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.FunctionPager`1.GetRange(EPiServer.Shell.Services.Rest.ItemRange)">
            <summary>
            Gets a range of items
            </summary>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.InUseNotificationStore.#ctor(EPiServer.Shell.Notification.IInUseNotificationRepository,EPiServer.IContentRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.InUseNotificationStore" /> class.
            </summary>
            <param name="inUseNotificationRepository">The in use notification repository.</param>
            <param name="contentRepository">The content repository.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.InUseNotificationStore.Get(EPiServer.Core.ContentReference)">
            <summary>
            Get a list of <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.InUseNotificationViewModel"/> for the given page.
            </summary>
            <param name="id">The <see cref="T:EPiServer.Core.ContentReference"/>.</param>
            <returns>
            A list of <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.InUseNotificationViewModel"/>.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.InUseNotificationStore.Post(EPiServer.Cms.Shell.UI.Rest.Models.Internal.InUseNotificationViewModel)">
            <summary>
            Adds a new <see cref="T:EPiServer.Shell.Notification.InUseNotification"/>.
            </summary>
            <returns>
            An <see cref="T:EPiServer.Shell.Services.Rest.RestResult"/> object containing the id of the new item.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.InUseNotificationStore.Put(EPiServer.Cms.Shell.UI.Rest.Models.Internal.InUseNotificationViewModel)">
            <summary>
            Updates an existing <see cref="T:EPiServer.Shell.Notification.InUseNotification"/>.
            </summary>
            <returns>
            An <see cref="T:EPiServer.Shell.Services.Rest.RestResult"/> object containing the id of the updated item.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.InUseNotificationStore.Delete(System.String)">
            <summary>
            Releases the auto lock of page by deleting page draft
            </summary>
            <param name="id">The id.</param>
            <returns>
            PageLink as ActionResult
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.LanguageStore.TranslateCultureName(System.String)">
            <summary>
            Translates the specified culture name using <see cref="T:EPiServer.Framework.Localization.LocalizationService"/>.
            </summary>
            <param name="cultureName">Name of the culture.</param>
            <returns></returns>
            <returns>The translated name otherwise the native name</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.LatestContentVersionResolver.GetLatestVersion(EPiServer.Core.ContentReference,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns the latest version in the preferred language as returned by <see cref="M:EPiServer.Globalization.LanguageResolver.GetPreferredCulture"/>.
            Return null if there is no version in the preferred language.
            </summary>
            <param name="id"></param>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.LatestContentVersionResolver.GetDraftLink(EPiServer.Core.ContentReference)">
            <summary>
            Returns the common draft link for the given content link in current language context
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.LatestContentVersionResolver.GetDraftLink(EPiServer.Core.ContentReference,System.String)">
            <summary>
            Returns the common draft link for the given content link in the given preferred language.
            Return null if there is no version in the given language.
            </summary>
            <param name="id"></param>
            <param name="preferredCultureName"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.LatestContentVersionResolver.GetDraftLink(EPiServer.Core.ContentReference,System.String,System.Int32)">
            <summary>
            Returns the latest draft link for the given content link in a project.
            Return the common draft if there is no version in the preferred language in the given project.
            </summary>
            <param name="id"></param>
            <param name="preferredCultureName"></param>
            <param name="projectId"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Internal.MetaDataResolver">
            <summary>
            Default implementation of <see cref="T:EPiServer.Cms.Shell.UI.Rest.IMetaDataResolver"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.MetaDataResolver.#ctor(EPiServer.Cms.Shell.UI.Internal.GroupedMetaDataRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.MetaDataResolver"/> class.
            </summary>
            <param name="registry">The <see cref="T:EPiServer.Cms.Shell.UI.GroupedMetaDataPropertyInfo"/> registry.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.MetaDataResolver.ResolveMetaData(System.String)">
            <summary>
            Resolves a meta data property with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <remarks>For properties on metadata interfaces the names is expected to be in format '[interfaceName]_[propertyName]'</remarks>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.MetaDataResolver.GetAllMetaDataProperties">
            <summary>
            Gets all available meta data properties.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.MetaDataResolver.GetMetaDataPropertiesForInstance(System.Object)">
            <summary>
            Gets the meta data properties for the specified instance.
            </summary>
            <param name="instance">The instance to check for meta data properties.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.MetaDataResolver.GetMetaDataProperties(System.Type)">
            <summary>
            Gets the meta data properties for the specified type
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.MissingContentLanguageInformationResolver.#ctor(EPiServer.Core.IContentLanguageSettingsHandler,EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.Core.IContentProviderManager,EPiServer.IContentLoader,EPiServer.Globalization.LanguageResolver,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Web.SiteDefinition},EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.MissingContentLanguageInformationResolver"/> class.
            </summary>
            <param name="contentLanguageSettingsHandler">The content language settings handler.</param>
            <param name="languageBranchRepository">The language branch repository.</param>
            <param name="contentProviderManager">The content provider manager.</param>
            <param name="contentLoader">The content loader to use</param>
            <param name="languageResolver">Current Language resolver</param>
            <param name="currentSiteDefinition">The current site definition (SiteDefinition.Current)</param>
            <param name="localizationService"></param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Internal.PushEventAction">
            <summary>
            The different events sent on the socket
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Internal.ReferencedContentResolver">
            <summary>
            Resolves references from one content to another.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ReferencedContentResolver.GetReferenceList(EPiServer.Core.ContentReference)">
            <summary>
            Gets all the references to a content or its children.
            </summary>
            <param name="contentReference">The content.</param>
            <returns>A list of <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.ContentReferenceModel"/> objects corresponding to references to a given content.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ReferencedContentStore.#ctor(EPiServer.IContentLoader,EPiServer.Cms.Shell.UI.Rest.Internal.ReferencedContentResolver,EPiServer.Shell.UIDescriptorRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.ReferencedContentStore" /> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ReferencedContentStore.Get(System.Collections.Generic.IList{EPiServer.Core.ContentReference})">
            <summary>
            Gets references to the given content items or its children.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Internal.RestExtensions">
            <summary>
            Extensions for the REST store model.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.RestExtensions.GetUser(EPiServer.ServiceLocation.ServiceAccessor{System.Web.HttpContextBase})">
            <summary>
            Gets the user for the ServiceAccessor of HttpContextBase.
            </summary>
            <param name="contextGetter">The context getter.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Internal.ServiceException">
            <summary>
            Exceptions from the services can use ServiceException as the base to propagate non-fatal exceptions.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ServiceException.#ctor(System.String,System.String)">
            <summary>
            Creates the instance of ServiceException
            </summary>
            <param name="message">The message propagated to the Exception</param>
            <param name="languageKey">The language key is used by the LocalizationService to translate the message</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Internal.ServiceException.OriginalMessage">
            <summary>
            Gets the original non localized message.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Internal.ServiceException.AdditionalInformation">
            <summary>
            Gets or sets a collection of messages that contain any additional error information.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Internal.SiteStructureStore">
            <summary>
            REST store exposing sites and the different languages of each site.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.SiteStructureStore.#ctor(EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.IContentLoader,EPiServer.Web.ISiteDefinitionRepository,EPiServer.Cms.Shell.Service.Internal.EditUrlResolver,EPiServer.Core.IContentLanguageSettingsHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.SiteStructureStore" /> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.SiteStructureStore.Get(System.String,System.Nullable{System.Boolean})">
            <summary>
            Gets a list of <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.SiteLanguageModel"/>.
            </summary>
            <param name="siteUrl">The url to a specific site.</param>
            <param name="allLanguages">Flag indicating if all langugaes should be returned. If false, will filter any non available ones.</param>
            <returns>
            If <paramref name="siteUrl"/> is specified, returns a list of <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.SiteLanguageModel"/> matching the specified url;
            otherwise a list of <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.SiteLanguageModel"/> for all sites.
            </returns>
        </member>
        <member name="F:EPiServer.Cms.Shell.UI.Rest.Internal.SiteStructureStore.UIRootPath">
            <summary>
            Needed for unit testing
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Internal.ViewModelMapper">
            <summary>
            A class used for mapping properties from a source object to a view model object.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ViewModelMapper.Add``2">
            <summary>
            Adds a mapping from a source object type to the view model type.
            </summary>
            <typeparam name="TSource">The type of the source object</typeparam>
            <typeparam name="TModel">The type of the view model</typeparam>
            <returns>This <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.ViewModelMapper"/> for chainability.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ViewModelMapper.Add``2(System.Action{``0,``1})">
            <summary>
            Adds a mapping from a source object type to the view model type with an additional
            callback function that will run once the mapping has been complete.
            </summary>
            <typeparam name="TSource">The type of the source object</typeparam>
            <typeparam name="TModel">The type of the view model</typeparam>
            <param name="afterMapAction">The function to run once the mapping has completed</param>
            <returns>This <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.ViewModelMapper"/> for chainability.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ViewModelMapper.AfterMap``2(System.Action{``0,``1})">
            <summary>
            Adds or replaces an after map action for the given source type.
            </summary>
            <typeparam name="TSource">The type of the source object</typeparam>
            <typeparam name="TModel">The type of the view model</typeparam>
            <param name="afterMapAction">The function to run once the mapping has completed</param>
            <returns>This <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.ViewModelMapper"/> for chainability.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ViewModelMapper.Map``1(``0)">
            <summary>
            Maps the given source object to a view model object.
            </summary>
            <typeparam name="TSource">The type of the source object</typeparam>
            <param name="source">The source object</param>
            <returns>If a mapping exists for the source type then the view model object is returned; otherwise <code>null</code>.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ViewModelMapper.ExecuteAfterMapping``2(``0,``1)">
            <summary>
            Executes all the after mapping functions in the source types inheritance chain starting with the
            deepest base type and working up to the given type.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.ViewModelMapper.GetMapping(System.Type)">
            <summary>
            Returns the mapping object for the source type or if it does not exists it tries to find the closest
            parent that has a mapping. If nothing can be found it returns null.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Internal.VisitorGroupStore">
            <summary>
            Represents Rest store for manipulate Visitor group.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.VisitorGroupStore.#ctor(EPiServer.Personalization.VisitorGroups.IVisitorGroupRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.VisitorGroupStore" /> class.
            </summary>
            <param name="store">The visitor group repository.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.VisitorGroupStore.Get(System.Nullable{System.Guid},EPiServer.Shell.Services.Rest.ItemRange)">
            <summary>
            Get a specific Visitor group by a specific <paramref name="id"/>, or get all visitor group in case <paramref name="id"/> was <value>null</value>.
            </summary>
            <returns>A specific Visitor group by a specific <paramref name="id"/>, or get all visitor group in case <paramref name="id"/> was <value>null</value>.</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Internal.WasteBasketStore">
            <summary>
            REST store exposing <see cref="T:EPiServer.Core.IContent"/> information to the client.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.WasteBasketStore.#ctor(EPiServer.Core.IContentProviderManager,EPiServer.IContentRepository,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.WasteBasketStore" /> class.
            </summary>
            <param name="contentProviderManager">The content provider manager.</param>
            <param name="contentRepository">The content repository.</param>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.WasteBasketStore.#ctor(EPiServer.Core.IContentProviderManager,EPiServer.IContentRepository,EPiServer.Framework.Localization.LocalizationService,EPiServer.Cms.Shell.Service.Internal.ContentService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.WasteBasketStore" /> class.
            </summary>
            <param name="contentProviderManager">The content provider manager.</param>
            <param name="contentRepository">The content repository.</param>
            <param name="localizationService">The localization service.</param>
            <param name="contentService">The content Service</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.WasteBasketStore.Get(System.String,EPiServer.Shell.Services.Rest.ItemRange)">
            <summary>
            Gets the specified content provider, or query a list from <see cref="P:EPiServer.Core.IContentProviderManager.ProviderMap"/>.
            </summary>
            <param name="providerName">The name of the content provider to get.</param>
            <param name="range">Range http header on incoming requests.</param>
            <returns>
            Either the content provider for the specified id, or the list of content provider.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.WasteBasketStore.Empty(EPiServer.Core.ContentReference)">
            <summary>
            Remove all child contents of a specific content provider.
            </summary>
            <param name="id">The <see cref="T:EPiServer.Core.ContentReference"/> of content provider's wastebasket</param>
            <returns>The respone message after executed</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.WasteBasketStore.PermanentDelete(EPiServer.Core.ContentReference)">
            <summary>
            Remove a content from a waste basket
            </summary>
            <param name="id">The content link to be removed</param>
            <returns>The respone message after executed</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.WasteBasketStore.HasAccessToWasteBasket(System.String,EPiServer.Security.AccessLevel)">
            <summary>
            Check that the current user has read access to at least on waste basket.
            </summary>
            <param name="providerName">Optional name of a specific provider. If null, will check all providers.</param>
            <param name="accessLevel">The access level to check against.</param>
            <returns>
            True if the current user has waste basket access, otherwise false.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.WasteBasketStore.ProcessQuery(EPiServer.Shell.Services.Rest.ItemRange)">
            <summary>
            Processes the query.
            </summary>
            <returns>A list of content providers</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Internal.WasteBasketStore.CreateProviderModel(EPiServer.Core.ContentProvider)">
            <summary>
            Creates the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.WasteBasketViewModel"/> from <paramref name="provider"/>.
            </summary>
            <param name="provider">The <see cref="T:EPiServer.Core.ContentProvider"/> to create <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.WasteBasketViewModel"/> from.</param>
            <returns>A <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.WasteBasketViewModel"/></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.ActionResponse`1">
            <summary>
            Object that represent the edit action result.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.ActionResponse`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.ActionResponse`1"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ActionResponse`1.Message">
            <summary>
            The message that contains action result description send to client.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ActionResponse`1.StatusCode">
            <summary>
            Gets or sets the status code for the response
            </summary>
            <remarks>HttpStatusCode.OK is default</remarks>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ActionResponse`1.ExtraInformation">
            <summary>
            Gets or sets the extra information.
            </summary>
            <value>Extra information of the response.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.PublicUrl">
            <summary>
            Gets or sets the content's public URL.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.DownloadUrl">
            <summary>
            Gets or sets the content's download URL.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.PreviewUrl">
            <summary>
            Gets or sets the content's preview URL.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.PermanentLink">
            <summary>
            Gets the permanent link to the content
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.HasTemplate">
            <summary>
            Gets or sets a value indicating whether the item has a template registered.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.AccessMask">
            <summary>
            Gets the content access rights combined with the language access rights for the current user
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.AccessRights">
            <summary>
            Gets the access rights on this item for the current user.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.Name">
            <summary>
            Gets or sets the name of the page or content block.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.ContentLink">
            <summary>
            Gets or sets the content link used to hold references to content in the EPiServer system.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.ParentLink">
            <summary>
            Gets or sets the parent link used to hold references to the parent content in the EPiServer system.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.Uri">
            <summary>
            Gets or sets the URI.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.ContentGuid">
            <summary>
            Gets or sets the content GUID.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.ContentTypeID">
            <summary>
            Gets or sets the content type ID that this <see cref="T:EPiServer.Core.ContentData"/> is an instance of.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.ContentTypeName">
            <summary>
            Gets or sets the name of the content type.
            </summary>
            <value>The name of the content type.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.ContentType">
            <summary>
            Gets or sets the type of the content.
            </summary>
            <value>
            The type of the content.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.CurrentLanguageBranch">
            <summary>
            Gets the language branch for this content.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.AssetsFolderLink">
            <summary>
            Gets or sets the content link used to hold references to a local assets folder in the EPiServer system.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.Properties">
            <summary>
            Gets the property collection of the content object.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.InUseNotifications">
            <summary>
            Gets or sets the in use notifications.
            </summary>
            <value>The in use notifications.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.Created">
            <summary>
            Gets the date and time when this content instance was created.
            </summary>
            <remarks>
            <b>Created</b> is maintained by the EPiServer infrastructure and you have no control over them.
            </remarks>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.CreatedBy">
            <summary>
            Gets the username of the user that created this content instance.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.Changed">
            <summary>
            Gets the date when this content instance was last marked as changed.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.ChangedBy">
            <summary>
            Gets the username of the user that most recently changed this content instance.
            </summary>
            <remarks>
            For instance, if a Windows account was used to create the instance, expect a string
            being returned looking like 'DOMAIN\User Name'.
            </remarks>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.DeletedBy">
            <summary>
            Gets or sets who deleted the content.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.Deleted">
            <summary>
            Gets or sets the deleted date.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.Saved">
            <summary>
            Gets the date and time when this content instance was last saved.
            </summary>
            <remarks>
            Saved is the sibling of <see cref="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.Created"/> and is maintained by the EPiServer infrastructure.
            This means that you have no control over them.
            </remarks>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.IsDeleted">
            <summary>
            Gets or sets a value indicating whether this instance is deleted.
            </summary>
            <value>
            	<c>true</c> if this instance is deleted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.Capabilities">
            <summary>
            Gets the capabilities valid for this content.
            </summary>
            <value>
            The capabilities.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.ProviderCapabilityMask">
            <summary>
            Gets the capabilities mask for this content provider
            </summary>
            <value>
            The capabilities mask
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.Status">
            <summary>
            Gets or sets the status of the source page data.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.TypeIdentifier">
            <summary>
            Gets or sets the content class.
            </summary>
            <value>
            The content class.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.OwnerTypeIdentifier">
            <summary>
            Gets or sets the content owner type identifier.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModelBase.OwnerContentLink">
            <summary>
            Gets or sets the content link of the owner content (e.g. if the id to the page that owns the content assets folder)
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel">
            <summary>
            Implementation of a content transfer object used when transfering raw content data to the client.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel.EditablePreviewUrl">
            <summary>
            Gets or sets the editable preview URL.
            </summary>
            <value>
            The editable preview URL.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel.IsNewVersionRequired">
            <summary>
            Gets or sets a value indicating whether this instance requires new version.
            </summary>
            <value>
            <c>true</c> if new version required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel.IsCommonDraft">
            <summary>
            Gets or sets a value indicating whether this instance is common draft.
            </summary>
            <value>
            	<c>true</c> if this instance is common draft; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel.IsMasterVersion">
            <summary>
            Gets or sets a value indicating whether this instance is ever published.
            </summary>
            <value>
            	<c>true</c> if this instance is ever published; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel.PublishedBy">
            <summary>
            Gets the username of the user that created published version of this content instance.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel.LastPublished">
            <summary>
            Gets the date and time when published version of this content instance was last published.
            </summary>
            <remarks>
            <b>Created</b> is maintained by the EPiServer infrastructure and you have no control over them.
            </remarks>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel.VersionCreatedBy">
            <summary>
            Gets the username of the user that created requested version of this content instance.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel.VersionCreatedTime">
            <summary>
            Gets the date and time when requested version of this content instance was created.
            </summary>
            <remarks>
            <b>Created</b> is maintained by the EPiServer infrastructure and you have no control over them.
            </remarks>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel.VisibleToEveryOne">
            <summary>
            Gets or sets a value indicating whether content is visible to every one.
            </summary>
            <value>
              <c>true</c> if content is visible to every one; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel.IsPendingPublish">
            <summary>
            Gets or sets a value indicating whether this instance is in pending publish state.
            </summary>
            <value>
            	<c>true</c> if this instance is in pending publish state; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel.ExistingLanguageBranches">
            <summary>
            Gets or sets the existing language branches.
            </summary>
            <value>
            The existing language branches.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel.IsPartOfAnotherProject">
            <summary>
            Gets or sets whether the content is part of a project that is not the selected project.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel.Transitions">
            <summary>
            Gets or sets the status transitions available for the content.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.StructureStoreContentDataModel">
            <summary>
            Extends the default content data model with missing language information
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.StructureStoreContentDataModel.IsPreferredLanguageAvailable">
            <summary>
            Gets if the preferred language is enabled under this item
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.StructureStoreContentDataModel.MissingLanguageBranch">
            <summary>
            Gets or sets language branch for content which has missing language or configured language as replacement or fallback
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.StructureStoreContentDataModel.HasTranslationAccess">
            <summary>
            Get if the current user has acces to translate the current item
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.StructureStoreContentDataModel.IsSubRoot">
            <summary>
            Gets or sets a value indicating whether this item is a sub root.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.StructureStoreContentDataModel.IsStartPage">
            <summary>
            Gets or sets a value indicating whether this instance is a start page.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.StructureStoreContentDataModel.ThumbnailUrl">
            <summary>
            Gets or sets the content's thumbnail URL.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.PostContentModel.AutoPublish">
            <summary>
             Indicates if the content should be published automatically when created if the user has publish rights.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.PropertyDictionary">
            <summary>
            Dictionary for handling of content properties when serializing to and from JSON
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.PropertyDictionary.#ctor(EPiServer.DataAbstraction.ContentType)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.PropertyDictionary"/> class.
            </summary>
            <param name="contentType">Type of the content.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.PropertyDictionary.ContentType">
            <summary>
            Gets the content type matching the properties held in this dictionary.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.ContentReferenceModel">
            <summary>
            View model for <see cref="T:EPiServer.DataAbstraction.ReferenceInformation" />.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentReferenceModel.ContentLink">
            <summary>
            Gets or sets the content link.
            </summary>
            <value>
            The content link.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentReferenceModel.Uri">
            <summary>
            Gets or sets the URI.
            </summary>
            <value>
            The URI.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentReferenceModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentReferenceModel.Language">
            <summary>
            Gets or sets the language.
            </summary>
            <value>
            The language.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentReferenceModel.TypeIdentifier">
            <summary>
            Gets or sets the type identifier.
            </summary>
            <value>
            The type identifier.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.ContentReferenceModel.TreePath">
            <summary>
            Gets or sets an enumeration of the ancestors that represent the tree path.
            </summary>
            <value>The owner tree path.</value>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.EnhancedStructureStoreModelTransform.HasPublishedVersion(EPiServer.Core.IContent)">
            <summary>
            Indicates whether the current content has an existing published version
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.CategoryViewModel">
            <summary>
            Data transfer class for category selector.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Internal.CategoryViewModel.#ctor(EPiServer.DataAbstraction.Category)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.CategoryViewModel"/> class.
            </summary>
            <param name="cat">The category.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.CategoryViewModel.Id">
            <summary>
            Gets or sets the category id.
            </summary>
            <value>The category id.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.CategoryViewModel.Name">
            <summary>
            Gets or sets the category name.
            </summary>
            <value>The category name.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.CategoryViewModel.Description">
            <summary>
            Gets or sets the category description.
            </summary>
            <value>The category description.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.CategoryViewModel.HasChildren">
            <summary>
            Gets or sets a value indicating whether this category has children.
            </summary>
            <value>
            	<c>true</c> if this category has children; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.CategoryViewModel.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.CategoryViewModel"/> is visible in edit mode.
            </summary>
            <value><c>true</c> if visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.CategoryViewModel.Selectable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.CategoryViewModel"/> is selectable in edit mode.
            </summary>
            <value><c>true</c> if selectable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.CategoryViewModel.ParentsNameCollection">
            <summary>
            Gets or sets the parents's name collection.
            </summary>
            <value>The parent's name collection.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ChannelStoreModel.IsActive">
            <summary>
            Determines whether the specified channel is active given the specified context.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ChannelStoreModel.ChannelName">
            <summary>
            Gets the name of the channel.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ChannelStoreModel.ResolutionId">
            <summary>
            Gets or sets the resolution id.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ChannelStoreModel.Name">
            <summary>
            Gets the name of this DisplayChannel localized to the current language.
            If no localized name exist <see cref="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ChannelStoreModel.ChannelName"/> will be returned.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ChannelStoreModel.NameLocalizationFormat">
            <summary>
            Gets the name localization format.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentDataContext">
            <summary>
            Provides detailed information about a <see cref="T:EPiServer.Core.IContent"/> object.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentDataContext.ParentLink">
            <summary>
            Gets or sets the content parent link.
            </summary>
            <value>The content parent link.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentDataContext.CustomViewType">
            <summary>
            Gets or sets the custom view type associated with this context.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentDataContext.Language">
            <summary>
            Gets or sets the language.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentDataContext.PublicUrl">
            <summary>
            Gets or sets the public friendly URL.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentDataContext.EditablePreviewUrl">
            <summary>
            Gets or sets the editable preview URL.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentDataContext.Capabilities">
            <summary>
            Gets or sets the capabilities for this context.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentDataContext.LanguageContext">
            <summary>
            Gets or sets the language context.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentDataContext.HasSiteChanged">
            <summary>
            The requested content is on a different site then the current site.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentDataContext.Hosts">
            <summary>
            All mapped host definitions for the context.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentDataContext.FullHomeUrl">
            <summary>
            Full Url to home view.
            </summary>
            <remarks>Used by the client when <see cref="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentDataContext.HasSiteChanged"/> is true.</remarks>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentDataContext.VersionedUrl">
            <summary>
            Gets or sets the versioned URL.
            </summary>
            <value>The versioned URL.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentDataContext.DataType">
            <summary>
            Gets or sets the type of the data used to distinguish the different content types.
            </summary>
            <value>The actual content type.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentDataContext.HasTemplate">
            <summary>
            Gets or sets whether the content has a template matching the template type.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentLanguageBranchModel">
            <summary>
            Represents a class which holds brief information of a language branch
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentLanguageBranchModel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentLanguageBranchModel"/> class.
            </summary>
            <param name="languageBranch">The language branch.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentLanguageBranchModel.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentLanguageBranchModel"/> class.
            </summary>
            <param name="cultureInfo">The culture info object.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentLanguageBranchModel.Name">
            <summary>
            Gets or sets the name of language
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentLanguageBranchModel.LanguageId">
            <summary>
            Gets or sets the language ID
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentLanguageBranchModel.IsMasterLanguage">
            <summary>
            Gets or sets a value indicating whether this instance is master language.
            </summary>
            <value>
            	<c>true</c> if this instance is master language; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentLanguageBranchModel.CommonDraftLink">
            <summary>
            Gets or sets the common draft version.
            </summary>
            <value>
            The common draft version.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentLanguageBranchModel.UrlSegment">
            <summary>
            The url segment used on the site
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentLanguageBranchModel.AccessMask">
            <summary>
            The access right of language, should be set by caller
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentTypeViewModel">
            <summary>
            Implementation of a content transfer object used when transfering <see cref="T:EPiServer.DataAbstraction.ContentType"/> data to the client.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentTypeViewModel.Id">
            <summary>
            Gets or sets the id of the content type model.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentTypeViewModel.Guid">
            <summary>
            Gets or sets the GUID based identifier of this instance.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentTypeViewModel.Name">
            <summary>
            Gets or sets the name of the content type.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentTypeViewModel.LocalizedName">
            <summary>
            Gets or sets the localized name.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentTypeViewModel.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentTypeViewModel.LocalizedDescription">
            <summary>
            Gets or sets the localized description.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentTypeViewModel.ImagePath">
            <summary>
            Gets or sets the image path.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentTypeViewModel.GroupName">
            <summary>
            Gets or sets a value that is used to group fields.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentTypeViewModel.AvailableContentTypes">
            <summary>
            Gets or sets the available content types.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentTypeViewModel.TypeIdentifier">
            <summary>
            Gets or sets the type identifier for this content type.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentVersionViewModel">
            <summary>
            Data transfer class for page versions.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentVersionViewModel.IsCommonDraft">
            <summary>
            Gets or sets a value indicating whether this instance is common draft.
            </summary>
            <value>
            	<c>true</c> if this instance is common draft; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentVersionViewModel.AllowToDelete">
            <summary>
            Gets or sets a value indicating whether this instance can be deleted.
            </summary>
            <value>
            	<c>true</c> if this instance can be deleted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentVersionViewModel.ProjectName">
            <summary>
            Gets or sets a value of project name related with item
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentViewModel">
            <summary>
            A view model representing an <see cref="T:EPiServer.Core.IContent"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentViewModel.ContentLink">
            <summary>
            Gets or sets the version ID.
            </summary>
            <value>The version ID.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentViewModel.Language">
            <summary>
            Gets or sets the language.
            </summary>
            <value>The language.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentViewModel.Name">
            <summary>
            Get or sets the page name of current page
            </summary>
            <value>The page name</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentViewModel.SavedBy">
            <summary>
            Gets or sets the username that saved this version last.
            </summary>
            <value>The saved by.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentViewModel.StatusChangedBy">
            <summary>
            Gets or sets the username that last changed status for the version.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentViewModel.SavedDate">
            <summary>
            Gets or sets the saved date.
            </summary>
            <value>The saved date.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentViewModel.Uri">
            <summary>
            The URI identifying the page version.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentViewModel.Status">
            <summary>
            Gets or sets the status of the version as an integer value that matches <see cref="T:EPiServer.Core.VersionStatus"/>.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ContentViewModel.TypeIdentifier">
            <summary>
            Gets or sets the content class.
            </summary>
            <value>The content class.</value>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Internal.DisplayOptionModel.#ctor(EPiServer.Web.DisplayOption,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.DisplayOptionModel" /> class.
            </summary>
            <param name="option">Display option.</param>
            <param name="localizationService">The localization service.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.DisplayOptionModel.Id">
            <summary>
            Unique id for this option
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.DisplayOptionModel.Name">
            <summary>
            The name of the display option
            </summary>
            <remarks>If a language resource key is specified it will be automatically translated when sent to the client</remarks>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.DisplayOptionModel.Description">
            <summary>
            Description for the display option
            </summary>
            <remarks>If a language resource key is specified it will be automatically translated when sent to the client</remarks>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.DisplayOptionModel.Tag">
            <summary>
            The rendering tag to apply when the option has been selected
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.DisplayOptionModel.IconClass">
            <summary>
            Css class for the icon that is used in the display option selector
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.EnhancedStructureStoreContentDataModel.IsPartOfActiveApproval">
            <summary>
            Indicates if the content is part of an active approval
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.EnhancedStructureStoreContentDataModel.HasPublishedVersion">
            <summary>
            Indicates if the content has a published version in the current language
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.ExtendedVersionStatus">
            <summary>
            Extends the version status with an Expired flag. Only used in the UI layer.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.InUseNotificationViewModel">
            <summary>
            Represents a class which holds information regarding which user is currently editing a page.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Internal.InUseNotificationViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.InUseNotificationViewModel"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.InUseNotificationViewModel.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.InUseNotificationViewModel.UserName">
            <summary>
            Gets or sets the name of current editing user.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.InUseNotificationViewModel.Created">
            <summary>
            Gets or sets the time the notification was created.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.InUseNotificationViewModel.Modified">
            <summary>
            Gets or sets the last time the notification was modified.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.InUseNotificationViewModel.ContentLink">
            <summary>
            Gets or sets the link to the item that has the notifications.
            </summary>
            <value>The content link.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.InUseNotificationViewModel.LanguageBranch">
            <summary>
            The language this content is in.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.InUseNotificationViewModel.Name">
            <summary>
            Gets or sets the name of the item that has the notification.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.InUseNotificationViewModel.Uri">
            <summary>
            Gets or sets the <see cref="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.InUseNotificationViewModel.Uri"/> of the item that has the notification.
            </summary>
            <value>The <see cref="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.InUseNotificationViewModel.Uri"/> of the item that has the notification.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.InUseNotificationViewModel.AddedManually">
            <summary>
            Gets or sets a value indicating whether this notification has been added manually.
            </summary>
            <value><c>true</c> if  this notification has been added manually; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Internal.InUseNotificationViewModel.CreateFromNotification(EPiServer.Shell.Notification.InUseNotification,EPiServer.Core.IContent)">
            <summary>
            Creates a new <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.InUseNotificationViewModel"/> from a notification.
            </summary>
            <param name="notification">The notification.</param>
            <param name="content">The content item that has the notification.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.SiteLanguageModel">
            <summary>
            A model representing one enabled language for one specific site.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.SiteLanguageModel.Name">
            <summary>
            Gets or sets the name of the language as it will be displayed in the UI.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.SiteLanguageModel.LanguageId">
            <summary>
            Gets or sets the id of the language as it will be displayed in the UI.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.SiteLanguageModel.IsAvailable">
            <summary>
            Gets or sets a value indicating whether this language is available on the start page.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.SiteLanguageModel.HasEditAccess">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:EPiServer.Security.PrincipalInfo.CurrentPrincipal"/> has edit access on this language.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.SiteLanguageModel.EditUrl">
            <summary>
            Gets or sets the url to the CMS edit view of the site.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.SiteLanguageModel.Url">
            <summary>
            Gets or sets the URL for this language.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.SiteLanguageModel.UrlSegment">
            <summary>
            The url segment used on the site
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.SiteLanguageModel.UiUrl">
            <summary>
            Gets a value indicating whether this instance is language node.
            Gets or sets the URL to the root of the UI for the site.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.SiteLanguageModel.IsLanguageNode">
            <summary>
            Gets a value indicating whether this setting is a language section of a site.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.SiteLanguageModel.Host">
            <summary>
            Gets the host name for the site
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.SiteLanguageModel.Hosts">
            <summary>
            Gets all hosts of the site
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.VisitorGroupViewModel">
            <summary>
            Data transfer class for visitor group.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.VisitorGroupViewModel.Id">
            <summary>
            Visitor group id.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.VisitorGroupViewModel.Name">
            <summary>
            Gets or sets the visitor group name.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Internal.VisitorGroupViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.VisitorGroupViewModel"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Internal.VisitorGroupViewModel.#ctor(EPiServer.Personalization.VisitorGroups.VisitorGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.VisitorGroupViewModel"/> class.
            </summary>
            <param name="cat">The category.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.WasteBasketViewModel">
            <summary>
            A view model representing an <see cref="T:EPiServer.Core.ContentProvider"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.WasteBasketViewModel.WasteBasketLink">
            <summary>
            Gets or sets the waste basket link.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.WasteBasketViewModel.Name">
            <summary>
            Gets or sets the Content Provider name.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.WasteBasketViewModel.TypeIdentifiers">
            <summary>
            Gets or sets the requested content class to filter.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.WasteBasketViewModel.Icon">
            <summary>
            Gets or sets the icon URL.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.WasteBasketViewModel.Active">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Internal.WasteBasketViewModel"/> is active.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.WasteBasketViewModel.HasDeleteAccess">
            <summary>
            Gets or sets a value indicating whether this instance has delete access.
            </summary>
            <value>
            <c>true</c> if this instance has delete access; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.WasteBasketViewModel.RestoreRoot">
            <summary>
            Gets or sets the restore root.
            </summary>
            <value>
            The restore root.
            </value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.WasteBasketViewModel.IsDefaultProvider">
            <summary>
            Gets or sets a value indicating whether this instance is default provider.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Internal.WasteBasketViewModel.IsSearchable">
            <summary>
            Gets or sets a value indicating whether this content provider has search capability.
            </summary>
            <value>
                <c>true</c> if this content provider has search capability; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.PatchContentDataModel">
            <summary>
            The data model to use when patching content
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.PatchContentDataModel.Id">
            <summary>
            Gets or sets the reference to the content to patch.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.PatchContentDataModel.Properties">
            <summary>
            Gets or sets the serialized properties.
            </summary>
            <remarks>
            The key in the dictionary is the property name, the value is the serialized property value.
            </remarks>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.PatchContentDataModel.Action">
            <summary>
            Gets or sets a value indicating what action should be performed on the content.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.PatchContentDataModel.ForceCurrent">
            <summary>
            Gets or sets a value indicating whether the specified properties should be saved with the ForceCurrentVersion save action.
            </summary>
            <remarks>Mutually exlusive with the <see cref="P:EPiServer.Cms.Shell.UI.Rest.Models.PatchContentDataModel.PublishChanges"/> property.</remarks>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.PatchContentDataModel.PublishChanges">
            <summary>
            Gets or sets a value indicating whether the specified properties should be published (to the published version) or saved.
            </summary>
            <remarks>Mutually exlusive with the <see cref="P:EPiServer.Cms.Shell.UI.Rest.Models.PatchContentDataModel.ForceCurrent"/> property.</remarks>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.IHasChildrenEvaluator">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Evaluates wheter a content has child contents
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.IHasChildrenEvaluator.CanExecute(EPiServer.Core.IContent,EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransformContext)">
            <summary>
            Determines whether this instance can execute on the specified content.
            </summary>
            <param name="content">The parent content.</param>
            <param name="context">The model transform context.</param>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.IHasChildrenEvaluator.Rank">
            <summary>
            Gets the rank (priority) of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.IHasChildrenEvaluator" /> implementation.
            </summary>
            <remarks>
            Registered <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.IHasChildrenEvaluator" /> implementations will be tried, using the <see cref="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.IHasChildrenEvaluator.CanExecute(EPiServer.Core.IContent,EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransformContext)"/>
            method, until one is found that can execute the evaluation. An implementation with a higher rank will be
            tried before one with a lower rank.
            </remarks>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.IHasChildrenEvaluator.Execute(EPiServer.Core.IContent,System.Collections.Generic.IEnumerable{System.String},System.Boolean,EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransformContext)">
            <summary>
            Determines whether the specified content has children, filtered by
            the supplied type identifiers and whether to count all languages or not.
            </summary>
            <param name="content">The parent content.</param>
            <param name="typeIdentifiers">The type identifiers to filter by.</param>
            <param name="allLanguages">if set to <c>true</c>, evaluate regardless of content language.</param>
            <param name="context">The model transform context.</param>
            <returns>True if the content has matching children, otherwise false.</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.ContentDataModelBaseTransform">
            <summary>
            Class to transform ContentDataStoreModelBase
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.ContentDataModelBaseTransform.#ctor(EPiServer.Shell.Notification.IInUseNotificationRepository,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.IContentRepository,EPiServer.Cms.Shell.UI.Rest.Capabilities.ContentCapabilitiesResolver,EPiServer.Web.IPermanentLinkMapper,EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.Core.IContentProviderManager,EPiServer.Shell.UIDescriptorRegistry,EPiServer.Web.TemplateResolver,EPiServer.Web.Routing.UrlResolver,EPiServer.Web.ISiteDefinitionRepository,EPiServer.Globalization.LanguageResolver,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Web.SiteDefinition})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.ContentDataModelBaseTransform"/> class.
            </summary>
            <param name="inUseNotificationRepository">The in use notification repository.</param>
            <param name="contentTypeRepository">The content type repository.</param>
            <param name="contentRepository">The content repository.</param>
            <param name="capabilitiesResolver">The capabilities resolver.</param>
            <param name="permanentLinkMapper">The permanent link mapper.</param>
            <param name="languageBranchRepository">The language branch repository.</param>
            <param name="contentProviderManager">The content provider manager.</param>
            <param name="uiDescriptorRegistry">The UI descriptor registry.</param>
            <param name="templateResolver">The template resolver</param>
            <param name="urlResolver">The url resolver</param>
            <param name="siteDefinitionRepository"></param>
            <param name="languageResolver"></param>
            <param name="currentSiteDefinition"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.ContentDataModelBaseTransform.GetLanguageAccessRights(EPiServer.Security.AccessLevel,EPiServer.Core.IContent)">
            <summary>
            Gets the access rights.
            </summary>
            <param name="contentAccess">The content access.</param>
            <param name="content">The content data.</param>
            <returns>
            The access level of the content
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.ContentDataModelBaseTransform.GetProviderCapabilities(EPiServer.Core.IContent)">
            <summary>
            Gets the capabilities of the content provider.
            </summary>
            <param name="content">The content data.</param>
            <returns>The capabilities of the content provider</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.ContentDataStoreModelTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.ContentDataStoreModelTransform" /> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.ContentDataStoreModelTransform.GetAccessRights(EPiServer.Core.IContent)">
            <summary>
            Gets the access rights.
            </summary>
            <param name="content">The content data.</param>
            <returns>The access level of the content</returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.ContentVersionFilter.Order">
            <summary>
            Sets the order as an input filter because the transform can change the source data for the pipeline.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.DefaultHasChildrenEvaluator">
            <summary>
            This type/member supports the EPiServer infrastructure and is not intended to be
            used directly from your code.
            
            Default implementation which works with any <see cref="T:EPiServer.Core.IContent"/> by calling into
            the <see cref="T:EPiServer.IContentRepository"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.DefaultHasChildrenEvaluator.#ctor(EPiServer.IContentRepository,EPiServer.Cms.Shell.UI.Rest.ContentQuery.IContentQueryHelper,EPiServer.Core.LanguageSelectorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.DefaultHasChildrenEvaluator"/> class.
            </summary>
            <param name="contentRepository">The content repository.</param>
            <param name="contentQueryHelper">The content query helper.</param>
            <param name="languageSelectorFactory"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.DefaultHasChildrenEvaluator.CanExecute(EPiServer.Core.IContent,EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransformContext)">
            <summary>
            Returns true as this is an all-purpose implementation.
            </summary>
            <param name="content">The parent content.</param>
            <param name="context">The model transform context.</param>
            <returns>True</returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.DefaultHasChildrenEvaluator.Rank">
            <summary>
            Returns 0 as this is an all-purpose implementation.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.DefaultHasChildrenEvaluator.Execute(EPiServer.Core.IContent,System.Collections.Generic.IEnumerable{System.String},System.Boolean,EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransformContext)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.MayHaveChildrenEvaluator">
             <summary>
             This type/member supports the EPiServer infrastructure and is not intended to be
             used directly from your code.
            
             Checks for any existing children, regardless of language availability or security.
             </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.MayHaveChildrenEvaluator.#ctor(EPiServer.Core.IContentProviderManager,EPiServer.DataAbstraction.ILanguageBranchRepository,EPiServer.Configuration.Settings,EPiServer.Globalization.LanguageResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.MayHaveChildrenEvaluator" /> class.
            </summary>
            <param name="contentProviderManager">The content provider manager.</param>
            <param name="languageBranchRepository">The language branch repository.</param>
            <param name="settings">The current settings instance.</param>
            <param name="languageResolver">Language resolver used to resolve PreferredCulture</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.MayHaveChildrenEvaluator.CanExecute(EPiServer.Core.IContent,EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransformContext)">
            <summary>
            Returns according to the current value of <see cref="P:EPiServer.Configuration.Settings.UIOptimizeTreeForSpeed"/>.
            </summary>
            <param name="content">The parent content.</param>
            <param name="context">The model transform context.</param>
            <returns>The value of <see cref="P:EPiServer.Configuration.Settings.UIOptimizeTreeForSpeed"/></returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.MayHaveChildrenEvaluator.Rank">
            <summary>
            Returns 100 as this is preferred over the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.DefaultHasChildrenEvaluator"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.MayHaveChildrenEvaluator.Execute(EPiServer.Core.IContent,System.Collections.Generic.IEnumerable{System.String},System.Boolean,EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransformContext)">
            <summary>
            Checks for any existing children, regardless of language availability or security.
            </summary>
            <param name="content">The content.</param>
            <param name="typeIdentifiers">The type identifiers.</param>
            <param name="allLanguages">if set to <c>true</c> iterates all language branches.</param>
            <param name="context">The model transform context.</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.ModelTransformContext">
            <summary>
            Used as the context object passed through the pipeline.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.ModelTransformContext.#ctor(EPiServer.Cms.Shell.UI.Rest.DefaultQueryParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.ModelTransformContext"/> class.
            </summary>
            <param name="queryParameters">The query parameters.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.ModelTransformContext.Source">
            <summary>
            Gets or sets the source used as a base data for the transform.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.ModelTransformContext.Target">
            <summary>
            Gets or sets the target instance on which the transform should be applied.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.ModelTransformContext.QueryParameters">
            <summary>
            Gets the query parameters.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.ModelTransformContext.GetContextValue``1(System.String)">
            <summary>
            Gets the context value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.ModelTransformContext.SetContextValue(System.String,System.Object)">
            <summary>
            Sets the context value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.ModelTransformContext.ContextValues">
            <summary>
            Gets the context values.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.PopulatePageDataModel">
            <summary>
            Populates properties from <see cref="T:EPiServer.Core.PageData"/> model
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.PopulatePageDataModel.ShouldTransformInstance(EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransformContext)">
            <summary>
            Determines whether the transform should be applied on this instance.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.PopulatePageDataModel.TransformInstance(EPiServer.Core.IContent,EPiServer.Cms.Shell.UI.Rest.Models.StructureStoreContentDataModel,EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransformContext)">
            <summary>
            Populates specific page data properties for page data model
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.StructureStoreModelTransform.IsStartPage(EPiServer.Core.IContent)">
            <summary>
            Determines whether the specified content is configured as a startpage.
            Only check among pages of default content provider.
            </summary>
            <param name="content">The content.</param>
            <returns>
              <c>true</c> if <paramref name="content"/> is a start page; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.StructureStoreModelTransform.GetName(EPiServer.Core.IContent)">
            <summary>
            Get the content name
            </summary>
            <param name="source">The item to get the name for.</param>
            <returns>The name of the content if it not a site asset folder or global asset folder</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.Internal.StructureStoreModelTransform.IsSubRoot(EPiServer.Core.IContent)">
            <summary>
            Determines whether the specified content is configured as a sub root.
            Only check among pages of default content provider.
            </summary>
            <param name="content">The content.</param>
            <returns>
              <c>true</c> if <paramref name="content"/> is a sub root; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransform">
            <summary>
            Implement to use  in a transforming pipeline.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransform.Order">
            <summary>
            Gets the order of when in the pipeline the transform should be applied.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransform.CanExecute(System.Type,EPiServer.Cms.Shell.UI.Rest.DefaultQueryParameters)">
            <summary>
            Determines whether this instance can execute on the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="queryParameters">The query parameters.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransform.Execute(System.Collections.Generic.IEnumerable{EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransformContext})">
            <summary>
            Executes the the transform on the specified <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransformContext"/> models.
            </summary>
            <param name="models">The models.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransformContext">
            <summary>
            Implement to use as the context object passed through the pipeline.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransformContext.Source">
            <summary>
            Gets or sets the source used as a base data for the transform.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransformContext.Target">
            <summary>
            Gets or sets the target instance on which the transform should be applied.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransformContext.GetContextValue``1(System.String)">
            <summary>
            Gets the context value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransformContext.SetContextValue(System.String,System.Object)">
            <summary>
            Sets the context value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransformContext.QueryParameters">
            <summary>
            Gets the query parameters.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.TransformBase`1">
            <summary>
            Use as base class to get automated handling of yielding returns of the enumereable.
            </summary>
            <typeparam name="TTarget">The type of the target model.</typeparam>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.TransformBase`1.Order">
            <summary>
            Gets the order of when in the pipeline the transform should be applied.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.TransformBase`1.CanExecute(System.Type,EPiServer.Cms.Shell.UI.Rest.DefaultQueryParameters)">
            <summary>
            Determines whether this instance can execute on the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="queryParameters">The query parameters.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.TransformBase`1.ShouldTransformInstance(EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransformContext)">
            <summary>
            Determines whether the transform should be applied on this instance.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.TransformBase`1.Execute(System.Collections.Generic.IEnumerable{EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransformContext})">
            <summary>
            Executes the the transform on the specified <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransformContext" /> models.
            </summary>
            <param name="items">The items.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Models.Transforms.TransformBase`1.TransformInstance(EPiServer.Core.IContent,`0,EPiServer.Cms.Shell.UI.Rest.Models.Transforms.IModelTransformContext)">
            <summary>
            Transforms the instance.
            </summary>
            <param name="source">The source model to be the base of the transform.</param>
            <param name="target">The target to apply the transform to.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationService">
            <summary>
            A facade service class to be used when working with notifications.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationService.#ctor(EPiServer.Notification.IUserNotificationRepository,EPiServer.Notification.QueryableNotificationUserService)">
            <summary>
            Instantiates an instance of NotificationService.
            </summary>
            <param name="userNotificationRepository">User notification repository</param>
            <param name="queryableNotificationUserService">Queryable notification user service</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationService.GetAllUserNotificationsAsync(System.Security.Principal.IPrincipal,EPiServer.Shell.Services.Rest.ItemRange)">
            <summary>
            Get all notifications for logged in user.
            </summary>
            <param name="user">Logged in user</param>
            <param name="range">Item range</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationService.GetUserNotificationByIdAsync(System.Security.Principal.IPrincipal,System.Int32)">
            <summary>
            Get notification by id, for logged in user.
            </summary>
            <param name="user">Logged in user</param>
            <param name="notificationId">Notification id</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationService.MarkAsReadAsync(System.Security.Principal.IPrincipal,System.Int32)">
            <summary>
            Mark specified notification as read.
            </summary>
            <param name="user">Logged in user</param>
            <param name="notificationId">Id of notification to mark as read</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationService.MarkAllAsReadAsync(System.Security.Principal.IPrincipal)">
            <summary>
            Mark all user notifications as read.
            </summary>
            <param name="user">Logged in user</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationService.GetUnreadNotificationsCountAsync(System.Security.Principal.IPrincipal)">
            <summary>
            Get unread notifications count for logged in user.
            </summary>
            <param name="user">Logged in user</param>
            <returns>Number of unread notifications as int</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationService.GetNotificationUserAsync(System.Security.Principal.IPrincipal)">
            <summary>
            Utility method for getting a INotificationUser.
            </summary>
            <param name="user">Logged in user</param>
            <returns>Logged in user as INotificationUser</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationStore.Get(System.Nullable{System.Int32},EPiServer.Shell.Services.Rest.ItemRange)">
            <summary>
            Get the notifications matching an ID or range for specific user.
            </summary>
            <param name="id">Notification ID</param>
            <param name="range">Item range</param>
            <returns>Notifications</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationStore.MarkAsRead(System.Int32)">
            <summary>
            Marks notification as read
            </summary>
            <param name="id">Notification ID</param>
            <returns>HTTP status code</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationStore.MarkAllAsRead">
            <summary>
            Marks all users notifications as read
            </summary>
            <returns>HTTP status code</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationStore.GetUnreadCount">
            <summary>
            Get users unread notifications count
            </summary>
            <returns>Total unread notifications as an integer</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationStore.GetUserNotificationByIdAsync(System.Int32)">
            <summary>
            Get the user notification matching an ID
            </summary>
            <param name="id">Notification ID</param>
            <param name="range">Item range</param>
            <returns>Notification</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationStore.GetAllUserNotificationsAsync(EPiServer.Shell.Services.Rest.ItemRange)">
            <summary>
            Gets all notifications for user
            </summary>
            <param name="range">Item range</param>
            <returns>Notifications</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationStore.CreateViewModel(EPiServer.Notification.UserNotificationMessage)">
            <summary>
            Casts UserNotificationMessage to a NotificationViewModel
            </summary>
            <param name="userModel">The UserNotificationMessage</param>
            <returns>An instance of NotificationViewModel</returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationViewModel.Id">
            <summary>
            The id of the message.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationViewModel.IconKey">
            <summary>
            Gets or sets the icon key which is either for the Project or for Content's typeIdentifier
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationViewModel.Link">
            <summary>
            The uri string for the origin of message (in current case it is project contextresolver uri)
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationViewModel.ContentLanguage">
            <summary>
            Gets or sets the Content language if the message posted on an ILocalizable content
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationViewModel.Subject">
            <summary>
            The message subject.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationViewModel.Content">
            <summary>
            The content of the message.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationViewModel.Posted">
            <summary>
            The time when the message was posted.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationViewModel.HasRead">
            <summary>
            Gets or sets the flag whether the Notification has been read or not
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Notifications.NotificationViewModel.IsExternal">
            <summary>
            Gets or sets a value indicating whether the link of a notification is external link.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.CurrentProject">
            <summary>
            Represents the current project (i.e the selected project in the Project mode). The project properties (i.e ProjectId) are retrived from given HttpContext.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.CurrentProject.#ctor(EPiServer.ServiceLocation.ServiceAccessor{System.Web.HttpContextBase},EPiServer.ServiceLocation.ServiceAccessor{EPiServer.DataAbstraction.ProjectRepository})">
            <summary>
            Creates the instance of <see cref="T:EPiServer.Cms.Shell.UI.Rest.Projects.CurrentProject"/>
            </summary>
            <param name="httpContextAccessor">Service accessor for getting the HttpContext.</param>
            <param name="projectRepositoryAccessor"></param>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.CurrentProject.ProjectId">
            <summary>
            Gets the ProjectId.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ContentEventsListener.AddToProject(EPiServer.Core.ContentReference,System.String)">
            <summary>
            Add a project item to the current project for the given content reference and language.
            </summary>
            <param name="contentLink">The content reference to be added.</param>
            <param name="languageBranch">The language of the content to be added.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Exceptions.ContentDoesNotExistsInCurrentLanguageException">
            <summary>
            Represents the Exception when the content does not exists in the current language
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Exceptions.ContentDoesNotExistsInCurrentLanguageException.#ctor(System.String)">
            <summary>
            Creates the instance of ContentDoesNotExistsInCurrentLanguageException
            </summary>
            <param name="message">The message propagated to the Exception</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Exceptions.MissingProjectException.#ctor(System.String)">
            <summary>
            Creates the instance of MissingProjectException
            </summary>
            <param name="message">The message propagated to the Exception</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Exceptions.ProjectAlreadyExistsException.#ctor(System.String)">
            <summary>
            Creates an instance of ProjectAlreadyExistsException
            </summary>
            <param name="message">The message propagated to the Exception</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Exceptions.ProjectDelayedPublishedException">
            <summary>
            An exception covering the case when someone attempts to modify a project which is delayed published.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Exceptions.ProjectDelayedPublishedException.#ctor">
            <summary>
            Creates an instance of <code>ProjectDelayedPublishedException</code>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Exceptions.ProjectIsNotActiveException.#ctor(System.String)">
            <summary>
            Creates an instance of ProjectIsNotActiveException
            </summary>
            <param name="message">The message propagated to the Exception</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Exceptions.ProjectItemIsNotVersionableException">
            <summary>
            Represents the Exception when a project item isn't Versionable
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Exceptions.ProjectItemIsNotVersionableException.#ctor(System.String)">
            <summary>
            Creates the instance of ProjectItemIsNotVersionableException
            </summary>
            <param name="message">The message propagated to the Exception</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Exceptions.ProjectItemUserHasNoEditRightsException">
            <summary>
            Represents the Exception when the user has no edit rights
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Exceptions.ProjectItemUserHasNoEditRightsException.#ctor(System.String)">
            <summary>
            Creates the instance of ProjectItemUserHasNoEditRights
            </summary>
            <param name="message">The message propagated to the Exception</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Exceptions.ProjectPublishedException">
            <summary>
            An exception covering the case when someone attempts to modify a project which is published.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Exceptions.ProjectPublishedException.#ctor(System.String)">
            <summary>
            Creates an instance of <code>ProjectPublishedException</code>.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ImageSaveEventListener">
            <summary>
            The action listner for ImageSaveEventListner.   
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ImageSaveEventListener.SaveImage(EPiServer.UI.Edit.ImageEditor.ImageSaveEventArgs)">
            <summary>
            Saves the image through ContentService.SaveMedia
            </summary>
            <param name="args">The instance of ImageSaveEventArgs. Null value or null image data will not execute any logic.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectConverter">
            <summary>
            Converter to convert <see cref="T:EPiServer.DataAbstraction.Project"/> to <see cref="T:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectViewModel"/> and vice verse
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectConverter.GetViewModel(EPiServer.DataAbstraction.Project)">
            <summary>
            Instantiates a project view model
            </summary>
            <param name="model">The project</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectConverter.GetExistingProject(EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectViewModel)">
            <summary>
            Gets a project if matches the project id with given viewmodel
            </summary>
            <param name="viewModel">The projectviewmodel</param>
            <returns>The project</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectEventViewModel">
            <summary>
            Model used when pushing notifications to the client about project changes.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectEventViewModel.Action">
            <summary>
            The type of change
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectEventViewModel.Id">
            <summary>
            Id of the changed project
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemConverter">
            <summary>
            Converter to convert <see cref="T:EPiServer.DataAbstraction.ProjectItem"/> to <see cref="T:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemViewModel"/> and vice verse
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemEventViewModel">
            <summary>
            Model used when pushing notifications to the client about changed project items.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemEventViewModel.Action">
            <summary>
            The type of change
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemEventViewModel.ProjectId">
            <summary>
            Id of the changed project
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemEventViewModel.Id">
            <summary>
            Id of the updated project item
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemEventViewModel.Modified">
            <summary>
            Gets or sets the Date at the which the connected contentlink's status was last modified. Used for refresh/notify on client side
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemViewModel">
            <summary>
            Represents the ProjectItem which travels on the wire to &amp; from client
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemViewModel.AccessMask">
            <summary>
            Gets or sets the access rights on this item for the current user.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemViewModel.HasApprovalDefinition">
            <summary>
            Gets or sets whether an approval definition exists for the content associated with the project item.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemViewModel.IsStartCommentRequired">
            <summary>
            Gets or sets whether a comment is required when sending for review according to the approval definition associated with the project item.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemViewModel.Id">
            <summary>
            Gets or sets the id of the item.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemViewModel.ProjectId">
            <summary>
            Gets or sets the relevant project id
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemViewModel.ProjectName">
            <summary>
            Gets the name on the associated project
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemViewModel.ContentLink">
            <summary>
            Gets or sets the actual contentreference for the item
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemViewModel.ContentUri">
            <summary>
            Gets or sets the navigation identifier for the content referenced by the project item.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemViewModel.Status">
            <summary>
            Gets or sets the version status of the project item.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemViewModel.PrimaryTypeIdentifier">
            <summary>
            The name of the first implemented primary type identifier for the item.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemViewModel.DelayPublishUntil">
            <summary>
            Gets the date and time when the content will be published it has been scheduled; otherwise null.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemViewModel.Modified">
            <summary>
            Gets or sets the Date at the which the connected contentlink's status was last modified. Used for sorting items on client side
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemViewModel.ThumbnailUrl">
            <summary>
            Gets or sets the ThumbnailUrl if the content has a thumbnail
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemViewModel.UserName">
            <summary>
            Gets or sets the UserName that last edited the contentitem
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemViewModel.HasComments">
            <summary>
            Gets or sets whether the project item has any MessageActivities or ActivityComments
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemViewModel.Content">
            <summary>
            Gets or sets the content associated with the project item view model
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemViewModel.ProjectItem">
            <summary>
            Gets or sets the project item for this view model.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectViewModel">
            <summary>
            Model for the Project 
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectViewModel.FailedItemsCount">
            <summary>
            Gets or sets the number of ProjectItems which were failed to publish
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ViewModelConverter`2">
            <summary>
            Base class for an ViewModel converter implementation
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TViewModel"></typeparam>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ViewModelConverter`2.ToModels(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Convert view models to models
            </summary>
            <param name="viewModels">The view models to convert</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ViewModelConverter`2.ToViewModels(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Convert models to view models
            </summary>
            <param name="models">The models to convert</param>
            <returns>A collection of transformed view models</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ViewModelConverter`2.ApplyExpensiveTransformationsAsync(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Additional transformation logic to run on view models once all sorting and filtering is complete.
            </summary>
            <param name="viewModel">The models to transform</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ViewModelConverter`2.ToModel(`1)">
            <summary>
            Convert view model to model
            </summary>
            <param name="viewModel">The viewmodel to convert</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ViewModelConverter`2.ToViewModel(`0)">
            <summary>
            Convert model to view model
            </summary>
            <param name="model">The model to convert</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectContextResolver">
            <summary>
            Resolves project URIs for the shell context service.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectContextResolver.TryResolveUri(System.Uri,EPiServer.Shell.Rest.ClientContextBase@)">
            <summary>
            Resolves the context for a given URI.
            </summary>
            <param name="uri">The URI uniquely identifying a specific data.</param>
            <param name="instance">Returns the context representing the given URI.</param>
            <returns>
            True if the context was loaded.
            </returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectEventListener">
            <summary>
            Listens to project save and delete events and sends change events to the <see cref="T:EPiServer.Shell.UI.Messaging.Internal.PushMessenger"/>
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectEventListener.Start">
            <summary>
            Overridden to attach event listeners to the project and project item save and delete events.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectEventListener.Stop">
            <summary>
            Overridden to detach event listeners
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectItemStore.Get(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},System.Nullable{System.Boolean},EPiServer.Shell.Services.Rest.ItemRange,System.Collections.Generic.IEnumerable{EPiServer.Shell.Services.Rest.SortColumn})">
            <summary>
            Get the items for the project which has an ID matching the given project ID.
            </summary>
            <param name="projectId">The ID of the project to get items for.</param>
            <param name="contentLinks">The contentLinks to get project items for.</param>
            <param name="scheduled">Flag indicating whether only scheduled items should be gotten.</param>
            <param name="range">The range of items to retrieve.</param>
            <param name="sortColumns">The list of sort column names and order</param>
            <returns>A rest result containing the items for the given project within the given range.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectItemStore.Post(EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectItemViewModel)">
            <summary>
            Add the given content reference to project's item collection.
            </summary>
            <param name="projectItem">The project item to add.</param>
            <returns>A rest result containing a status code indicating the outcome of the operation.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectItemStore.Delete(System.Nullable{System.Int32})">
            <summary>
            Removes the given project item.
            </summary>
            <param name="id">The ID of the project item to remove.</param>
            <returns>A rest result containing a status code indicating the outcome of the operation.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectItemStore.DeleteRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Removes the given project items.
            </summary>
            <param name="projectItems">The IDs of the project items to remove.</param>
            <returns>A rest result containing a status code indicating the outcome of the operation.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectItemStore.ReadyForReview(System.Collections.Generic.IEnumerable{System.Int32},System.String)">
            <summary>
            Marks the given project items as ready for review.
            </summary>
            <param name="projectItems">The IDs of the project items to mark as ready for review.</param>
            <param name="comment">A comment to associate with the ready for review activity.</param>
            <returns>A rest result containing a status code indicating the outcome of the operation.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectItemStore.ReadyToPublish(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Marks the given project items as ready to publish.
            </summary>
            <param name="projectItems">The IDs of the project items to mark as ready to publish.</param>
            <returns>A rest result containing a status code indicating the outcome of the operation.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectItemStore.DeleteInternal(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Deletes the given project items.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectItemStore.FilterAndSort(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.ProjectItem},System.Boolean,System.Collections.Generic.IEnumerable{EPiServer.Shell.Services.Rest.SortColumn})">
            <summary>
            Helper method to filter and sort project items.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectLoaderService.IsInProjectMode">
            <summary>
            Gets whether project mode is enabled. Returns true when project mode is enabled for the site
            and there is a current project.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectLoaderService.IsProjectModeEnabled">
            <summary>
            Returns true if project mode is enabled, if nothing has been configured
            we assume that project mode should be enabled
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectLoaderService.Get(System.Int32)">
            <summary>
            Gets a Project by id
            </summary>
            <param name="id">The id of the project</param>
            <returns>The project or <c>null</c> if it was not found</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectLoaderService.List(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Retrieves a list of Projects that has been stored by given criteria
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns>List of projects, if no projects was found an empty list will be returned</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectLoaderService.GetProjectItem(System.Int32)">
            <summary>
            Get a project item
            </summary>
            <param name="projectItemId">The id of the project item to get</param>
            <returns>The project item or if no project item was found <c>null</c></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectLoaderService.GetItems(System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get all ProjectItem that are linked to a project
            </summary>
            <param name="projectId">The project id</param>
            <param name="start"></param>
            <param name="end"></param>
            <returns>A list of project items, if no project items was found an empty list will be returned</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectLoaderService.GetItems(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
            <summary>
            Gets all <see cref="T:EPiServer.DataAbstraction.ProjectItem"/> that matches the provided <see cref="T:EPiServer.Core.ContentReference"/> list.
            </summary>
            <param name="contentReferences">The content references to match</param>
            <returns>A list of project items, if no project items was found an empty list will be returned</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectLoaderService.GetProjectItemReference(EPiServer.Core.ContentReference,System.Int32,System.String)">
            <summary>
            Try to get the content link of the project item if it exists in the given project
            </summary>
            <param name="contentLink">The content item to look for the project item reference</param>
            <param name="projectId">Id of the project</param>
            <returns>The content link of the project item in the given project if it exists.
            Otherwise return null</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectLoaderService.IsPartOfProject(EPiServer.Core.ContentReference,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Check whether a content item is already part of a project
            </summary>
            <param name="contentLink">The content item to test</param>
            <param name="projectIds">Ids of the projects</param>
            <returns>True if content is part of the project; otherwise false.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectLoaderService.IsPartOfAnotherProject(EPiServer.Core.ContentReference)">
            <summary>
            Determines whether the content is part of a project that is not the selected project.
            </summary>
            <param name="contentLink">The content to check.</param>
            <returns>
            Returns true when the content is part of a project that is not the selected project;
            otherwise false. This method will also return false if there is no selected project.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectLoaderService.GetProjectName(EPiServer.Core.ContentReference)">
            <summary>
            Gets the project name if the content is part of a project
            </summary>
            <param name="contentLink">The content to find the project for.</param>
            <returns>
            Name of the project
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectLoaderService.GetProjectModeSettingFromSiteConfiguration">
            <summary>
            Gets the project mode setting from site configuration, if the value never has been set null will be returned
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectLoaderService.DeleteProjectModeSettingInSiteConfiguration">
            <summary>
            Deletes the project mode setting in site configuration repository.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectService">
            <summary>
            EPiServer implementation of ProjectService. Used as default service for Project and ProjectItem stores
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectService.#ctor(EPiServer.DataAbstraction.ProjectRepository,EPiServer.DataAbstraction.ProjectPublisher,EPiServer.Cms.Shell.Service.Internal.ContentService,EPiServer.Cms.Shell.UI.Rest.IContentChangeManager,EPiServer.Core.LanguageSelectorFactory,EPiServer.Cms.Shell.UI.Rest.Projects.CurrentProject,EPiServer.DataAbstraction.ISiteConfigurationRepository,EPiServer.Framework.Configuration.IConfigurationSource,EPiServer.Cms.Shell.UI.Rest.Approvals.ApprovalService,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Instantiates an instance of ProjectService
            </summary>
            <param name="projectRepository">The ProjectRepository</param>
            <param name="projectPublisher"></param>
            <param name="contentService">A content service used for managing content data and content versions</param>
            <param name="contentChangeManager"></param>
            <param name="languageSelectorFactory">The language selector factory</param>
            <param name="currentProject">The current project</param>
            <param name="siteConfigurationRepository">The site configuration repository</param>
            <param name="configurationSource">Instance of IConfiguration</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectService.Create(EPiServer.DataAbstraction.Project)">
            <summary>
            Creates a Project, only if the given project id doesn't exist.
            </summary>
            <param name="project">The project to be created.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectService.Update(EPiServer.DataAbstraction.Project)">
            <summary>
            Updates a Project, only if the given project already present.
            </summary>
            <param name="project">The project to be updated.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectService.Publish(System.Int32,System.Nullable{System.DateTime})">
            <summary>
            Publishes all the items belongs to project
            </summary>
            <param name="id">The id of the project</param>
            <param name="delayPublishUntil">The date and time to delay publishing until.</param>
            <returns>The project or <c>null</c> if it was not found</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectService.Reactivate(System.Int32)">
            <summary>
            Reactivates all the items belonging to a project which is scheduled to publish.
            </summary>
            <param name="id">The ID of the project.</param>
            <returns>The updated project or <code>null</code> if the project was not found.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectService.Delete(System.Int32)">
            <summary>
            Delete a Project by id
            </summary>
            <param name="id">The id</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectService.CanAddContent(System.Int32,System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},System.String,System.Collections.Generic.IList{EPiServer.Core.ContentReference}@,System.Collections.Generic.IList{EPiServer.DataAbstraction.ProjectItem}@)">
            <summary>
            Determines if the content references can be added to the project, or if new versions needs to be created
            </summary>
            <param name="projectId">The project to add the content to</param>
            <param name="contentReferences">The content to add</param>
            <param name="languageId">The language to check </param>
            <param name="contentReferencesToAdd">The content that should be added</param>
            <param name="existingProjectItems">Already existing project items with editable common drafts</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectService.AddToCurrentProject(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
            <inheritdoc />
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectService.AddItems(System.Collections.Generic.IEnumerable{EPiServer.DataAbstraction.ProjectItem})">
            <summary>
            Add ProjectItem to a project
            </summary>
            <param name="projectItems">A list of project items</param>
            <returns>List of updated ProjectItems</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectService.RemoveItems(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Remove ProjectItem from a project
            </summary>
            <param name="projectItems">A list of ProjectItem ids</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectService.GetStatusCount(System.Int32)">
             <summary>
            
             </summary>
             <param name="projectId">The project identifier.</param>
             <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectService.MarkAsReadyForReviewAsync(System.Collections.Generic.IEnumerable{System.Int32},System.String,System.String)">
            <summary>
            Mark the content that the project item references as ready for review.
            </summary>
            <param name="projectItemIds">The project items to mark as ready for review.</param>
            <param name="username">The user that is marking the items as ready for review.</param>
            <param name="comment">The comment to be used when starting the review process.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectService.MarkAsReadyToPublish(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Mark the content that the project item references as Ready to Publish
            </summary>
            <param name="projectItemIds">The project items to mark as ready to publish</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectService.AddItemsInternal(System.Collections.Generic.ICollection{EPiServer.DataAbstraction.ProjectItem})">
            <summary>
            Adds the project items to the project. It creates new version depending on whether project
            mode is active.
            </summary>
            <param name="projectItems">The collection of items to add.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectService.GetProjectItemsWithEditableCommonDraft(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
            <summary>
            Get all <see cref="T:EPiServer.DataAbstraction.ProjectItem"/> with an editable common draft
            </summary>
            <param name="contentReferences">The content references to match</param>
            <returns>A list of project items that has editable common drafts</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectService.ExistsInLanguage(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
            <summary>
            Checkes whether the content exists in the given culture
            </summary>
            <param name="contentLink"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectService.IsItem``1(EPiServer.Core.ContentReference)">
            <summary>
            Check whether the content is versionable
            </summary>
            <param name="contentLink"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectService.SelectOrCreateVersion(EPiServer.DataAbstraction.ProjectItem)">
            <summary>
            Selects the common draft or creates a new content version if the common draft isn't suitable for inclusion in a project
            </summary>
            <param name="projectItem">The project item to create a new draft version for</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectService.IsPartOfAnyProject(EPiServer.Core.ContentReference)">
            <summary>
            Check if the content is part of any project
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the content link does not contain a workId</exception>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectStore.Get(System.Nullable{System.Int32},EPiServer.Shell.Services.Rest.ItemRange,System.Collections.Generic.IEnumerable{EPiServer.Shell.Services.Rest.SortColumn})">
            <summary>
            Gets the project which has an ID matching the given ID, or if no ID is given then
            it returns all projects within the given range.
            </summary>
            <param name="id">The ID of the project to retrieve; or <code>null</code> to return all projects.</param>
            <param name="range">The range of projects to retrieve.</param>
            <param name="sortColumns">A collection of columns to sort by.</param>
            <returns>A rest result containing the given project or all projects within the given range.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectStore.Post(EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectViewModel)">
            <summary>
            Creates a new project in the repository.
            </summary>
            <param name="projectViewModel">The project to create.</param>
            <returns>A rest result containing the newly created project if the operation is successful.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectStore.Put(System.Nullable{System.Int32},EPiServer.Cms.Shell.UI.Rest.Projects.Internal.Models.ProjectViewModel)">
            <summary>
            Updates a project in the repository.
            </summary>
            <param name="id">The ID of the project to update.</param>
            <param name="projectViewModel">The updated project data.</param>
            <returns>A rest result containing the updated project if the operation is successful.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectStore.Publish(System.Int32,System.Nullable{System.DateTime})">
            <summary>
            Updates a project in the repository. Possibly for the publishing status
            </summary>
            <param name="id">The project id</param>
            <returns>A rest result containing the updated project if the operation is successful.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectStore.Reactivate(System.Int32)">
            <summary>
            Reactivates a project that has been scheduled to publish.
            </summary>
            <param name="id">The project ID</param>
            <returns>A REST result containing the update project.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectStore.Delete(System.Int32)">
            <summary>
            Deletes a project from the repository.
            </summary>
            <param name="id">The ID of the project to delete.</param>
            <returns>A rest result which has a status code indicating the outcome of the operation.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectStore.CanAddContent(System.Int32,System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},System.String)">
            <summary>
            Check if the content can safely be added to the project
            </summary>
            <param name="id">The ID of the project to check</param>
            <param name="contentReferences">The content to check if it can be added</param>
            <param name="languageId">The language to check</param>
            <returns>A rest result which contains the add check</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectStore.Exists(System.Int32)">
            <summary>
            Returns true or false if there exists a project for the given project id
            </summary>
            <param name="id">The id of the project</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Internal.ProjectStore.ErrorMessage(EPiServer.Cms.Shell.UI.Rest.Internal.ServiceException,System.Net.HttpStatusCode)">
            <summary>
            Creates a <see cref="T:EPiServer.Shell.Services.Rest.RestStatusCodeResult"/> from a <see cref="T:EPiServer.Cms.Shell.UI.Rest.Internal.ServiceException"/>
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.IProjectService">
            <summary>
            An interface of the project service. Exposes a method for adding content to the current project and a property
            that indicates whether project mode is active.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.IProjectService.IsInProjectMode">
            <summary>
            Gets whether project mode is enabled and there is a current project selected.
            </summary>
            <returns><code>true</code> when project mode is enabled for the site and there is a current project selected; otherwise <code>false</code>.</returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.IProjectService.IsProjectModeEnabled">
            <summary>
            Returns true if project mode is enabled, if nothing has been configured
            we assume that project mode should be enabled
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.IProjectService.AddToCurrentProject(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
            <summary>
            Adds the given content to the current project.
            </summary>
            <exception cref="T:System.InvalidOperationException">Project mode is not enabled.</exception>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.CommentViewModel.Message">
            <summary>
            The message of the item, whose mentions of users are replaced with {index} for use with <see cref="M:System.String.Format(System.String,System.Object[])"/>
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.CommentViewModel.MessageMentions">
            <summary>
            The expanded versions of the user names mentioned in the message
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.CommentViewModel.Author">
            <summary>
            The author of the item
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.CommentViewModel.Addressee">
            <summary>
            The addressee of the project message, if other than the notification recipient
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.CommentViewModel.Timestamp">
            <summary>
            The formatted date and time string represents the time when the comment was created or last edited. (Formatted according to recipient's cultureinfo)
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.CommentViewModel.Header">
            <summary>
            The comment header
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.CommentViewModel.ActionTypeText">
            <summary>
            A descriptive text of the ContentActionType or ProjectActionType commented on.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.MentionParser">
            <summary>
            @Mention parser
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.MentionParser.Parse(System.String)">
            <summary>
            Returns all mentions starting with at from the given text in an array
            </summary>
            <param name="text">The message to extract mentions from</param>
            <returns>A list of usernames mentioned in the text</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.MentionParser.ExtractMentions(System.String,System.Collections.Generic.IEnumerable{System.String}@,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Extracts mentions from a string and returns it in a string.format suitable way along with a string[]
            </summary>
            <param name="message">The message to extract mentions from</param>
            <param name="displayNames">The string[] with display names</param>
            <param name="userNames">The string[] with user names</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectHtmlEmailFormatter">
            <summary>
            Formats one or more Project related notification messages into one single e-mail notification.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectHtmlEmailFormatter.SupportedChannelNames">
            <summary>
            Gets the list of channels supported by this formatter
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectHtmlEmailFormatter.FormatMessagesAsync(System.Collections.Generic.IEnumerable{EPiServer.Notification.FormatterNotificationMessage},System.String,EPiServer.Notification.NotificationFormat,System.String)">
            <summary>
            Performs formatting and concatenation of messages.
            </summary>
            <param name="notifications">Messages to format</param>
            <param name="recipient">The receiver of the message</param>
            <param name="format">The format to format to</param>
            <param name="notificationChannelName">The message channel</param>
            <returns>A list of one formatted message</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectHtmlEmailFormatter.IsNotificationEmpty(EPiServer.Cms.Shell.UI.Notifications.Email.Internal.EmailViewModel)">
            <summary>
            Checks if the notification would end up being devoid of content.
            </summary>
            <returns>Template</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage">
            <summary>
            Internal project message class that is serialized in the <see cref="T:EPiServer.Notification.NotificationMessage"/> content
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage.ProjectId">
            <summary>
            The id of the project
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage.Message">
            <summary>
            The message written by the user
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage.Addressee">
            <summary>
            The one that originally created the activity
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage.ContentLink">
            <summary>
            Gets or sets the ContentLink if the notification happens on project related content
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage.Action">
            <summary>
            Why the message has been created
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage.Author">
            <summary>
            The author that whose action triggered the notification
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage.ContentActionType">
            <summary>
            The ContentActionType of the activity
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage.ProjectActionType">
            <summary>
            The ProjectActionType of the activity
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage.ApprovalActionType">
            <summary>
            The ApprovalActionType fo the activity
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage.DelayPublish">
            <summary>
            If the ContentCheckinActivity is delayed publish
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage.Created">
            <summary>
            Gets or sets the Date instance when the message was created.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageAction">
            <summary>
            The reasons why the notification has been created
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageNotifier">
            <summary>
            Service that listens to changes made to the project activity feed and comment repositories
            and creates the corresponding user notification
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageNotifier.CommentCreated(System.Object,EPiServer.DataAbstraction.Activities.CommentCreatedEventArgs)">
            <summary>
            Event raised when comment is created
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageNotifier.CommentUpdated(System.Object,EPiServer.DataAbstraction.Activities.CommentUpdatedEventArgs)">
            <summary>
            Event raised when comment is updated
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageNotifier.ActivityCreated(System.Object,EPiServer.DataAbstraction.Activities.ActivityCreatedEventArgs)">
            <summary>
            Event raised when activity is created
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageNotifier.UnsubscribeFromAllActivitiesFromPublishedVersion(EPiServer.Core.ContentReference)">
            <summary>
            Once the content version is published we no longer need to be subscribed to all the
            events as they are unlikely to be used.
            </summary>
            <param name="contentLink"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageNotifier.ActivityUpdated(System.Object,EPiServer.DataAbstraction.Activities.ActivityUpdatedEventArgs)">
            <summary>
            Event raise when activity is updated
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageNotifier.IsActivityCommentable(EPiServer.DataAbstraction.Activities.Activity,System.String@)">
            <summary>
            Checks the activity to determine if we should create a notification message
            </summary>
            <param name="activity"></param>
            <param name="message">Message will be set if it is a message activity</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageNotifier.CreateNotificationMessageAsync(System.Int64,System.String,System.String,System.String,EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageAction,EPiServer.DataAbstraction.Activities.Activity,System.DateTime)">
            <summary>
            Creates notification message and sends it to all recipients
            </summary>
            <param name="id"></param>
            <param name="type"></param>
            <param name="message"></param>
            <param name="author"></param>
            <param name="messageAction"></param>
            <param name="activity">The activity object</param>
            <param name="createdAt">The created at timestamp</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageNotifier.FindMentions(System.String)">
            <summary>
            Extract all the mentions in a comment
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageNotifier.GetRelatedProjectAndContentInfo(EPiServer.DataAbstraction.Activities.Activity)">
            <summary>
            Retrieves the related project id and content reference for the given activity.
            </summary>
            <param name="activity">The activity object</param>
            <returns>A tuple with first item as Project Id and second as content link (if present)</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageNotifier.GetContentLink(EPiServer.DataAbstraction.Activities.Activity)">
            <summary>
            Helper to get the content link from different types of activites
            ContentMessageActivity happens when user comments on a project item
            </summary>
            <param name="activity"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageNotifier.CreateContent(EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageAction,System.String,System.String,EPiServer.DataAbstraction.Activities.Activity,System.DateTime)">
            <summary>
             Creates the content of the notification message
            </summary>
            <param name="messageAction"></param>
            <param name="message"></param>
            <param name="author">The author</param>
            <param name="activity">The activity object</param>
            <param name="createdAt">When the activity or the comment created.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageService.CreateProjectEmailViewModel(System.String,System.Collections.Generic.IEnumerable{EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage})">
            <summary>
            Creates <see cref="T:EPiServer.Cms.Shell.UI.Notifications.Email.Internal.EmailViewModel"/> based on a <see cref="T:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage"/> collection
            </summary>
            <param name="recipient"></param>
            <param name="projectMessages"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageService.GetAddressee(EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the addressee display name
            </summary>
            <param name="projectMessage">The <see cref="T:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage"/> to base the addresse on</param>
            <param name="recipient">User name of the recipient</param>
            <param name="recipientCulture">Recipient culture</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageService.GetHeader(EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets a translation key based on the projectMessage
            </summary>
            <param name="projectMessage">The <see cref="T:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage"/> to base the title on</param>
            <param name="recipient">User name of the recipient</param>
            <param name="recipientCulture">The culture used to get the strings in</param>
            <returns>The appropriate translation key</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageService.GetActionTypeText(EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage,System.Globalization.CultureInfo)">
            <summary>
            Gets the ActionType text converted to text of our definition. For example an contentActionType can be "CheckIn" but we want to display it as "Set as ready to Publish"
            </summary>
            <param name="projectMessage">The ProjectMessage</param>
            <param name="recipientCulture">The recipient ui culture</param>
            <returns>localized ContentActionType text</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageService.IsItemMessage(EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage)">
            <summary>
            Checks if a message belongs to an item, instead of the actual project.
            </summary>
            <param name="message">Message</param>
            <returns>True if it is an item message. False if it is a project message.</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageUtil">
            <summary>
            Contains the Utility functions to extract localized data from ProjectMessage
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageUtil.GetContentNotificationResource(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns the Content Notification Resource resides at /episerver/cms/notification/content/{key}.
            </summary>
            <param name="key">The last part of the key.</param>
            <param name="uiCulture">The CultureInfo</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageUtil.GetProjectNotificationResource(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns the Project Notification Resource resides at /episerver/cms/notification/project/{key}.
            </summary>
            <param name="key">The last part of the key.</param>
            <param name="uiCulture">The CultureInfo</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageUtil.GetEmailNotificationResource(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns the Email Notification Resource resides at /episerver/cms/notification/project/email/{key}.
            </summary>
            <param name="key">The last part of the key.</param>
            <param name="uiCulture">The CultureInfo</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageUtil.GetMessageAddressee(EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the addressee display name
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageUtil.GetItemAction(EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage,System.Globalization.CultureInfo)">
            <summary>
            Gets the ActionType text converted to text of our definition. For example an contentActionType can be "CheckIn" but we want to display it as "Set as ready to Publish"
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessageUtil.GetFullLocalizedActionString(EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets a translation key based on the projectMessage
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectUserNotificationFormatter">
            <summary>
            Formats the Project related UserNotificationMessage before it shows in the UI.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectUserNotificationFormatter.SupportedChannelNames">
            <summary>
            Gets the list of channels supported by this formatter
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectUserNotificationFormatter.FormatUserMessageAsync(EPiServer.Notification.UserNotificationMessage)">
            <summary>
            Formats the UserNotificationMessage to FormattedUserNotificationMessage
            </summary>
            <param name="message">An instance of UserNotificationMessage</param>
            <returns>An instance of FormattedUserNotificationMessage</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectUserNotificationFormatter.GetItemRemovedOrDeletedMessage(EPiServer.Notification.INotificationUser,System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Gets the localized message for either Item removed or Item deleted cases.
            </summary>
            <param name="sender">An instance of INotificationUser</param>
            <param name="resourceKey">The resource key</param>
            <param name="projectName">The name of the project</param>
            <param name="uiCulture">The recipient's ui culture</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectUserNotificationFormatter.CreateActionString(EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage,EPiServer.Notification.INotificationUser,EPiServer.Notification.INotificationUser,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Returns the localized Action (either the actual message or the no access message in case recipient has no access rights on items)
            </summary>
            <param name="message">The ProjectMessage instance</param>
            <param name="recipient">The Recipient</param>
            <param name="sender">The Sender</param>
            <param name="uiCulture">Recipient's ui culture</param>
            <param name="hasAccessRights">Whether the recipient has access rights or not</param>
            <returns>The localized string</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectUserNotificationFormatter.CreateMessageString(EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectMessage)">
            <summary>
            Returns the formatted message content which also contains the action as the first line.
            </summary>
            <param name="message">The ProjectMessage</param>
            <returns></returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectViewModel.Title">
            <summary>
            The title of the project
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectViewModel.Comments">
            <summary>
            The comments that have been made on the project
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectViewModel.Items">
            <summary>
            The items that have been commented on, that belong to the project
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectViewModel.CommentsCount">
            <summary>
            How many comments there has been on the project itself
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectViewModel.ItemCommentsCount">
            <summary>
            How many comments there has been on items that belong to the project
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectViewModel.NotificationsCount">
            <summary>
            Total Comment and Item count
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectViewModel.CommentsHeader">
            <summary>
            The project comments header
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectViewModel.ItemCommentsHeader">
            <summary>
            The project item comments header
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectViewModel.CallToActionText">
            <summary>
            Call to action text. E.g. "Go to project"
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectViewModel.CallToActionUrl">
            <summary>
            Call to action URL. E.g. "http://mysite/EPiServer/Cms/#context=epi.cms.project:///1"
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.ProjectViewModel.NotificationsText">
            <summary>
            Notification text
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.UserInImportHandler.MarkAsImporter(System.String)">
            <summary>
            Marks the user as a user running an import job and keeps the time of when the import was started.
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.UserInImportHandler.RemoveImporter(System.String)">
            <summary>
            Removes the user from the importer list. Should be called once the import is done.
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.Projects.Notifications.Internal.UserInImportHandler.IsUserImporting(System.String)">
            <summary>
            Checks if the specified userName has started an import in the last 2 hours.
            </summary>
            <remarks>
            The 2 hours is an estimation for the import to be done.
            It's to be able to remove users if there is an error during import so the user is not removed from the list.
            </remarks>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.PropertiesUpdateResult">
            <summary>
            Contains information about the results of an update to a <see cref="T:EPiServer.Core.PropertyData"/> object.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.PropertiesUpdateResult.Successful">
            <summary>
            Gets or sets a value indicating whether the update was successful.
            </summary>
            <value><c>true</c> if successful; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.PropertiesUpdateResult.SavedContentLink">
            <summary>
            Gets or sets the content link to the version that the property was saved to. This does not necessary have to be the
            same version as requested since the update might have resulted in a new content version.
            </summary>
            <value>The content link to the specific version the property was saved to.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.PropertiesUpdateResult.Properties">
            <summary>
            Gets or sets the properties update results
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.PropertiesUpdateResult.ValidationErrors">
            <summary>
            Gets or sets any validation errors.
            </summary>
            <value>The validation errors that this page currently has.</value>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.PropertyUpdateResult">
            <summary>
            Contains information about the results of an update to a <see cref="T:EPiServer.Core.PropertyData"/> object.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.PropertyUpdateResult.Name">
            <summary>
            Property name
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.PropertyUpdateResult.Value">
            <summary>
            Property value
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.PropertyUpdateResult.Successful">
            <summary>
            Gets or sets a value indicating whether the update was successful.
            </summary>
            <value><c>true</c> if successful; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.PropertyUpdateResult.ValidationErrors">
            <summary>
            Gets or sets any validation errors.
            </summary>
            <value>The validation errors that this property currently has.</value>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.StatusTransition.IStatusTransition">
            <summary>
            A status transition for an <see cref="T:EPiServer.Core.IContent"/> which indicates whether a given
            content item is able to execute this transition.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.StatusTransition.IStatusTransition.Name">
            <summary>
            Gets the name of the status transition. This is used to map the transition to a command on the client side.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.StatusTransition.IStatusTransition.CanTransitionAsync(EPiServer.Cms.Shell.UI.Rest.StatusTransition.StatusTransitionArguments)">
            <summary>
            Determines whether this transition is executable for the given arguments.
            </summary>
            <param name="arguments">Arguments to calculate the status transition on</param>
            <returns><code>true</code> if the content can execute the transition; otherwise <code>false</code>.</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.StatusTransition.RejectChangesTransition">
            <summary>
            Reject approval sequence.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.Rest.StatusTransition.StatusTransitionArguments">
            <summary>
            Arguments used when determining whether a status transition is executable.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.StatusTransition.StatusTransitionArguments.Approval">
            <summary>
            The active approval sequence for the content.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.StatusTransition.StatusTransitionArguments.Content">
            <summary>
            The content to change the status for.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.StatusTransition.StatusTransitionArguments.HasApprovalDefinition">
            <summary>
            Indicates whether an approval definition exists for the content.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.StatusTransition.StatusTransitionArguments.IsContentLocked">
            <summary>
            Indicates whether the content is locked.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.StatusTransition.StatusTransitionArguments.IsPartOfScheduledProject">
            <summary>
            Indicates whether the content is part of a scheduled project.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.StatusTransition.StatusTransitionArguments.IsUserPartOfActiveApprovalStep">
            <summary>
            Indicates whether the user is part of the active approval step for the content.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.StatusTransition.StatusTransitionArguments.Principal">
            <summary>
            The user who is currently editing the content.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.StatusTransition.StatusTransitionArguments.SelfApprove">
            <summary>
            Indicates whether users can approve their own changes.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.Rest.StatusTransition.StatusTransitionArguments.VersionStatus">
            <summary>
            The calculated version status of the content.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.Rest.StatusTransition.StatusTransitionService.GetTransitionsAsync(EPiServer.Core.IContent,System.Security.Principal.IPrincipal,System.Globalization.CultureInfo)">
            <summary>
            Gets a collection of status transitions that can be executed by the user on the current content.
            </summary>
            <param name="content">The current content item</param>
            <param name="principal">The current user</param>
            <param name="preferredCulture">The preferred culture of the UI</param>
            <returns>A collection of status transitions.</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.UIDescriptors.Internal.BlockUIDescriptor">
            <summary>
            Represents a UI descriptor for Block content.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.UIDescriptors.Internal.BlockUIDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.UIDescriptors.Internal.BlockUIDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.UIDescriptors.Internal.ContentDataUIDescriptor">
            <summary>
            Represents a UI descriptor for content data.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.UIDescriptors.Internal.ContentDataUIDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.UIDescriptors.Internal.ContentDataUIDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.UIDescriptors.Internal.ContentUIDescriptor">
            <summary>
            Represents a UI descriptor for <see cref="T:EPiServer.Core.IContent"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.UIDescriptors.Internal.ContentUIDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.UIDescriptors.Internal.ContentUIDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.UIDescriptors.Internal.ContentUIDescriptorProvider">
            <summary>
            Provides UI descriptors for content types from the <see cref="T:EPiServer.DataAbstraction.IContentTypeRepository"/> to the <see cref="T:EPiServer.Shell.UIDescriptorRegistry"/>
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.UIDescriptors.Internal.ContentUIDescriptorProvider.GetDescriptors">
            <summary>
            Returns UI descriptors for all content types with a model type in the content type respository.
            </summary>
            <returns>A list of <see cref="T:EPiServer.Shell.UIDescriptor"/> instances</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.UIDescriptors.Internal.FolderUIDescriptor">
            <summary>
            Represents a UI descriptor for Block folder.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.UIDescriptors.Internal.FolderUIDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.UIDescriptors.Internal.FolderUIDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.UIDescriptors.Internal.MediaFileUIDescriptor">
            <summary>
            Describes the ui features for a content file.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.UIDescriptors.Internal.MediaFileUIDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.UIDescriptors.Internal.MediaFileUIDescriptor"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.UIDescriptors.Internal.PageUIDescriptor">
            <summary>
            Represents a UI descriptor for Page content.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.UIDescriptors.Internal.PageUIDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.UIDescriptors.Internal.PageUIDescriptor"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.UIDescriptors.MediaRepositoryDescriptor.LinkableTypes">
            <summary>
            Defined which types should be shown when creating links.
            </summary>
            <remarks>This is used to filter what is shown when creating links.</remarks>
        </member>
        <member name="P:EPiServer.Cms.Shell.UI.UIDescriptors.PageRepositoryDescriptor.LinkableTypes">
            <summary>
            Defined which types should be shown in the content selector widget.
            </summary>
            <remarks>This is used to filter what is shown in the content selector widget.</remarks>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.UIDescriptors.ViewConfigurations.Compare.Internal.Compare">
            <summary>
            Defines the compare view
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.UIDescriptors.ViewConfigurations.Compare.Internal.Compare.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.UIDescriptors.ViewConfigurations.Compare.Internal.Compare"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.UIDescriptors.ViewConfigurations.Internal.ContentListing">
            <summary>
            Defines Content listing view for CMS objects
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.UIDescriptors.ViewConfigurations.Internal.ContentListing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.UIDescriptors.ViewConfigurations.Internal.ContentListing"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.UIDescriptors.ViewConfigurations.Internal.FormEditing">
            <summary>
            Defines form editing view for CMS objects
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.UIDescriptors.ViewConfigurations.Internal.OnPageEditing">
            <summary>
            Defines on page edit view for CMS objects
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.UI.UIDescriptors.ViewConfigurations.Internal.Preview">
            <summary>
            Defines preview for CMS objects
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.UI.UIDescriptors.ViewConfigurations.Internal.Preview.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.UI.UIDescriptors.ViewConfigurations.Internal.Preview"/> class.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.Json.Internal.BlockDataConverter">
            <summary>
            JSON converter for block data.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Json.Internal.BlockDataConverter.#ctor(EPiServer.Construction.IContentDataFactory{EPiServer.Core.BlockData},EPiServer.Construction.IContentDataBuilder,EPiServer.DataAbstraction.IContentTypeRepository{EPiServer.DataAbstraction.BlockType})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.Json.Internal.BlockDataConverter"/> class.
            </summary>
            <param name="blockDataFactory">The block data factory.</param>
            <param name="blockDataBuilder">The block data builder.</param>
            <param name="blockTypeRepository">The block type repository.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Json.Internal.BlockDataConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance is block data.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this instance can be converted to a block data object; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Json.Internal.BlockDataConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the block data from the JSON reader. When block contains an inner block, the method will be called recursively.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">The type of object.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Json.Internal.BlockDataConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the the block data to the JSON writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.Json.Internal.CategoryListConverter">
            <summary>
            JSON converter for category list.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Json.Internal.CategoryListConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this converter can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this converter can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.Json.Internal.CategoryListConverter.CanRead">
            <summary>
            Indicates whether this converter can read json.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Json.Internal.CategoryListConverter.CanWrite">
            <summary>
            Indicates whether this converter can write json.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Json.Internal.CategoryListConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes a <see cref="T:EPiServer.Core.CategoryList"/> instance from json.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Json.Internal.CategoryListConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Serializes a <see cref="T:EPiServer.Core.CategoryList"/> instance to json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:EPiServer.Cms.Shell.Json.Internal.ContentAreaConverter.#ctor(EPiServer.Shell.UIDescriptorRegistry,EPiServer.Web.IContentAreaLoader,EPiServer.ServiceLocation.ServiceAccessor{System.Web.Routing.RequestContext},EPiServer.DataAbstraction.IContentTypeRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.Json.Internal.ContentAreaConverter"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Json.Internal.ContentAreaConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:EPiServer.Cms.Shell.Json.Internal.ContentDataStoreModelConverter">
            <summary>
            Json converter for <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel"/>
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Json.Internal.ContentDataStoreModelConverter.#ctor(EPiServer.DataAbstraction.IContentTypeRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.Json.Internal.ContentDataStoreModelConverter"/> class.
            </summary>
            <param name="contentTypeRepository">The content type repository.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Json.Internal.ContentDataStoreModelConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.Json.Internal.ContentDataStoreModelConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:EPiServer.Cms.Shell.Json.Internal.ContentDataStoreModelConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Json.Internal.ContentDataStoreModelConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.Json.Internal.PropertiesConverter">
            <summary>
            Json converter for <see cref="T:EPiServer.Cms.Shell.UI.Rest.Models.ContentDataStoreModel"/>.Properties.
            </summary>
            <remarks>Used internally and remove itself immediately from Converters list.</remarks>
        </member>
        <member name="M:EPiServer.Cms.Shell.Json.Internal.PropertiesConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.Json.Internal.PropertiesConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:EPiServer.Cms.Shell.Json.Internal.PropertiesConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Json.Internal.PropertiesConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Json.Internal.LinkItemCollectionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Json.Internal.LinkItemCollectionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the json.
            </summary>
            <param name="reader">The reader.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value.</param>
            <param name="serializer">The serializer.</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Json.Internal.LinkItemCollectionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the json.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.Json.Internal.UrlConverter">
            <summary>
            Json converter thas handles conversion between <see cref="T:EPiServer.Url"/> and <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.LinkableTypesAssembler">
            <summary>
            Responsible for finding all content types that have a public URL.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.LinkableTypesAssembler.#ctor(System.Collections.Generic.IEnumerable{EPiServer.Shell.IContentRepositoryDescriptor})">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.LinkableTypesAssembler"/> class.
            </summary>
            <param name="contentRepositoryDescriptors">The content repository descriptors.</param>
        </member>
        <member name="F:EPiServer.Cms.Shell.LinkableTypesAssembler._defaultAllowedTypes">
            <summary>
            The default allowed types for selection and Dnd.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.LinkableTypesAssembler.LinkableTypes">
            <summary>
            Gets the linkable types as configured by the content repository descriptors.
            </summary>
            <value>
            The linkable types.
            </value>
        </member>
        <member name="T:EPiServer.Cms.Shell.PageDataExtensions">
            <summary>
            Extension methods for the <see cref="T:EPiServer.Core.PageData" /> class
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.PageDataExtensions.ToExternalUrl(EPiServer.Core.PageData)">
            <summary>
            Gets the external url for a page.
            </summary>
            <param name="page">The object this method is attached to.</param>
            <returns>A string containing the external url for this page.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.PageDataExtensions.ToExternalUrl(EPiServer.Core.PageData,System.Boolean)">
            <summary>
            Gets the external url for a page.
            </summary>
            <param name="page">The object this method is attached to.</param>
            <param name="includeVersionInformation"><code>true</code> if version information should be included; otherwise <code>false</code>.</param>
            <returns>A string containing the external url for this page.</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.PageInfoHelper">
            <summary>
            Provides information about a page for usage in tool tips.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.PageInfoHelper.#ctor(EPiServer.Framework.Localization.LocalizationService,EPiServer.DataAbstraction.IContentTypeRepository,EPiServer.Web.Routing.UrlResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.PageInfoHelper"/> class.
            </summary>
            <param name="localizationService">A resource locator used for translations by this class.</param>
            <param name="contentTypeRepository">The content type repository.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.PageInfoHelper.GetToolElements(EPiServer.Core.IContent)">
            <summary>
            Gets a list of elements for usage in a tool tip
            </summary>
            <param name="page">The page</param>
            <returns></returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.ProfileLanguageFilterAttribute">
            <summary>
            Global action filter that sets the preferred edit ContentLanguage using the editlanguage stored in the user profile
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.ProfileLanguageFilterAttribute.Repository">
            <summary>
            Profile repository
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.ProfileLanguageFilterAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <inherited />
        </member>
        <member name="T:EPiServer.Cms.Shell.Search.ContentSearchProviderBase`2">
            <summary>
            Base search provider for searing for content in EPiServer CMS
            </summary>
            <typeparam name="TContentData">The type of the content data.</typeparam>
            <typeparam name="TContentType">The type of the content type.</typeparam>
        </member>
        <member name="M:EPiServer.Cms.Shell.Search.ContentSearchProviderBase`2.#ctor(EPiServer.Framework.Localization.LocalizationService,EPiServer.Web.ISiteDefinitionResolver,EPiServer.DataAbstraction.IContentTypeRepository{`1},EPiServer.Web.Routing.EditUrlResolver,EPiServer.ServiceLocation.ServiceAccessor{EPiServer.Web.SiteDefinition},EPiServer.Globalization.LanguageResolver,EPiServer.Web.Routing.UrlResolver,EPiServer.Web.TemplateResolver,EPiServer.Shell.UIDescriptorRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.Search.ContentSearchProviderBase`2"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Search.ContentSearchProviderBase`2.LocalizationService">
            <summary>
            Gets the localization service.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Search.ContentSearchProviderBase`2.Area">
            <summary>
            Area that the provider maps to, used for spotlight searching
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Search.ContentSearchProviderBase`2.Category">
            <summary>
            Gets the Pages category
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Search.ContentSearchProviderBase`2.Search(EPiServer.Shell.Search.Query)">
            <summary>
            Searches the specified query.
            </summary>
            <param name="query">The search query.</param>
            A list of search results, containing links to the specific content in edit mode.
        </member>
        <member name="P:EPiServer.Cms.Shell.Search.ContentSearchProviderBase`2.ToolTipResourceKeyBase">
            <summary>
            The root path to the tool tip resource for the content search provider
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Search.ContentSearchProviderBase`2.ToolTipContentTypeNameResourceKey">
            <summary>
            The tool tip key for the content type name.
            </summary>
            <remarks>
            The key will be used together with the <see cref="P:EPiServer.Cms.Shell.Search.ContentSearchProviderBase`2.ToolTipResourceKeyBase"/> to get the whole resource key to resource.
            </remarks>
        </member>
        <member name="P:EPiServer.Cms.Shell.Search.ContentSearchProviderBase`2.IconCssClass">
            <summary>
            Gets the icon CSS class.
            </summary>
        </member>
        <member name="F:EPiServer.Cms.Shell.Search.ContentSearchProviderBase`2.EditPath">
            <summary>
            Link for the search hit, which should be a link to the edit page for the content.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Search.ContentSearchProviderBase`2.GetEditUrl(`0,System.Boolean@)">
            <summary>
            Gets the edit URL for a <see cref="T:EPiServer.Core.IContent"/>.
            </summary>
            <param name="contentData">The content data.</param>
            <param name="onCurrentHost">if set to <c>true</c> current host are used.</param>
            <returns>
            The edit url.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Search.ContentSearchProviderBase`2.CreateSearchResult(`0)">
            <summary>
            Creates a SearchResult from a <see cref="T:EPiServer.Core.IContent"/>.
            </summary>
            <param name="contentData">The content data.</param>
            <returns>
            A search result.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Search.ContentSearchProviderBase`2.CreatePreviewText(EPiServer.Core.IContentData)">
            <summary>
            Creates a preview text from a PageData. Will first look for the property MainIntro, and if that's missing, a property called MainBody.
            </summary>
            <param name="content">The page to extract the preview from.</param>
            <returns>A string containing a preview for this page.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Search.ContentSearchProviderBase`2.GetPreviewTextFromFirstLongString(EPiServer.Core.IContentData)">
            <summary>
            Will look for the first long string property, ignoring link collections, that has a value.
            </summary>
            <param name="content">The page that we want to get a preview for.</param>
            <returns>The value from the first non empty long string.</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.Service.IContentService">
            <summary>
            An interface of the content service. Exposes method to Save, Delete, Copy and Move content
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.IContentService.Save(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction)">
            <summary>
            Saves a content to the repository with the provided save action performed first ensuring that the current user meets the mininum access rights requirements.
            </summary>
            <param name="content">An <see cref="T:EPiServer.Core.IContent"/> object containing all the data that should be saved.</param>
            <param name="saveAction">The exact <see cref="T:EPiServer.DataAccess.SaveAction"/> that should be performed.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.IContentService.Save(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction,EPiServer.Security.AccessLevel)">
            <summary>
            Saves a content to the repository with the provided save action performed first ensuring that the current user meets the given access rights requirements.
            </summary>
            <param name="content">An <see cref="T:EPiServer.Core.IContent"/> object containing all the data that should be saved.</param>
            <param name="saveAction">The exact <see cref="T:EPiServer.DataAccess.SaveAction"/> that should be performed.</param>
            <param name="accessLevel">The access level required to perform the action.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.IContentService.Delete(EPiServer.Core.ContentReference,System.Boolean,EPiServer.Security.AccessLevel)">
            <summary>
            Deletes a content from the repository first ensuring that the current user meets the given access right requirements.
            </summary>
            <param name="contentReference">The content reference of the content to delete.</param>
            <param name="forceDelete">If set to true, deletes the content even if it is being referenced by other content.</param>
            <param name="accessLevel">The required access level that the current user must have to be allowed to delete the content.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.IContentService.Copy(EPiServer.Core.IContent,EPiServer.Core.ContentReference)">
            <summary>
            Copies content to another position in the structure first ensuring that the current user has the minimal access rights required at the destination.
            </summary>
            <param name="content">The <see cref="T:EPiServer.Core.IContent"/> object that should be copied.</param>
            <param name="destination">The destination where the content will be copied as a child to.</param>
            <returns>A content reference to the copied content.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.IContentService.Move(EPiServer.Core.IContent,EPiServer.Core.ContentReference)">
            <summary>
            Moves content from its current location to another position in the structure first
            ensuring that the current user has the minimal access rights required at the destination.
            </summary>
            <param name="content">The <see cref="T:EPiServer.Core.IContent"/> object that should be moved.</param>
            <param name="destination">The destination where the content will be moved as a child to.</param>
            <returns>A content reference to the moved content.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentEvents.OnMovingContent(EPiServer.Core.IContent)">
            <summary>
            Raises the moving event for the given content.
            </summary>
            <param name="content">The content that is being moved.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentEvents.OnMovedContent(EPiServer.Core.ContentReference,EPiServer.Core.IContent)">
            <summary>
            Raises the moved event for the given content.
            </summary>
            <param name="contentLink">The content reference of the content that has been moved.</param>
            <param name="content">The content that has been moved.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentEvents.OnSavingContent(EPiServer.Core.IContent)">
            <summary>
            Raises the saving event for the given content.
            </summary>
            <param name="content">The content that is being saved.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentEvents.OnSavedContent(EPiServer.Core.ContentReference,EPiServer.Core.IContent)">
            <summary>
            Raises the saved event for the given content.
            </summary>
            <param name="contentLink">The content reference of the content that has been saved.</param>
            <param name="content">The content that has been saved.</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService">
            <summary>
            Serves as an abstraction layer on top of content and content version repositories.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.GetCommonDraft(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
            <summary>
            Gets the common draft for a particular language
            </summary>
            <param name="contentLink"></param>
            <param name="culture"></param>
            <returns>The version information for the common draft; or null if no common draft exists</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.GetCommonDrafts(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
            <summary>
            Gets the common drafts using the ContentLanguage.PreferredCulture
            </summary>
            <param name="contentLinks">The content links to get the common drafts for</param>
            <returns>The version information for the common drafts; or empty array if no common draft exists</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.GetCommonDrafts(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},System.Globalization.CultureInfo)">
            <summary>
            Gets the common drafts using the given culture
            </summary>
            <param name="contentLinks">The content links to get the common drafts for</param>
            <param name="culture">The culture to get the common draft for</param>
            <returns>The version information for the common drafts; or empty array if no common draft exists</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.Get``1(EPiServer.Core.ContentReference)">
            <summary>
            Gets the content item represented by the provided reference.
            </summary>
            <typeparam name="T">The type of content to get.</typeparam>
            <param name="contentReference">The reference to the content.</param>
            <returns>The requested content item, as the specified type.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.Get``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
            <summary>
            Gets the content item represented by the provided reference and language.
            </summary>
            <typeparam name="T">The type of content to get.</typeparam>
            <param name="contentReference">The reference to the content.</param>
            <param name="language">The language in which you want to get the content</param>
            <returns>The requested content item, as the specified type.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.Get``1(EPiServer.Core.ContentReference,EPiServer.Security.AccessLevel)">
            <summary>
            Gets the content item represented by the provided reference.
            </summary>
            <typeparam name="T">The type of content to get.</typeparam>
            <param name="contentReference">The reference to the content.</param>
            <param name="accessLevel">The required access level.</param>
            <returns>The requested content item, as the specified type.</returns>
            <exception cref="T:EPiServer.Core.AccessDeniedException">Thrown if the user does not have the given <see cref="T:EPiServer.Security.AccessLevel"/></exception>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.Get(EPiServer.Core.ContentReference)">
            <summary>
            Gets the content item represented by the provided reference.
            </summary>
            <param name="contentReference">The reference to the content.</param>
            <returns>The requested <see cref="T:EPiServer.Core.IContent"/></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.Get(EPiServer.Core.ContentReference,EPiServer.Security.AccessLevel)">
            <summary>
            Gets the content item represented by the provided reference.
            </summary>
            <param name="contentReference">The reference to the content.</param>
            <param name="accessLevel">The required access level.</param>
            <returns>The requested <see cref="T:EPiServer.Core.IContent"/></returns>
            <exception cref="T:EPiServer.Core.AccessDeniedException">Thrown if the user does not have the given <see cref="T:EPiServer.Security.AccessLevel"/></exception>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.TryGet``1(EPiServer.Core.ContentReference,``0@)">
            <summary>
            Try to retrieve the content item represented by the provided reference.
            </summary>
            <typeparam name="T">The type of content to get.</typeparam>
            <param name="contentReference">The reference to the content.</param>
            <param name="content"></param>
            <returns>True if item found otherwise false.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.TryGet``1(System.Guid,``0@)">
            <summary>
            Try to retrieve the content item represented by the provided contentGuid.
            </summary>
            <typeparam name="T">The type of content to get.</typeparam>
            <param name="contentGuid">The unique identifier for the content.</param>
            <param name="content"></param>
            <returns>True if item found otherwise false.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.GetChildren``1(EPiServer.Core.ContentReference)">
            <summary>
            Gets the children of the content item represented by the provided reference.
            </summary>
            <typeparam name="T">The type of children to get.</typeparam>
            <param name="parent">A reference to the parent whose children should be returned.</param>
            <returns>The children of the specified parent, as the specified type.</returns>
            <remarks>FallbackWithMaster is the default loader option</remarks>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.GetChildren``1(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
            <summary>
            Gets the children of the content item represented by the provided reference.
            </summary>
            <typeparam name="T">The type of children to get.</typeparam>
            <param name="parent">A reference to the parent whose children should be returned.</param>
            <param name="contentLanguage">The content language.</param>
            <returns>The children of the specified parent, as the specified type.</returns>
            /// <remarks>FallbackWithMaster is the default loader option</remarks>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.GetAncestors(EPiServer.Core.ContentReference)">
            <summary>
            Retrieves all content items located above the specified content.
            </summary>
            <param name="contentLink">The reference to the item</param>
            <returns>
            A list of all items located above the specified reference.
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.GetChildren``1(EPiServer.Core.ContentReference,EPiServer.Core.LoaderOptions)">
            <summary>
            Gets the children of the content item represented by the provided reference.
            </summary>
            <typeparam name="T">The type of children to get.</typeparam>
            <param name="parent">A reference to the parent whose children should be returned.</param>
            <param name="loaderOptions">The settings that specifies how content should be loaded.</param>
            <returns>The children of the specified parent, as the specified type.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.GetUnspecificVersion(EPiServer.Core.ContentReference)">
            <summary>
            Get the content using an unspecific version content reference
            </summary>
            <param name="contentReference">The reference to the content.</param>
            <returns>The requested <see cref="T:EPiServer.Core.IContent"/></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.GetAccessMask(EPiServer.Core.IContent,System.Security.Principal.IPrincipal)">
            <summary>
            Gets the access mask of the content for the given principal. This access mask is
            a combination of the standard access level and language access level.
            </summary>
            <param name="content">The content item on which access is requested.</param>
            <param name="principal">The user which is requesting access.</param>
            <returns>An access level that is a combination of the standard access level and language access level.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.GetItems(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference})">
            <summary>
            Gets all content items that is represented by the provided references
                        in the language determined by the LanguageSelector.Auto()
            </summary>
            <param name="contentReferences">A list of references to content that should be fetched.</param>
            <returns>A list of content for the specifed references.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.GetItems(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},EPiServer.Security.AccessLevel)">
            <summary>
            Gets all content items that is represented by the provided references
                        in the language determined by the LanguageSelector.Auto()
            </summary>
            <param name="contentReferences">A list of references to content that should be fetched.</param>
            <param name="accessLevel">The required access level</param>
            <returns>A list of content for the specifed references.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.GetItems(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},EPiServer.Core.LanguageSelector)">
            <summary>
            Gets all content items that is represented by the provided references
                        in the language given by the provided language selector.
            </summary>
            <param name="contentReferences">A list of references to content that should be fetched.</param>
            <param name="languageSelector">The selector that provides the language to get the content in.</param>
            <returns>A list of content for the specifed references.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.GetItems(System.Collections.Generic.IEnumerable{EPiServer.Core.ContentReference},EPiServer.Core.LoaderOptions)">
            <summary>
            Gets all content items that is represented by the provided references.
            </summary>
            <param name="contentReferences">A list of references to content that should be fetched.</param>
            <param name="loaderOptions">The settings that specifies how content should be loaded.</param>
            <returns>A list of content for the specifed references.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.GetAncestorNames(EPiServer.Core.IContent,EPiServer.Web.SiteDefinition)">
            <summary>
            Gets the names of the ancestors from the start content to the given content.
            </summary>
            <param name="content">The content for which to get the path information.</param>
            <param name="currentSiteDefinition">The current site definition</param>
            <returns>The path from root node to the given content as a collection of names.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.GetAncenstorReferences(EPiServer.Core.ContentReference)">
            <summary>
            Gets the ancestors for a content.
            </summary>
            <param name="contentLink">The content link to the the ancestors for.</param>
            <returns>
            </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.GetPublishedVersion(EPiServer.Core.ContentReference)">
            <summary>
            Gets the published content version for the given content reference.
            </summary>
            <param name="contentLink">The content reference for which to get the published content version.</param>
            <returns>A published content version.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.GetPublishedVersion(EPiServer.Core.ContentReference,System.Globalization.CultureInfo)">
            <summary>
            Gets the published content version for the given content reference in the given culture.
            </summary>
            <param name="contentLink">The content reference for which to get the published content version.</param>
            <param name="culture">The culture for which to get the published content version.</param>
            <returns>A published content version.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.HasEditAccess(EPiServer.Core.IContent,EPiServer.Security.AccessLevel)">
            <summary>
            Determines whether the current user has the required <see cref="T:EPiServer.Security.AccessLevel"/> for the given <see cref="T:EPiServer.Core.IContent"/>
            </summary>
            <param name="content">The content to check the access rights for</param>
            <param name="accessLevel">The required access level</param>
            <returns>True if the user has the required access level</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.HasEditAccess(EPiServer.Core.IContent,System.Security.Principal.IPrincipal,EPiServer.Security.AccessLevel)">
            <summary>
            Determines whether the provided principal has the required <see cref="T:EPiServer.Security.AccessLevel"/> for the given <see cref="T:EPiServer.Core.IContent"/>
            </summary>
            <param name="content">The content to check the access rights for</param>
            <param name="principal">The principal to check the permissions for</param>
            <param name="accessLevel">The required access level</param>
            <returns>True if the user has the required access level</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentLoaderService.IsContentInsideLocalAssetFolder(EPiServer.Core.ContentReference,EPiServer.Web.SiteDefinition)">
            <summary>
            Checks whether the given contentLink is located inside a Local Asset folder.
            </summary>
            <param name="contentLink">ContentReference</param>
            <param name="siteDefinition">SiteDefinition instance</param>
            <returns>true if any of the ancestors of the content link is local asset folder</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentService.GetDefaultData``1(EPiServer.Core.ContentReference,System.Int32)">
             <summary>
             Gets a new default instance of an <see cref="T:EPiServer.Core.IContentData"/> object for the given type, placed at the location of the parent provided
                         and initialized with the default values for the content type. The language of the content item is determined from the <see cref="T:EPiServer.Globalization.LanguageResolver"/>.
            
             </summary>
             <typeparam name="T">The type of content to create.</typeparam><param name="parent">The parent link.</param>
             <param name="contentTypeId">The Id of the content type that the content item should be created as.</param>
             <returns>
             A <see cref="T:EPiServer.Core.IContent"/> object for the given <see cref="T:EPiServer.DataAbstraction.ContentType"/>, initialized with the default values for the content type.
             </returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentService.Copy(EPiServer.Core.IContent,EPiServer.Core.ContentReference)">
            <summary>
            Copies content from it's current location to another position in the structure first
            ensuring that the current user has the minimal access rights required at the destination.
            </summary>
            <param name="content">The content that should be moved.</param>
            <param name="destination">The destination where the content will be moved as a child to.</param>
            <returns>A content reference to the moved content.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentService.Move(EPiServer.Core.IContent,EPiServer.Core.ContentReference)">
            <summary>
            Moves content from it's current location to another position in the structure first
            ensuring that the current user has the minimal access rights required at the destination.
            </summary>
            <param name="content">The content that should be moved.</param>
            <param name="destination">The destination where the content will be moved as a child to.</param>
            <returns>A content reference to the moved content.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentService.Save(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction)">
            <summary>
            Saves a content to the repository with the provided save action performed first ensuring that the current user meets the mininum access rights requirements.
            </summary>
            <param name="content">An <see cref="T:EPiServer.Core.IContent"/> object containing all the data that should be saved.</param>
            <param name="saveAction">The exact <see cref="T:EPiServer.DataAccess.SaveAction"/> that should be performed.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentService.Save(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction,EPiServer.Security.AccessLevel)">
            <summary>
            Saves a content to the repository with the provided save action performed first ensuring that the current user meets the mininum access rights requirements.
            </summary>
            <param name="content">An <see cref="T:EPiServer.Core.IContent"/> object containing all the data that should be saved.</param>
            <param name="saveAction">The exact <see cref="T:EPiServer.DataAccess.SaveAction"/> that should be performed.</param>
            <param name="accessLevel">The AccessLevel</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentService.SaveMedia(EPiServer.Core.IContentMedia,System.Boolean,System.Boolean)">
            <summary>
            Saves a content media to the repository  with the provided save action and respecting canBePublish and replaceOriginalContent flags if Project Mode is active
            </summary>
            <param name="media">An <see cref="T:EPiServer.Core.IContentMedia"/> object containing all the data that should be saved.</param>
            <param name="canBePublished">If true, then the media will be published immediately provided that project mode is inactive automatic publishing of media is configured.</param>
            <param name="replaceOriginalContent">Indicates wether to replace to replace the original content or not</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentService.CreateDraft(EPiServer.Core.ContentReference,System.Boolean)">
            <summary>
            Create a new draft of a content based on its content reference
            </summary>
            <param name="contentLink">Reference to the content to create a new draft for</param>
            <param name="setAsCommonDraft">If set, the new draft is set as the common draft</param>
            <returns>The version information for the new draft</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentService.IsVersionWritable(EPiServer.Core.IContent)">
            <summary>
            Determines whether this version is writable or if a new version is needed to store new data
            </summary>
            <param name="content">The content to test for writability</param>
            <returns>True if version can be changed</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentService.IsVersionWritable(EPiServer.DataAbstraction.ContentVersion)">
            <summary>
            Determines whether this version is writable or if a new version is needed to store new data
            </summary>
            <param name="contentVersion">The version to test for writability</param>
            <returns>True if version can be changed</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentService.Delete(EPiServer.Core.ContentReference,System.Boolean,EPiServer.Security.AccessLevel)">
            <summary>
            Deletes a content from the repository first ensuring that the current user meets the minimal access right requirements.
            </summary>
            <param name="contentReference">The content reference</param>
            <param name="forceDelete"> If set to true, deletes the content even if it is being referenced by other content.</param>
            <param name="accessLevel">The required access level that the current user must have to be allowed to delete the content.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentService.DeleteChildren(EPiServer.Core.ContentReference,System.Boolean,EPiServer.Security.AccessLevel)">
            <summary>
            Deletes all childern of a content from the repository.
            </summary>
            <param name="contentReference">The content reference</param>
            <param name="forceDelete"> If set to true, deletes the content even if it is being referenced by other content.</param>
            <param name="accessLevel">The access rights</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentService.DeleteVersion(EPiServer.Core.ContentReference)">
            <summary>
            Delete a single version of a Content.
            </summary>
            <param name="contentReference">The content reference</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentService.DeleteLanguageBranch(EPiServer.Core.ContentReference,System.String,EPiServer.Security.AccessLevel)">
            <summary>
            Deletes the specified language branch for a content from the repository first ensuring that the current user meets the minimal access right requirements.
            </summary>
            <param name="contentReference">The content reference</param>
            <param name="languageBranch">The language branch to delete.</param>
            <param name="accessLevel">The required access level that the current user must have on the page to be allowed to delete the language branch.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.ContentService.IsPartOfApproval(EPiServer.Core.ContentReference)">
            <summary>
            Returns true if the content reference has an approval definition configured and is enabled, otherwise false
            </summary>
            <param name="contentReference"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.EditUrlResolver.GetFullUrlToEditView(EPiServer.Web.SiteDefinition)">
            <summary>
            Gets the full URL to Home view in CMS Edit
            </summary>
            <remarks>
            It uses site url from the supplied <see cref="T:EPiServer.Web.SiteDefinition"/> and creates a full url similar to: http://localhost/head/episerver/cms
            </remarks>
            <param name="siteDefinition">The site to get the full edit url for.</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.EditUrlResolver.GetFullUrlToPath(EPiServer.Web.SiteDefinition,System.String)">
            <summary>
            Get the full url to the provided path using the site definition
            </summary>
            <param name="siteDefinition">The site to to use when building the url</param>
            <param name="path">The path to get the full url for</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.SaveActionRuleEngine.GetAllowedSaveActionForContent(EPiServer.Core.IContent,EPiServer.DataAccess.SaveAction)">
            <summary>
            Modifies the specified SaveAction if the content is part of approval to not use SaveAction.Publish if SaveAction.SkipValidation is not set.
            </summary>
            <param name="content"></param>
            <param name="saveAction"></param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.SaveActionRuleEngine.IsPartOfApproval(EPiServer.Core.ContentReference)">
            <summary>
            Returns true if the content reference has an approval definition configured and is enabled, otherwise false
            </summary>
            <param name="contentReference"></param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.SaveActionRuleEngine.GetCommand(EPiServer.DataAccess.SaveAction)">
            <summary>
            Gets the primary command of a combined save action.
            </summary>
            <remarks>
            Copied from the internal SaveActionExtensions in Cms.Core
            </remarks>
        </member>
        <member name="M:EPiServer.Cms.Shell.Service.Internal.SaveActionRuleEngine.GetOptions(EPiServer.DataAccess.SaveAction)">
            <summary>
            Gets the options part of a combined save action.
            </summary>
            <remarks>
            Copied from the internal SaveActionExtensions in Cms.Core
            </remarks>
        </member>
        <member name="T:EPiServer.Cms.Shell.Templating.Razor.Internal.EPiHelper">
            <summary>
            Represents support for EPiServer extensions when rendering Razor views with <see cref="T:EPiServer.Cms.Shell.Templating.Razor.Internal.RazorEngine"/>
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.Templating.Razor.Internal.FormatExtensions">
            <summary>
            Extensions to perform custom formatting in a razor template having an <see cref="T:EPiServer.Cms.Shell.Templating.Razor.Internal.EPiHelper"/> property.
            Compare to the Html or Ajax property in MVC Page templates.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.FormatExtensions.FormatHtml(EPiServer.Cms.Shell.Templating.Razor.Internal.EPiHelper,System.String,System.Object[])">
            <summary>
             Replaces one or more format items in a specified string with the string representation
             of a specified object.
            </summary>
            <param name="helper">The <see cref="T:EPiServer.Cms.Shell.Templating.Razor.Internal.EPiHelper"/> instance </param>
            <param name="format">A composite format string</param>
            <param name="values">The values to insert into the format string</param>
            <returns>Markup that is not HTML encoded</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.FormatExtensions.InsertBreaks(System.Web.IHtmlString)">
            <summary>
            Insert HTML break elements before line breaks in a html string
            </summary>
            <param name="htmlString">The string to replace line breaks in</param>
            <returns>An IHtmlString with html breaks inserted</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.Templating.Razor.Internal.ITemplate">
            <summary>
            Defines the interface required for rendering using <see cref="T:EPiServer.Cms.Shell.Templating.Razor.Internal.RazorEngine"/>
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Templating.Razor.Internal.ITemplate.Result">
            <summary>
            Gets the result of the template execution
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.ITemplate.Execute">
            <summary>
            Executes the template
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.ITemplate.Clear">
            <summary>
            Clear the current execution result buffer
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.ITemplate.Write(System.Object)">
            <summary>
            Writes an object with HTML encoding to the result buffer 
            </summary>
            <param name="data">The data to write to the buffer</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.ITemplate.WriteLiteral(System.String)">
            <summary>
            Writes a string value to the result buffer 
            </summary>
            <param name="data">The string to write to the buffer</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.ITemplate.WriteTo(System.IO.TextWriter,System.Object)">
            <summary>
            Writes an object with HTML encoding to the supplied writer 
            </summary>
            <param name="data">The string to write to the buffer</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.ITemplate.WriteLiteralTo(System.IO.TextWriter,System.Object)">
            <summary>
            Writes an object to the supplied writer 
            </summary>
            <param name="data">The string to write to the buffer</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.ITemplate.WriteAttribute(System.String,System.Web.WebPages.Instrumentation.PositionTagged{System.String},System.Web.WebPages.Instrumentation.PositionTagged{System.String},System.Web.WebPages.AttributeValue[])">
            <summary>
            Writes an attribute value to the result buffer
            </summary>
            <param name="name">Name of the attribute</param>
            <param name="prefix">Prefix before the all attribute values</param>
            <param name="suffix">Suffix written after the attribute values</param>
            <param name="values">Attribute values to render</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.Templating.Razor.Internal.ITemplate`1">
            <summary>
            Defines the interface required for rendering with a typed model using <see cref="T:EPiServer.Cms.Shell.Templating.Razor.Internal.RazorEngine"/>
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Templating.Razor.Internal.ITemplate`1.Model">
            <summary>
            The model used when rendering
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.Templating.Razor.Internal.LocalizationExtensions">
            <summary>
            Extensions to perform localizations in a razor template having an <see cref="T:EPiServer.Cms.Shell.Templating.Razor.Internal.EPiHelper"/> property.
            Compare to the Html or Ajax property in MVC Page templates.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.LocalizationExtensions.Translate(EPiServer.Cms.Shell.Templating.Razor.Internal.EPiHelper,System.String)">
            <summary>
            Translates using the current <see cref="!:LocalizationService"/>.
            </summary>
            <param name="translationKey">The xpath to the translated text</param>
            <returns>A translated string or a warning text if no translation was found</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.LocalizationExtensions.TranslateFormat(EPiServer.Cms.Shell.Templating.Razor.Internal.EPiHelper,System.String,System.Object[])">
            <summary>
            Translates using the current <see cref="!:LocalizationService"/>.
            </summary>
            <param name="translationKey">The xpath to the translated text</param>
            <param name="values">An array of objects passed to the string.Format method</param>
            <returns>A translated string or a warning text if no translation was found</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.Templating.Razor.Internal.RazorCompiler">
            <summary>
            Compiles razor templates supplied in a template string to a C# executable class
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.RazorCompiler.CompileTemplate(System.String,System.Type)">
            <summary>
            Compiles a razor template provided in a string to executable code
            </summary>
            <param name="template">The Razor template to compile</param>
            <param name="modelType">Type of the model which will be used when executing the template</param>
            <returns></returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.RazorCompiler.Compile(System.String,System.String,System.Type)">
            <summary>
            Compile the template string
            </summary>
            <param name="className">The class name to use when compiling</param>
            <param name="template">The template string to compile into a class</param>
            <param name="modelType">Type of model when compiling a types template</param>
            <returns>The compilation result</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.Templating.Razor.Internal.RazorEngine">
            <summary>
            Compiles and executes Razor templats. The compiled templates are cached on a key and the model type
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.RazorEngine.#ctor(EPiServer.Cms.Shell.Templating.Razor.Internal.RazorCompiler)">
            <summary>
            Initializes the <see cref="!:Engine"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.RazorEngine.ExecuteTemplate(System.String,System.String)">
            <summary>
            Compiles and executes a Razor template
            </summary>
            <param name="templateKey">A unique identifier for the template</param>
            <param name="template">The template string to compile and execute</param>
            <returns>The result of the template execution</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.RazorEngine.ExecuteTemplate``1(System.String,System.String,``0)">
            <summary>
            Compiles and executes a Razor template with the given model
            </summary>
            <param name="templateKey">A unique identifier for the template</param>
            <param name="template">The template string to compile and execute</param>
            <param name="model">The model used when executing the template</param>
            <returns>The result of the template execution</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.Templating.Razor.Internal.TemplateBase">
            <summary>
            Base class for Razor templates created with the <see cref="T:EPiServer.Cms.Shell.Templating.Razor.Internal.RazorCompiler"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.TemplateBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.Templating.Razor.Internal.TemplateBase"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Templating.Razor.Internal.TemplateBase.EPi">
            <summary>
            An extension helper entry point. 
            Extension methods added to <see cref="T:EPiServer.Cms.Shell.Templating.Razor.Internal.EPiHelper"/> will be available as EPi.Method() in the template.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Templating.Razor.Internal.TemplateBase.Result">
            <summary>
            Contains the rendered template once <see cref="M:EPiServer.Cms.Shell.Templating.Razor.Internal.TemplateBase.Execute"/> has been called.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.TemplateBase.Execute">
            <summary>
            Executes the template. The result will be available in <see cref="P:EPiServer.Cms.Shell.Templating.Razor.Internal.TemplateBase.Result"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.TemplateBase.Clear">
            <summary>
            Clear the previous execution result
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.TemplateBase.Write(System.Object)">
            <summary>
            Outputs an object to the rendering buffer as a html encoded string.
            </summary>
            <param name="value">The value to render</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.TemplateBase.WriteLiteral(System.String)">
            <summary>
            Outputs a string to the rendering buffer.
            </summary>
            <param name="text">The value to render</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.TemplateBase.WriteTo(System.IO.TextWriter,System.Object)">
            <summary>
            Outputs an object to the supplied writer as a html encoded string.
            </summary>
            <param name="writer">The target writer</param>
            <param name="value">The value to render</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.TemplateBase.WriteLiteralTo(System.IO.TextWriter,System.Object)">
            <summary>
            Outputs an object to the supplied writer.
            </summary>
            <param name="writer">The target writer</param>
            <param name="value">The value to render</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Templating.Razor.Internal.TemplateBase.WriteAttribute(System.String,System.Web.WebPages.Instrumentation.PositionTagged{System.String},System.Web.WebPages.Instrumentation.PositionTagged{System.String},System.Web.WebPages.AttributeValue[])">
            <summary>
            Outputs attribute values to the rendering buffer
            </summary>
            <remarks>
            This implementation ignores the positional information in <see cref="T:System.Web.WebPages.Instrumentation.PositionTagged`1"/>
            </remarks>
            <param name="name">Name of the attribute</param>
            <param name="prefix">Prefix before the all attribute values</param>
            <param name="suffix">Suffix written after the attribute values</param>
            <param name="values">Attribute values to render</param>
        </member>
        <member name="T:EPiServer.Cms.Shell.Templating.Razor.Internal.TemplateBase`1">
            <summary>
            Base class for typed Razor templates created with the <see cref="T:EPiServer.Cms.Shell.Templating.Razor.Internal.RazorCompiler"/>.
            </summary>
            <typeparam name="TModel"></typeparam>
        </member>
        <member name="P:EPiServer.Cms.Shell.Templating.Razor.Internal.TemplateBase`1.Model">
            <summary>
            The model used when executing the template
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.ViewComposition.IFrameComponentAttribute">
            <summary>
            Defines a component that will load a page inside an iframe with a defined source location.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.ViewComposition.IFrameComponentAttribute.#ctor">
            <summary>
            Creates a new instance of <see cref="T:EPiServer.Cms.Shell.ViewComposition.IFrameComponentAttribute"/>
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.ViewComposition.IFrameComponentAttribute.#ctor(EPiServer.Cms.Shell.ViewComposition.IFrameComponentAttribute.ResolvePathDelegate,EPiServer.Cms.Shell.ViewComposition.IFrameComponentAttribute.ResolvePathDelegate,EPiServer.Cms.Shell.ViewComposition.IFrameComponentAttribute.ResolvePathDelegate)">
            <summary>
            Creates a new instance of <see cref="T:EPiServer.Cms.Shell.ViewComposition.IFrameComponentAttribute"/>
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.ViewComposition.IFrameComponentAttribute.CreateComponentDefinition(System.Type)">
            <summary>
            Creates the component definition from the settings provided in the attribute properties.
            </summary>
            <returns>
            A new instance of a <see cref="T:EPiServer.Shell.ViewComposition.DefaultComponentDefinition"/>.
            </returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.ViewComposition.IFrameComponentAttribute.Url">
            <summary>
            Gets or sets the source URL for the iframe to load.
            </summary>
            <value>The source URL.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.ViewComposition.IFrameComponentAttribute.ControlUri">
            <summary>
            If a wrapper is used to encapsulate a UserControl, this property can be set to access its URI used when loading the control. The default value is null.
            </summary>
            <value>The URI to the ascx of the control.</value>
        </member>
        <member name="T:EPiServer.Cms.Shell.ViewComposition.IFrameComponentAttribute.ResolvePathDelegate">
            <summary>
            Delegate to resolve resource path for IFrameComponent.
            </summary>
            <param name="path">The path.</param>
            <returns>Resolved path.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.ViewComposition.IFrameComponentAttribute.ResolvePathInternal(System.String,EPiServer.Cms.Shell.ViewComposition.IFrameComponentAttribute.ResolvePathDelegate)">
            <summary>
            Resolves the path to plug-in resources.
            </summary>
            <param name="path">The path.</param>
            <param name="resolvePathDelegate">The resolve path delegate.</param>
            <returns>Resolved path.</returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.ViewComposition.IFrameComponentAttribute.UrlFromUi">
            <summary>
            Sets the url relative the UI directory to the resource. The property used for setting the Url dictates what path resolver that will be used.
            </summary>
            <value>The URL relative the UI directory</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.ViewComposition.IFrameComponentAttribute.UrlFromUtil">
            <summary>
            Sets the URL relative the util directory to the resource. The property used for setting the Url dictates what path resolver that will be used.
            </summary>
            <value>The URL relative the util directory</value>
        </member>
        <member name="T:EPiServer.Cms.Shell.ViewComposition.Internal.ProjectModeViewTransformer">
            <summary>
            A view transformer that adds the Project Changes component depending on if Project Mode is enabled or not
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.ViewComposition.Internal.ProjectModeViewTransformer.SortOrder">
            <summary>
            Set a high sort order to make it more likely to run late
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.ViewComposition.Internal.ProjectModeViewTransformer.TransformView(EPiServer.Shell.ViewComposition.ICompositeView,System.Security.Principal.IPrincipal)">
            <summary>
            Adds the Project Changes component to the PlugInArea.NavigationDefaultGroup is project mode is enabled
            </summary>
            <param name="view"></param>
            <param name="principal"></param>
        </member>
        <member name="T:EPiServer.Cms.Shell.VppInitializer">
            <summary>
            Virtual Path provider for App_Themes and Util.
            Uses <see cref="T:EPiServer.Web.Hosting.ZipArchiveVirtualPathProvider"/> which eventually picks up zip file loaded with everything from the App_Data folder
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.Workspace.Committers.CommitArguments">
            <summary>
            Contextual information for an <see cref="T:EPiServer.Cms.Shell.Workspace.Committers.ICommitter"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Workspace.Committers.CommitArguments.Change">
            <summary>
            The change to be committed.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.Workspace.Committers.CommitResult">
            <summary>
            Provides information about the results for a commit of a workspace item.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Workspace.Committers.CommitResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.Workspace.Committers.CommitResult"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Workspace.Committers.CommitResult.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.Workspace.Committers.CommitResult"/> class.
            </summary>
            <param name="success">if set to <c>true</c>, the commit was successful.</param>
        </member>
        <member name="P:EPiServer.Cms.Shell.Workspace.Committers.CommitResult.Success">
            <summary>
            Gets or sets a value indicating whether the commit was a success or not.
            </summary>
            <value><c>true</c> if success; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.Workspace.Committers.CommitResult.Id">
            <summary>
            Gets or sets the id for the committed item.
            </summary>
            <value>The id for the commited item.</value>
            <remarks>This might differ from the original id if the commit resulted in a new object or version.</remarks>
        </member>
        <member name="P:EPiServer.Cms.Shell.Workspace.Committers.CommitResult.ValidationErrors">
            <summary>
            Gets or sets any validation errors.
            </summary>
            <value>The validation errors that this page currently has.</value>
        </member>
        <member name="T:EPiServer.Cms.Shell.Workspace.Committers.CommitterBase`1">
            <summary>
            Committer base class that simplifies the implementation of an <see cref="T:EPiServer.Cms.Shell.Workspace.Committers.ICommitter"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EPiServer.Cms.Shell.Workspace.Committers.CommitterBase`1.Commit(`0,EPiServer.Cms.Shell.Workspace.Committers.CommitArguments)">
            <summary>
            Commites the given change.
            </summary>
            <param name="change">The change to commit.</param>
            <param name="argument">Contextual arguments.</param>
            <returns>The <see cref="T:EPiServer.Cms.Shell.Workspace.Committers.CommitResult"/> containing the results of the commit.</returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.Workspace.Committers.CommitterBase`1.HandledType">
            <summary>
            Gets the type of change this committer can handle.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Workspace.Committers.CommitterBase`1.Commit(EPiServer.Cms.Shell.Workspace.Committers.CommitArguments)">
            <summary>
            Invokes the overridable generic overload to perform work.
            </summary>
            <param name="argument">Contextual arguments.</param>
            <returns>The <see cref="T:EPiServer.Cms.Shell.Workspace.Committers.CommitResult"/> containing the results of the commit.</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.Workspace.Committers.ICommitter">
            <summary>
            Classes implementing this interface are responsible for committing a certain 
            type of change during publishing operations.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Workspace.Committers.ICommitter.Commit(EPiServer.Cms.Shell.Workspace.Committers.CommitArguments)">
            <summary>
            Commits a change for everyone to be visible.
            </summary>
            <param name="argument">Context containing information.</param>
            <returns>The <see cref="T:EPiServer.Cms.Shell.Workspace.Committers.CommitResult"/> containing the results of the commit.</returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.Workspace.Committers.ICommitter.HandledType">
            <summary>
            Gets the type of change this committer can commit.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.Workspace.Committers.Internal.ContentDataCommitArguments">
            <summary>
            Contextual information for an <see cref="T:EPiServer.Cms.Shell.Workspace.Committers.ICommitter"/>.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Workspace.Committers.Internal.ContentDataCommitArguments.Action">
            <summary>
            The action to perform.
            </summary>
        </member>
        <member name="T:EPiServer.Cms.Shell.Workspace.Committers.Internal.ContentDataCommitter">
            <summary>
            Commits changed pages and publishes them.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Workspace.Committers.Internal.ContentDataCommitter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.Workspace.Committers.Internal.ContentDataCommitter"/> class.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Workspace.Committers.Internal.ContentDataCommitter.#ctor(EPiServer.IContentRepository,EPiServer.Framework.Localization.LocalizationService,EPiServer.Web.IUrlSegmentCreator,EPiServer.Web.IUrlSegmentGenerator,EPiServer.Cms.Shell.Service.Internal.ContentService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.Workspace.Committers.Internal.ContentDataCommitter"/> class.
            </summary>
            <param name="contentRepository">The content repository.</param>
            <param name="localizationService">The localization service.</param>
            <param name="urlSegmentCreator">The URL segment handler.</param>
            <param name="contentService">The ContentService instance</param>
        </member>
        <member name="M:EPiServer.Cms.Shell.Workspace.Committers.Internal.ContentDataCommitter.Commit(EPiServer.Cms.Shell.Workspace.Models.EditContentData,EPiServer.Cms.Shell.Workspace.Committers.CommitArguments)">
            <summary>
            Publishes the specified page.
            </summary>
            <param name="change">The changed page.</param>
            <param name="argument">Any additional arguments.</param>
            <returns>The <see cref="T:EPiServer.Cms.Shell.Workspace.Committers.CommitResult"/> containing the results of the commit.</returns>
        </member>
        <member name="T:EPiServer.Cms.Shell.Workspace.Models.ChangeBase">
            <summary>
            Represents a pending change to the system that is tracked by a <see cref="N:EPiServer.Cms.Shell.Workspace"/>.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Workspace.Models.ChangeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.Workspace.Models.ChangeBase"/> class.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Workspace.Models.ChangeBase.Id">
            <summary>
            The identifier.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Workspace.Models.ChangeBase.ChangeDate">
            <summary>
            The date the change was performed.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Workspace.Models.ChangeBase.ChangedItemId">
            <summary>
            The id of the changed item.
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Workspace.Models.ChangeBase.Title">
            <summary>
            Gets the title for the change that can be displayed to the user.
            </summary>
            <value>The title for the change.</value>
        </member>
        <member name="T:EPiServer.Cms.Shell.Workspace.Models.EditContentData">
            <summary>
            Represents an edited <see cref="T:EPiServer.Core.IContent"/> object.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Workspace.Models.EditContentData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.Workspace.Models.EditContentData"/> class using the <see cref="T:EPiServer.IContentRepository"/> from the service locator.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Workspace.Models.EditContentData.#ctor(EPiServer.IContentRepository,EPiServer.Framework.Localization.LocalizationService)">
            <summary>
            Initializes a new instance of the <see cref="T:EPiServer.Cms.Shell.Workspace.Models.EditContentData"/> class.
            </summary>
            <param name="contentRepository">The content repository.</param>
            <param name="localizationService"></param>
        </member>
        <member name="P:EPiServer.Cms.Shell.Workspace.Models.EditContentData.ContentReference">
            <summary>
            A link to an content version containing the changes.
            <remarks>To get a <see cref="T:EPiServer.Core.PageReference" /> from this property simply use <see cref="M:EPiServer.Core.PageReference.Parse(System.String)"/>.</remarks>
            </summary>
        </member>
        <member name="P:EPiServer.Cms.Shell.Workspace.Models.EditContentData.Language">
            <summary>
            The language of the changed page version.
            </summary>
        </member>
        <member name="M:EPiServer.Cms.Shell.Workspace.Models.EditContentData.Equals(EPiServer.Core.ContentReference)">
            <summary>
            Compares the ContentReference property with a <see cref="P:EPiServer.Cms.Shell.Workspace.Models.EditContentData.ContentReference"/>.
            </summary>
            <param name="itemToCompare">The item to compare with.</param>
            <returns><c>true</c> if the specified <see cref="P:EPiServer.Cms.Shell.Workspace.Models.EditContentData.ContentReference"/> equals the <see cref="P:EPiServer.Cms.Shell.Workspace.Models.EditContentData.ContentReference"/> property; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:EPiServer.Cms.Shell.Workspace.Models.EditContentData.Equals(EPiServer.Core.ContentReference,System.String)">
            <summary>
            Compares the <see cref="P:EPiServer.Cms.Shell.Workspace.Models.EditContentData.ContentReference"/> property with a <see cref="T:EPiServer.Core.PageReference"/> and the <see cref="P:EPiServer.Cms.Shell.Workspace.Models.EditContentData.Language"/> with a specified language.
            </summary>
            <param name="itemToCompare">The item to compare with.</param>
            <param name="language">The language.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:EPiServer.Core.PageReference"/> and language matches; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:EPiServer.Cms.Shell.Workspace.Models.EditContentData.Title">
            <summary>
            Gets the page name of the page that has been edited.
            </summary>
            <value>The page name for the page that has been edited.</value>
        </member>
        <member name="P:EPiServer.Cms.Shell.Workspace.Models.EditContentData.Url">
            <summary>
            Gets the page name of the page that has been edited.
            </summary>
            <value>The page name for the page that has been edited.</value>
        </member>
    </members>
</doc>
